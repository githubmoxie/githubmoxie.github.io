<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>webpack 基础</title>
      <link href="/2024/02/19/webpack-%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/02/19/webpack-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>webpack</code> 基础学习的相关内容</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h1><p>是一个静态资源打包工具，将 Webpack 输出的文件叫做 bundle。</p><blockquote><p><a href="https://xxpromise.gitee.io/webpack5-docs/">参考 webpack</a></p></blockquote><hr><h1 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a><strong>功能介绍</strong></h1><p><strong>Webpack 本身功能是有限的:（其他功能，需要配置才能完成）</strong></p><p>Webpack 本身功能比较少，只能处理 js、json 资源，一旦遇到 css 等其他资源就会报错。</p><ul><li>开发模式：仅能编译 JS 中的 ES Module </li><li>生产模式：能编译 JS 中的 ES Module，还能压缩 JS 代码</li></ul><hr><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a><strong>基本使用</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">需要注意的是 package.json 中 name 字段不能叫做 webpack, 否则安装包会报错</span><br><span class="line">// 开发模式</span><br><span class="line">npx webpack ./src/main.js --mode=development</span><br><span class="line">// 生产模式</span><br><span class="line">npx webpack ./src/main.js --mode=production </span><br></pre></td></tr></table></figure><hr><h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a><strong>基本配置</strong></h1><h2 id="5-大核心概念"><a href="#5-大核心概念" class="headerlink" title="5 大核心概念"></a><strong>5 大核心概念</strong></h2><ol><li>entry（入口）</li></ol><p>指示 Webpack 从哪个文件开始打包</p><ol><li>output（输出）</li></ol><p>指示 Webpack 打包完的文件输出到哪里去，如何命名等</p><ol><li>loader（加载器）</li></ol><p>webpack 本身只能处理 js、json 等资源，其他资源需要借助 loader，Webpack 才能解析</p><ol><li>plugins（插件）</li></ol><p>扩展 Webpack 的功能</p><ol><li>mode（模式）</li></ol><p>主要由两种模式：</p><ul><li>开发模式：development</li><li>生产模式：production</li></ul><p>注意：使用 loader 不需要引入，plugins 需要引入</p><hr><h2 id="Webpack-配置文件"><a href="#Webpack-配置文件" class="headerlink" title="Webpack 配置文件"></a><strong>Webpack 配置文件</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Node.js的核心模块，专门用来处理文件路径</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 入口</span></span><br><span class="line">  <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// path: 文件输出目录，必须是绝对路径</span></span><br><span class="line">    <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">    <span class="comment">// __dirname 当前文件的文件夹绝对路径</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="comment">// filename: 输出文件名</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 加载器</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="comment">// 模式</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>, <span class="comment">// 开发模式</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行指令 npx webpack</span></span><br></pre></td></tr></table></figure><hr><h1 id="处理样式资源"><a href="#处理样式资源" class="headerlink" title="处理样式资源"></a><strong>处理样式资源</strong></h1><h2 id="处理-Css-资源"><a href="#处理-Css-资源" class="headerlink" title="处理 Css 资源"></a><strong>处理 Css 资源</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.下载包</span></span><br><span class="line">npm i css-loader style-loader -D</span><br><span class="line"><span class="comment">/* 2.功能介绍</span></span><br><span class="line"><span class="comment">css-loader：负责将 Css 文件编译成 Webpack 能识别的模块（将 css 资源编译成 commonjs 的模块到 js 中）</span></span><br><span class="line"><span class="comment">style-loader：会动态创建一个 Style 标签，里面放置 Webpack 中 Css 模块内容，</span></span><br><span class="line"><span class="comment">（将 js 中的 css 通过创建 style 标签添加 html 文件中生效）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 3.配置</span></span><br><span class="line"><span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// use 数组里面 Loader 执行顺序是（从右到左，重下到上）</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">     &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><hr><h2 id="处理-less、sass、stylus"><a href="#处理-less、sass、stylus" class="headerlink" title="处理 less、sass、stylus"></a><strong>处理 less、sass、stylus</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装 </span></span><br><span class="line">pnpm add less less-loader sass sass-loader stylus stylus-loader -D</span><br><span class="line"><span class="comment">// 配置</span></span><br><span class="line"><span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>],</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;sass-loader&quot;</span>],</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.styl$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;stylus-loader&quot;</span>],</span><br><span class="line">     &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><hr><h1 id="处理图片资源"><a href="#处理图片资源" class="headerlink" title="处理图片资源"></a><strong>处理图片资源</strong></h1><p>过去在 Webpack4 时，我们处理图片资源通过 file-loader 和 url-loader 进行处理</p><p>现在 Webpack5 已经将两个 Loader 功能内置到 Webpack 里了，我们只需要简单配置即可处理图片资源</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span> <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><hr><h1 id="修改输出资源的名称和路径"><a href="#修改输出资源的名称和路径" class="headerlink" title="修改输出资源的名称和路径"></a><strong>修改输出资源的名称和路径</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>, <span class="comment">// 将 js 文件输出到 static/js 目录中</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">            <span class="attr">parser</span>: &#123;</span><br><span class="line">                <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">                    <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">generator</span>: &#123;</span><br><span class="line">            <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">            <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">            <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">            <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">            <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,    </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="自动清空上次打包资源"><a href="#自动清空上次打包资源" class="headerlink" title="自动清空上次打包资源"></a><strong>自动清空上次打包资源</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>, <span class="comment">// 自动将上次打包目录资源清空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="处理字体图标资源（其他资源同下-test-修改即可）"><a href="#处理字体图标资源（其他资源同下-test-修改即可）" class="headerlink" title="处理字体图标资源（其他资源同下 test 修改即可）"></a><strong>处理字体图标资源（其他资源同下 test 修改即可）</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?|map3|map4|avi)$/</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>, <span class="comment">// 这里的是相当与是 file-loader 处理</span></span><br><span class="line">            <span class="attr">generator</span>: &#123;</span><br><span class="line">                <span class="comment">// 输出名称</span></span><br><span class="line">                <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:10][ext][query]&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="处理-js-资源"><a href="#处理-js-资源" class="headerlink" title="处理 js 资源"></a><strong>处理 js 资源</strong></h1><h2 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a><strong>Eslint</strong></h2><p>webpack 配置 eslint 后在打包时候会校验代码，如不配置只装了 vscode 插件只是文件有代码报错提示</p><p>vite 可以使用 vite-plugin-eslint 插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">pnpm add eslint-webpack-plugin eslint -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line"><span class="comment">// eslint 可以在 package.json 中 eslintConfig 配置不需要创建文件，在原有文件基础上写。</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 继承 Eslint 规则</span></span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&quot;eslint:recommended&quot;</span>],</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>, <span class="comment">// 启用node中全局变量</span></span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>, <span class="comment">// 启用浏览器中全局变量</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 解析选项</span></span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 具体检查规则</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&quot;no-var&quot;</span>: <span class="number">2</span>, <span class="comment">// 不能使用 var 定义变量</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 指定检查文件的根目录</span></span><br><span class="line">      <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">],</span><br></pre></td></tr></table></figure><hr><h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a><strong>Babel</strong></h2><p>主要用于将 ES6 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中</p><p><strong>具体配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // 预设</span><br><span class="line">  presets: [],</span><br><span class="line">&#125;;</span><br><span class="line">/*</span><br><span class="line">presets 预设</span><br><span class="line">简单理解：就是一组 Babel 插件, 扩展 Babel 功能</span><br><span class="line">@babel/preset-env</span><br><span class="line">@babel/preset-react</span><br><span class="line">@babel/preset-typescript</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p><strong>在 Webpack 中使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下载包</span></span><br><span class="line">pnpm add babel-loader @babel/core @babel/preset-env -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">             &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除node_modules代码不编译</span></span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                <span class="comment">// 可以直接写在这里</span></span><br><span class="line">                <span class="comment">// options: &#123;</span></span><br><span class="line">                    <span class="comment">// presets: [&quot;@babel/preset-env&quot;],            </span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">             &#125;,        </span><br><span class="line">        ]    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// babel.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="处理-Html-资源"><a href="#处理-Html-资源" class="headerlink" title="处理 Html 资源"></a><strong>处理 Html 资源</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pnpm add html-webpack-plugin -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">        <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">        <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">        <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;public/index.html&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意使用该插件后，html 模板就需要引入 script 了，否则会出现两个（ vite 不同）</span></span><br></pre></td></tr></table></figure><hr><h1 id="开发服务器"><a href="#开发服务器" class="headerlink" title="开发服务器"></a><strong>开发服务器</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装包</span></span><br><span class="line">pnpm add webpack-dev-server -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; </span><br><span class="line">    <span class="comment">// 开发服务器</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 启动服务器域名</span></span><br><span class="line">    <span class="attr">port</span>: <span class="string">&quot;3000&quot;</span>, <span class="comment">// 启动服务器端口号</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 是否自动打开浏览器</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行 npx webpack serve</span></span><br></pre></td></tr></table></figure><hr><h1 id="生产模式配置"><a href="#生产模式配置" class="headerlink" title="生产模式配置"></a><strong>生产模式配置</strong></h1><h2 id="css-处理"><a href="#css-处理" class="headerlink" title="css 处理"></a><strong>css 处理</strong></h2><h3 id="提取-Css-成单独文件"><a href="#提取-Css-成单独文件" class="headerlink" title="提取 Css 成单独文件"></a><strong>提取 Css 成单独文件</strong></h3><p>Css 文件目前被打包到 js 文件中，当 js 文件加载时，会创建一个 style 标签来生成样式</p><p>这样对于网站来说，会出现闪屏现象，用户体验不好</p><p>我们应该是单独的 Css 文件，通过 link 标签加载性能才好</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pnpm add mini-css-extract-plugin -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.prod.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            <span class="comment">// 之前的 style-loader 要全部换成 MiniCssExtractPlugin.loader</span></span><br><span class="line">            <span class="comment">// （这里只修改了 css 配置，其他同理）</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                <span class="attr">use</span>: [<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">            &#125;,        </span><br><span class="line">        ]    </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="comment">// 提取css成单独文件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 定义输出文件名和目录</span></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&quot;static/css/main.css&quot;</span>,</span><br><span class="line">        &#125;),    </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Css-兼容性处理"><a href="#Css-兼容性处理" class="headerlink" title="Css 兼容性处理"></a><strong>Css 兼容性处理</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">pnpm add postcss-loader postcss postcss-preset-env -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.prod.js </span></span><br><span class="line"><span class="comment">// 注意：要写在 css-loader 后面，在 less-loader 前面（less scss stylus 同）</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">                    <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">                        <span class="attr">options</span>: &#123;</span><br><span class="line">                            <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                                <span class="attr">plugins</span>: [</span><br><span class="line">                                    <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">                                ],</span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装 getStyleLoader</span></span><br><span class="line"><span class="comment">// 用来获取处理样式的loader</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getStyleLoader</span>(<span class="params">pre</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="comment">// 提取css成单独文件</span></span><br><span class="line">        <span class="string">&quot;css-loader&quot;</span>, <span class="comment">// 将css资源编译成commonjs的模块到js中</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                    <span class="attr">plugins</span>: [</span><br><span class="line">                        <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">                    ],</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        pre,</span><br><span class="line">    ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="attr">use</span>: <span class="title function_">getStyleLoader</span>()</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="attr">use</span>: <span class="title function_">getStyleLoader</span>(<span class="string">&quot;less-loader&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：可能需要在 package.json 中指定具体的兼容到哪个版本</span></span><br><span class="line"><span class="string">&quot;browserslist&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;last 2 version&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&gt; 1%&quot;</span>,</span><br><span class="line">    <span class="string">&quot;not dead&quot;</span></span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><hr><h3 id="Css-压缩"><a href="#Css-压缩" class="headerlink" title="Css 压缩"></a><strong>Css 压缩</strong></h3><p>html、js 默认生产打包开启了压缩</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pnpm add css-minimizer-webpack-plugin -D</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CssMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;css-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">optimization</span>: &#123;</span><br><span class="line">        <span class="attr">minimizer</span>: [</span><br><span class="line">            <span class="comment">// 在 webpack@5 中，你可以使用 `...` 语法来扩展现有的 minimizer</span></span><br><span class="line">            <span class="comment">//（即 `terser-webpack-plugin`），将下一行取消注释</span></span><br><span class="line">            <span class="comment">// `...`,</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">CssMinimizerPlugin</span>(),</span><br><span class="line">        ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="高级优化"><a href="#高级优化" class="headerlink" title="高级优化"></a><strong>高级优化</strong></h1><h2 id="提升开发体验"><a href="#提升开发体验" class="headerlink" title="提升开发体验"></a><strong>提升开发体验</strong></h2><h3 id="SourceMap"><a href="#SourceMap" class="headerlink" title="SourceMap"></a><strong>SourceMap</strong></h3><p>通过查看 <a href="https://webpack.docschina.org/configuration/devtool/">Webpack DevTool 文档open in new window</a> 可知，SourceMap 的值有很多种情况。</p><ul><li>开发模式：cheap-module-source-map</li></ul><p>优点：打包编译速度快，只包含行映射</p><p>缺点：没有列映射</p><ul><li>生产模式：source-map</li></ul><p>优点：包含行/列映射</p><p>缺点：打包编译速度更慢</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 其他省略</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;cheap-module-source-map&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 其他省略</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="提升打包构建速度"><a href="#提升打包构建速度" class="headerlink" title="提升打包构建速度"></a><strong>提升打包构建速度</strong></h2><h3 id="HotModuleReplacement"><a href="#HotModuleReplacement" class="headerlink" title="HotModuleReplacement"></a><strong>HotModuleReplacement</strong></h3><p>在程序运行中，替换、添加或删除模块，而无需重新加载整个页面。</p><p><strong>原因</strong></p><p>开发时我们修改了其中一个模块代码，Webpack 默认会将所有模块全部重新打包编译，速度很慢。</p><p>所以我们需要做到修改某个模块代码，就只有这个模块代码需要重新打包编译，其他模块不变，这样打包速度就能很快。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 其他省略</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 启动服务器域名</span></span><br><span class="line">    <span class="attr">port</span>: <span class="string">&quot;3000&quot;</span>, <span class="comment">// 启动服务器端口号</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 是否自动打开浏览器</span></span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 开启HMR功能（只能用于开发环境，生产环境不需要了，默认是开启的）</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：此时 css 样式经过 style-loader 处理，已经具备 HMR 功能了。 但是 js 还不行。</span></span><br><span class="line"><span class="comment">// 判断是否支持HMR功能</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">module</span>.<span class="property">hot</span>) &#123;</span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&quot;./js/count.js&quot;</span>, <span class="keyword">function</span> (<span class="params">count</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result1 = <span class="title function_">count</span>(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result1);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&quot;./js/sum.js&quot;</span>, <span class="keyword">function</span> (<span class="params">sum</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result2 = <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result2);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上面这样写会很麻烦，所以实际开发我们会使用其他 loader 来解决。</span></span><br><span class="line"><span class="comment">// 比如：vue-loader, react-hot-loader</span></span><br></pre></td></tr></table></figure><h3 id="OneOf"><a href="#OneOf" class="headerlink" title="OneOf"></a><strong>OneOf</strong></h3><p>打包时每个文件都会经过所有 loader 处理，虽然因为 test 正则原因实际没有处理上，但是都要过一遍。比较慢。</p><p>使用后：就是只能匹配上一个 loader, 剩下的就不匹配了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 每个文件只能被其中一个loader配置处理</span></span><br><span class="line">                <span class="attr">oneOf</span>: [</span><br><span class="line">                     &#123;</span><br><span class="line">                        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">                      &#125;,</span><br><span class="line">                      <span class="comment">// ...        </span></span><br><span class="line">                ]            </span><br><span class="line">            &#125;        </span><br><span class="line">        ]    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Include-Exclude"><a href="#Include-Exclude" class="headerlink" title="Include/Exclude"></a><strong>Include/Exclude</strong></h3><p>开发时我们需要使用第三方的库或插件，所有文件都下载到 node_modules 中了。而这些文件是不需要编译可以直接使用的。</p><p>所以我们在对 js 文件处理时，要排除 node_modules 下面的文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">oneOf</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                        <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">                        <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含</span></span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                      &#125;,                </span><br><span class="line">                ]            </span><br><span class="line">            &#125;        </span><br><span class="line">        ]    </span><br><span class="line">    &#125;,</span><br><span class="line">     <span class="attr">plugins</span>: [</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">             <span class="comment">// 指定检查文件的根目录</span></span><br><span class="line">             <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">             <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>, <span class="comment">// 默认值</span></span><br><span class="line">         &#125;),     </span><br><span class="line">     ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a><strong>Cache</strong></h3><p>每次打包时 js 文件都要经过 Eslint 检查 和 Babel 编译，速度比较慢。</p><p>我们可以缓存之前的 Eslint 检查 和 Babel 编译结果，这样第二次打包时速度就会更快了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对 Eslint 检查 和 Babel 编译结果进行缓存。</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">oneOf</span>: [</span><br><span class="line">                     &#123;</span><br><span class="line">                         <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                         <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">                         <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含</span></span><br><span class="line">                         <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                         <span class="attr">options</span>: &#123;</span><br><span class="line">                            <span class="attr">cacheDirectory</span>: <span class="literal">true</span>, <span class="comment">// 开启babel编译缓存</span></span><br><span class="line">                            <span class="attr">cacheCompression</span>: <span class="literal">false</span>, <span class="comment">// 缓存文件不要压缩</span></span><br><span class="line">                         &#125;,</span><br><span class="line">                      &#125;,                </span><br><span class="line">                ]            </span><br><span class="line">            &#125;        </span><br><span class="line">        ]    </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">            <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>, <span class="comment">// 默认值</span></span><br><span class="line">            <span class="attr">cache</span>: <span class="literal">true</span>, <span class="comment">// 开启缓存</span></span><br><span class="line">            <span class="comment">// 缓存目录</span></span><br><span class="line">            <span class="attr">cacheLocation</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">              __dirname,</span><br><span class="line">              <span class="string">&quot;../node_modules/.cache/.eslintcache&quot;</span></span><br><span class="line">            ),</span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Thead"><a href="#Thead" class="headerlink" title="Thead"></a><strong>Thead</strong></h3><p>对 js 文件处理主要就是 eslint 、babel、Terser 三个工具，所以我们要提升它们的运行速度</p><p>多进程打包：开启电脑的多个进程同时干一件事，速度更快。</p><p>需要注意：请仅在特别耗时的操作中使用，因为每个进程启动就有大约为 600ms 左右开销。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm i thread-loader -D</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TerserPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;terser-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// cpu核数</span></span><br><span class="line"><span class="keyword">const</span> threads = os.<span class="title function_">cpus</span>().<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">oneOf</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">            <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含</span></span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;thread-loader&quot;</span>, <span class="comment">// 开启多进程</span></span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                  <span class="attr">workers</span>: threads, <span class="comment">// 数量</span></span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                  <span class="attr">cacheDirectory</span>: <span class="literal">true</span>, <span class="comment">// 开启babel编译缓存</span></span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      threads, <span class="comment">// 开启多进程</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">minimize</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">minimizer</span>: [</span><br><span class="line">      <span class="comment">// css压缩也可以写到optimization.minimizer里面，效果一样的</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">CssMinimizerPlugin</span>(),</span><br><span class="line">      <span class="comment">// 当生产模式会默认开启TerserPlugin，但是我们需要进行其他配置，就要重新写了</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">TerserPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">parallel</span>: threads <span class="comment">// 开启多进程</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="减少代码体积"><a href="#减少代码体积" class="headerlink" title="减少代码体积"></a><strong>减少代码体积</strong></h2><h3 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a><strong>Tree Shaking</strong></h3><p>开发时我们定义了一些工具函数库，或者引用第三方工具函数库或组件库。</p><p>如果没有特殊处理的话我们打包时会引入整个库，但是实际上可能我们可能只用上极小部分的功能。</p><p>这样将整个库都打包进来，体积就太大了。</p><p>Tree Shaking 是一个术语，通常用于描述移除 JavaScript 中的没有使用上的代码。</p><p>注意：它依赖 ES Module。</p><p>Webpack 已经默认开启了这个功能，无需其他配置。</p><hr><h3 id="Babel-1"><a href="#Babel-1" class="headerlink" title="Babel"></a><strong>Babel</strong></h3><p>Babel 为编译的每个文件都插入了辅助代码，使代码体积过大！</p><p>Babel 对一些公共方法使用了非常小的辅助代码，比如 _extend。默认情况下会被添加到每一个需要它的文件中。</p><p>你可以将这些辅助代码作为一个独立模块，来避免重复引入</p><p>@babel/plugin-transform-runtime: 禁用了 Babel 自动对每个文件的 runtime 注入，而是引入 @babel/plugin-transform-runtime 并且使所有辅助代码从这里引用。</p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">npm i @babel/plugin-transform-runtime -D</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">  <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含</span></span><br><span class="line">  <span class="attr">use</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;thread-loader&quot;</span>, <span class="comment">// 开启多进程</span></span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">workers</span>: threads, <span class="comment">// 数量</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">cacheDirectory</span>: <span class="literal">true</span>, <span class="comment">// 开启babel编译缓存</span></span><br><span class="line">        <span class="attr">cacheCompression</span>: <span class="literal">false</span>, <span class="comment">// 缓存文件不要压缩</span></span><br><span class="line">        <span class="attr">plugins</span>: [<span class="string">&quot;@babel/plugin-transform-runtime&quot;</span>], <span class="comment">// 减少代码体积</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><hr><h3 id="Image-Minimizer"><a href="#Image-Minimizer" class="headerlink" title="Image Minimizer"></a><strong>Image Minimizer</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">npm i image-minimizer-webpack-plugin imagemin -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无损压缩模式</span></span><br><span class="line">npm install imagemin-gifsicle imagemin-jpegtran imagemin-optipng imagemin-svgo -D</span><br><span class="line"><span class="comment">// 有损压缩模式</span></span><br><span class="line">npm install imagemin-gifsicle imagemin-mozjpeg imagemin-pngquant imagemin-svgo -D</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ImageMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;image-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="comment">// 压缩图片</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ImageMinimizerPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">minimizer</span>: &#123;</span><br><span class="line">          <span class="attr">implementation</span>: <span class="title class_">ImageMinimizerPlugin</span>.<span class="property">imageminGenerate</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">plugins</span>: [</span><br><span class="line">              [<span class="string">&quot;gifsicle&quot;</span>, &#123; <span class="attr">interlaced</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">              [<span class="string">&quot;jpegtran&quot;</span>, &#123; <span class="attr">progressive</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">              [<span class="string">&quot;optipng&quot;</span>, &#123; <span class="attr">optimizationLevel</span>: <span class="number">5</span> &#125;],</span><br><span class="line">              [</span><br><span class="line">                <span class="string">&quot;svgo&quot;</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">plugins</span>: [</span><br><span class="line">                    <span class="string">&quot;preset-default&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;prefixIds&quot;</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">name</span>: <span class="string">&quot;sortAttrs&quot;</span>,</span><br><span class="line">                      <span class="attr">params</span>: &#123;</span><br><span class="line">                        <span class="attr">xmlnsOrder</span>: <span class="string">&quot;alphabetical&quot;</span>,</span><br><span class="line">                      &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                  ],</span><br><span class="line">                &#125;,</span><br><span class="line">              ],</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="优化代码运行性能"><a href="#优化代码运行性能" class="headerlink" title="优化代码运行性能"></a><strong>优化代码运行性能</strong></h2><h3 id="Code-Split"><a href="#Code-Split" class="headerlink" title="Code Split"></a><strong>Code Split</strong></h3><h4 id="1-多入口"><a href="#1-多入口" class="headerlink" title="1.多入口"></a><strong>1.多入口</strong></h4><p>代码分割（Code Split）主要做了两件事：</p><ol><li>分割文件：将打包生成的文件进行分割，生成多个 js 文件。</li><li>按需加载：需要哪个文件就加载哪个文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm i webpack webpack-cli html-webpack-plugin -D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 单入口</span></span><br><span class="line">  <span class="comment">// entry: &#x27;./src/main.js&#x27;,</span></span><br><span class="line">  <span class="comment">// 多入口</span></span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">main</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    <span class="attr">app</span>: <span class="string">&quot;./src/app.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">    <span class="comment">// [name]是webpack命名规则，使用chunk的name作为输出的文件名。</span></span><br><span class="line">    <span class="comment">// 什么是chunk？打包的资源就是chunk，输出出去叫bundle。</span></span><br><span class="line">    <span class="comment">// chunk的name是啥呢？ 比如： entry中xxx: &quot;./src/xxx.js&quot;, name就是xxx。注意是前面的xxx，和文件名无关。</span></span><br><span class="line">    <span class="comment">// 为什么需要这样命名呢？如果还是之前写法main.js，那么打包生成两个js文件都会叫做main.js会发生覆盖。(实际上会直接报错的)</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/[name].js&quot;</span>,</span><br><span class="line">    <span class="attr">clear</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h4 id="2-提取重复代码"><a href="#2-提取重复代码" class="headerlink" title="2.提取重复代码"></a><strong>2.提取重复代码</strong></h4><p>如果多入口文件中都引用了同一份代码，我们不希望这份代码被打包到两个文件中，导致代码重复，体积更大。</p><p>我们需要提取多入口的重复代码，只打包生成一个 js 文件，其他文件引用它就好。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">optimization = &#123;</span><br><span class="line"><span class="comment">// 代码分割配置</span></span><br><span class="line"><span class="attr">splitChunks</span>: &#123;</span><br><span class="line">    <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>, <span class="comment">// 对所有模块都进行分割</span></span><br><span class="line">    <span class="comment">// 以下是默认值</span></span><br><span class="line">    <span class="comment">// minSize: 20000, // 分割代码最小的大小</span></span><br><span class="line">    <span class="comment">// minRemainingSize: 0, // 类似于minSize，最后确保提取的文件大小不能为0</span></span><br><span class="line">    <span class="comment">// minChunks: 1, // 至少被引用的次数，满足条件才会代码分割</span></span><br><span class="line">    <span class="comment">// maxAsyncRequests: 30, // 按需加载时并行加载的文件的最大数量</span></span><br><span class="line">    <span class="comment">// maxInitialRequests: 30, // 入口js文件最大并行请求数量</span></span><br><span class="line">    <span class="comment">// enforceSizeThreshold: 50000, // 超过50kb一定会单独打包（此时会忽略minRemainingSize、maxAsyncRequests、maxInitialRequests）</span></span><br><span class="line">    <span class="comment">// cacheGroups: &#123; // 组，哪些模块要打包到一个组</span></span><br><span class="line">    <span class="comment">//   defaultVendors: &#123; // 组名</span></span><br><span class="line">    <span class="comment">//     test: /[\\/]node_modules[\\/]/, // 需要打包到一起的模块</span></span><br><span class="line">    <span class="comment">//     priority: -10, // 权重（越大越高）</span></span><br><span class="line">    <span class="comment">//     reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块</span></span><br><span class="line">    <span class="comment">//   &#125;,</span></span><br><span class="line">    <span class="comment">//   default: &#123; // 其他没有写的配置会使用上面的默认值</span></span><br><span class="line">    <span class="comment">//     minChunks: 2, // 这里的minChunks权重更大</span></span><br><span class="line">    <span class="comment">//     priority: -20,</span></span><br><span class="line">    <span class="comment">//     reuseExistingChunk: true,</span></span><br><span class="line">    <span class="comment">//   &#125;,</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// 修改配置</span></span><br><span class="line">    <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">        <span class="comment">// 组，哪些模块要打包到一个组</span></span><br><span class="line">        <span class="comment">// defaultVendors: &#123; // 组名</span></span><br><span class="line">        <span class="comment">//   test: /[\\/]node_modules[\\/]/, // 需要打包到一起的模块</span></span><br><span class="line">        <span class="comment">//   priority: -10, // 权重（越大越高）</span></span><br><span class="line">        <span class="comment">//   reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="attr">default</span>: &#123;</span><br><span class="line">            <span class="comment">// 其他没有写的配置会使用上面的默认值</span></span><br><span class="line">            <span class="attr">minSize</span>: <span class="number">0</span>, <span class="comment">// 我们定义的文件体积太小了，所以要改打包的最小文件体积</span></span><br><span class="line">            <span class="attr">minChunks</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">priority</span>: -<span class="number">20</span>,</span><br><span class="line">            <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><hr><h4 id="3-按需加载，动态导入"><a href="#3-按需加载，动态导入" class="headerlink" title="3.按需加载，动态导入"></a><strong>3.按需加载，动态导入</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 动态导入 --&gt; 实现按需加载</span></span><br><span class="line">  <span class="comment">// 即使只被引用了一次，也会代码分割</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&quot;./math.js&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; sum &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 通过 import 动态导入语法导入模块，模块就被代码分割，同时也能按需加载了</span></span><br></pre></td></tr></table></figure><h4 id="单入口"><a href="#单入口" class="headerlink" title="单入口"></a><strong>单入口</strong></h4><p>开发时我们可能是单页面应用（SPA），只有一个入口（单入口）。那么我们需要这样配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 单入口</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="comment">// 多入口</span></span><br><span class="line">  <span class="comment">// entry: &#123;</span></span><br><span class="line">  <span class="comment">//   main: &quot;./src/main.js&quot;,</span></span><br><span class="line">  <span class="comment">//   app: &quot;./src/app.js&quot;,</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">    <span class="comment">// [name]是webpack命名规则，使用chunk的name作为输出的文件名。</span></span><br><span class="line">    <span class="comment">// 什么是chunk？打包的资源就是chunk，输出出去叫bundle。</span></span><br><span class="line">    <span class="comment">// chunk的name是啥呢？ 比如： entry中xxx: &quot;./src/xxx.js&quot;, name就是xxx。注意是前面的xxx，和文件名无关。</span></span><br><span class="line">    <span class="comment">// 为什么需要这样命名呢？如果还是之前写法main.js，那么打包生成两个js文件都会叫做main.js会发生覆盖。(实际上会直接报错的)</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/[name].js&quot;</span>,</span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="comment">// 代码分割配置</span></span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>, <span class="comment">// 对所有模块都进行分割</span></span><br><span class="line">      <span class="comment">// 以下是默认值</span></span><br><span class="line">      <span class="comment">// minSize: 20000, // 分割代码最小的大小</span></span><br><span class="line">      <span class="comment">// minRemainingSize: 0, // 类似于minSize，最后确保提取的文件大小不能为0</span></span><br><span class="line">      <span class="comment">// minChunks: 1, // 至少被引用的次数，满足条件才会代码分割</span></span><br><span class="line">      <span class="comment">// maxAsyncRequests: 30, // 按需加载时并行加载的文件的最大数量</span></span><br><span class="line">      <span class="comment">// maxInitialRequests: 30, // 入口js文件最大并行请求数量</span></span><br><span class="line">      <span class="comment">// enforceSizeThreshold: 50000, // 超过50kb一定会单独打包（此时会忽略minRemainingSize、maxAsyncRequests、maxInitialRequests）</span></span><br><span class="line">      <span class="comment">// cacheGroups: &#123; // 组，哪些模块要打包到一个组</span></span><br><span class="line">      <span class="comment">//   defaultVendors: &#123; // 组名</span></span><br><span class="line">      <span class="comment">//     test: /[\\/]node_modules[\\/]/, // 需要打包到一起的模块</span></span><br><span class="line">      <span class="comment">//     priority: -10, // 权重（越大越高）</span></span><br><span class="line">      <span class="comment">//     reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块</span></span><br><span class="line">      <span class="comment">//   &#125;,</span></span><br><span class="line">      <span class="comment">//   default: &#123; // 其他没有写的配置会使用上面的默认值</span></span><br><span class="line">      <span class="comment">//     minChunks: 2, // 这里的minChunks权重更大</span></span><br><span class="line">      <span class="comment">//     priority: -20,</span></span><br><span class="line">      <span class="comment">//     reuseExistingChunk: true,</span></span><br><span class="line">      <span class="comment">//   &#125;,</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意这里就不需要 default 配置，单文件引入 minChunks 不可能大于 1</span></span><br></pre></td></tr></table></figure><hr><h4 id="给动态导入文件取名称"><a href="#给动态导入文件取名称" class="headerlink" title="给动态导入文件取名称"></a><strong>给动态导入文件取名称</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">onClick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// eslint会对动态导入语法报错，需要修改eslint配置文件</span></span><br><span class="line">  <span class="comment">// webpackChunkName: &quot;math&quot;：这是webpack动态导入模块命名的方式</span></span><br><span class="line">  <span class="comment">// &quot;math&quot;将来就会作为[name]的值显示。</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;math&quot; */</span> <span class="string">&quot;./js/math.js&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; count &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>eslint 配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm i eslint-plugin-import -D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line"><span class="comment">// 解决动态导入import语法报错问题 --&gt; 实际使用eslint-plugin-import的规则解决的</span></span><br><span class="line"><span class="attr">plugins</span>: [<span class="string">&quot;import&quot;</span>], </span><br></pre></td></tr></table></figure><hr><h4 id="统一命名配置"><a href="#统一命名配置" class="headerlink" title="统一命名配置"></a><strong>统一命名配置</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;static/js/[name].js&quot;</span>, <span class="comment">// 入口文件打包输出资源命名方式</span></span><br><span class="line">        <span class="attr">chunkFilename</span>: <span class="string">&quot;static/js/[name].chunk.js&quot;</span>, <span class="comment">// 动态导入输出资源命名方式</span></span><br><span class="line">        <span class="comment">// 图片、字体等资源命名方式（注意用hash）（下面的命名就可以去掉了）</span></span><br><span class="line">        <span class="attr">assetModuleFilename</span>: <span class="string">&quot;static/media/[name].[hash][ext]&quot;</span>,     </span><br><span class="line">    &#125;,</span><br><span class="line">     <span class="attr">module</span>: &#123;</span><br><span class="line">         <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">oneOf</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|svg)$/</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                        <span class="attr">parser</span>: &#123;</span><br><span class="line">                          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">                            <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">                          &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="comment">// generator: &#123;</span></span><br><span class="line">                        <span class="comment">//   // 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                        <span class="comment">//   // 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                        <span class="comment">//   // [hash:8]: hash值取8位</span></span><br><span class="line">                        <span class="comment">//   // [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                        <span class="comment">//   // [query]: 添加之前的query参数</span></span><br><span class="line">                        <span class="comment">//   filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span></span><br><span class="line">                        <span class="comment">// &#125;,</span></span><br><span class="line">                      &#125;, </span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                          <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">                          <span class="comment">// generator: &#123;</span></span><br><span class="line">                          <span class="comment">//   filename: &quot;static/media/[hash:8][ext][query]&quot;,</span></span><br><span class="line">                          <span class="comment">// &#125;,</span></span><br><span class="line">                      &#125;,               </span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">          <span class="comment">// 定义输出文件名和目录</span></span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;static/css/[name].css&quot;</span>,</span><br><span class="line">          <span class="attr">chunkFilename</span>: <span class="string">&quot;static/css/[name].chunk.css&quot;</span>,</span><br><span class="line">        &#125;),    </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Preload-Prefetch"><a href="#Preload-Prefetch" class="headerlink" title="Preload / Prefetch"></a><strong>Preload / Prefetch</strong></h3><p>我们前面已经做了代码分割，同时会使用 import 动态导入语法来进行代码按需加载（我们也叫懒加载，比如路由懒加载就是这样实现的）。</p><p>但是加载速度还不够好，比如：是用户点击按钮时才加载这个资源的，如果资源体积很大，那么用户会感觉到明显卡顿效果。</p><p>我们想在浏览器空闲时间，加载后续需要使用的资源。我们就需要用上 Preload 或 Prefetch 技术。</p><p>Preload：告诉浏览器立即加载资源。</p><p>Prefetch：告诉浏览器在空闲时才开始加载资源</p><p>它们共同点：</p><p>都只会加载资源，并不执行。</p><p>都有缓存。</p><p>它们区别：</p><p>Preload加载优先级高，Prefetch加载优先级低。</p><p>Preload只能加载当前页面需要使用的资源，Prefetch可以加载当前页面资源，也可以加载下一个页面需要使用的资源。</p><p>总结：</p><p>当前页面优先级高的资源用 Preload 加载。</p><p>下一个页面需要使用的资源用 Prefetch 加载。</p><p>它们的问题：兼容性较差。</p><p>Preload 相对于 Prefetch 兼容性好一点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm i @vue/preload-webpack-plugin -D</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PreloadWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;@vue/preload-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">PreloadWebpackPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">rel</span>: <span class="string">&quot;preload&quot;</span>, <span class="comment">// preload兼容性更好</span></span><br><span class="line">    <span class="attr">as</span>: <span class="string">&quot;script&quot;</span>,</span><br><span class="line">    <span class="comment">// rel: &#x27;prefetch&#x27; // prefetch兼容性更差 （prefetch 没有 as 属性 无需设置）</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><hr><h3 id="Network-Cache"><a href="#Network-Cache" class="headerlink" title="Network Cache"></a><strong>Network Cache</strong></h3><p>更新前：math.xxx.js, main.js 引用的 math.xxx.js</p><p>更新后：math.yyy.js, main.js 引用的 math.yyy.js, 文件名发生了变化，间接导致 main.js 也发生了变化</p><p>runtime 文件只保存文件的 hash 值和它们与文件关系，整个文件体积就比较小，所以变化重新请求的代价也小</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">runtimeChunk</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="function">(<span class="params">entrypoint</span>) =&gt;</span> <span class="string">`runtime~<span class="subst">$&#123;entrypoint.name&#125;</span>.js`</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Core-js"><a href="#Core-js" class="headerlink" title="Core-js"></a><strong>Core-js</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm i @babel/eslint-parser -D</span></span><br><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line"><span class="attr">parser</span>: <span class="string">&quot;@babel/eslint-parser&quot;</span>, <span class="comment">// 支持最新的最终 ECMAScript 标准</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// npm i core-js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js </span></span><br><span class="line"><span class="comment">// 手动全部引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;core-js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动按需引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;core-js/es/promise&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动按需引入</span></span><br><span class="line"><span class="comment">// babel.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 智能预设：能够编译ES6语法</span></span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">      <span class="comment">// 按需加载core-js的polyfill</span></span><br><span class="line">      &#123; <span class="attr">useBuiltIns</span>: <span class="string">&quot;usage&quot;</span>, <span class="attr">corejs</span>: &#123; <span class="attr">version</span>: <span class="string">&quot;3&quot;</span>, <span class="attr">proposals</span>: <span class="literal">true</span> &#125; &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a><strong>PWA</strong></h3><p>开发 Web App 项目，项目一旦处于网络离线情况，就没法访问了。</p><p>渐进式网络应用程序(progressive web application - PWA)：是一种可以提供类似于 native app(原生应用程序) 体验的 Web App 的技术。</p><p>其中最重要的是，在 离线(offline) 时应用程序能够继续运行功能。</p><p>内部通过 Service Workers 技术实现的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm i workbox-webpack-plugin -D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WorkboxPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;workbox-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">WorkboxPlugin</span>.<span class="title class_">GenerateSW</span>(&#123;</span><br><span class="line">    <span class="comment">// 这些选项帮助快速启用 ServiceWorkers</span></span><br><span class="line">    <span class="comment">// 不允许遗留任何“旧的” ServiceWorkers</span></span><br><span class="line">    <span class="attr">clientsClaim</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">skipWaiting</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js 使用</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;serviceWorker&quot;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    navigator.<span class="property">serviceWorker</span></span><br><span class="line">      .<span class="title function_">register</span>(<span class="string">&quot;/service-worker.js&quot;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">registration</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;SW registered: &quot;</span>, registration);</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">registrationError</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;SW registration failed: &quot;</span>, registrationError);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts后台项目实战</title>
      <link href="/2023/10/05/ts%E5%90%8E%E5%8F%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
      <url>/2023/10/05/ts%E5%90%8E%E5%8F%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记录学习 TS 后台项目的知识</p><hr><h1 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a><strong>项目构建</strong></h1><h2 id="vite-构建"><a href="#vite-构建" class="headerlink" title="vite 构建"></a><strong>vite 构建</strong></h2><h3 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a><strong>搭建项目</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建项目</span></span><br><span class="line">pnpm create vite@latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择如下</span></span><br><span class="line">√ Project name: ... vite-template</span><br><span class="line">√ Select a framework: » Vue</span><br><span class="line">√ Select a variant: » TypeScript</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖</span></span><br><span class="line">cd vite-template</span><br><span class="line">pnpm i</span><br></pre></td></tr></table></figure><hr><h3 id="EditorConfig"><a href="#EditorConfig" class="headerlink" title="EditorConfig"></a>EditorConfig</h3><p>在项目根目录下增加.editorconfig文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 编辑器配置文件 参考 http://editorconfig.org</span><br><span class="line"></span><br><span class="line">root = true # 表⽰是最顶层的配置⽂件，发现设为true时，才会停⽌查找.editorconfig⽂件</span><br><span class="line"></span><br><span class="line">[*] # 表示所有文件适用</span><br><span class="line">charset = utf-8 # 设置文件字符集为 utf-8</span><br><span class="line">indent_style = space # 缩进风格（tab | space）</span><br><span class="line">indent_size = 2 # 缩进大小</span><br><span class="line">end_of_line = lf # 控制换行类型(lf | cr | crlf)</span><br><span class="line">trim_trailing_whitespace = true # 去除行尾的任意空白字符</span><br><span class="line"># 先关闭防止与vscode的自动保存时冲突，在文件中最后一行写代码时未写完会自动保存跳到下一行</span><br><span class="line">insert_final_newline = false # 始终在文件末尾插入一个新行</span><br><span class="line"></span><br><span class="line">[*.md] # 表示仅 md 文件适用以下规则</span><br><span class="line">max_line_length = off # 最大行宽 填写number数值</span><br><span class="line">trim_trailing_whitespace = false</span><br></pre></td></tr></table></figure><hr><h3 id="安装-prettier"><a href="#安装-prettier" class="headerlink" title="安装 prettier"></a><strong>安装 prettier</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 安装 prettier</span><br><span class="line">pnpm add prettier -D</span><br><span class="line"># 根目录新建配置文件</span><br><span class="line">#.prettierrc.cjs</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // 一行的字符数，如果超过会进行换行，默认为80</span><br><span class="line">  printWidth: 80,</span><br><span class="line">  // 一个tab代表几个空格数，默认为80</span><br><span class="line">  tabWidth: 2,</span><br><span class="line">  // 是否使用tab进行缩进，默认为false，表示用空格进行缩减</span><br><span class="line">  useTabs: false,</span><br><span class="line">  // 字符串是否使用单引号，默认为false，使用双引号</span><br><span class="line">  singleQuote: true,</span><br><span class="line">  // 行位是否使用分号，默认为true</span><br><span class="line">  semi: false,</span><br><span class="line">  // 是否使用尾逗号，有三个可选值&quot;&lt;none|es5|all&gt;&quot;</span><br><span class="line">  trailingComma: &#x27;none&#x27;,</span><br><span class="line">  // 对象大括号直接是否有空格，默认为true，效果：&#123; foo: bar &#125;</span><br><span class="line">  bracketSpacing: true,</span><br><span class="line">  // Delete `␍`eslintprettier/prettier（LF与CRLF报错）</span><br><span class="line">  endOfLine: &#x27;auto&#x27;</span><br><span class="line">&#125;</span><br><span class="line"># 根目录新建忽略文件</span><br><span class="line">.prettierignore</span><br><span class="line"># package.json 添加脚本</span><br><span class="line">&quot;format&quot;: &quot;prettier --write \&quot;./**/*.&#123;html,vue,ts,js,json,md,scss,jsx,tsx,cjs,mjs&#125;\&quot;&quot;</span><br></pre></td></tr></table></figure><hr><h3 id="安装-eslint"><a href="#安装-eslint" class="headerlink" title="安装 eslint"></a><strong>安装 eslint</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 eslint</span></span><br><span class="line">pnpm add eslint -D</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化 eslint</span></span><br><span class="line">pnpm eslint --init 或者 npx eslint --init</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择如下图</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新增依赖</span></span><br><span class="line">devDependencies:</span><br><span class="line">+ @typescript-eslint/eslint-plugin 6.7.0</span><br><span class="line">+ @typescript-eslint/parser&quot;: &quot;^6.7.0&quot;</span><br><span class="line"></span><br><span class="line">+ eslint-plugin-vue 9.17.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">package.json 添加脚本</span></span><br><span class="line">&quot;lint:style&quot;: &quot;stylelint \&quot;./**/*.&#123;css,scss,vue,html&#125;\&quot; --fix&quot;</span><br></pre></td></tr></table></figure><hr><p><img src="https://pic.imgdb.cn/item/651eb532c458853aef481839.png"></p><hr><h3 id="解决-Prettier-和-ESLint-的冲突"><a href="#解决-Prettier-和-ESLint-的冲突" class="headerlink" title="解决 Prettier 和 ESLint 的冲突"></a><strong>解决 Prettier 和 ESLint 的冲突</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">eslint-plugin-prettier 将 Prettier 的规则设置到 ESLint 的规则中。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">eslint-config-prettier 关闭 ESLint 中与 Prettier 中会发生冲突的规则。</span></span><br><span class="line">pnpm add eslint-plugin-prettier eslint-config-prettier -D</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">eslintrc.cjs 里面的 extends 添加 <span class="string">&#x27;plugin:prettier/recommended&#x27;</span></span> </span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">es2021</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;eslint:recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:vue/vue3-essential&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:prettier/recommended&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">overrides</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">env</span>: &#123;</span><br><span class="line">        <span class="attr">node</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">files</span>: [<span class="string">&#x27;.eslintrc.&#123;js,cjs&#125;&#x27;</span>],</span><br><span class="line">      <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">        <span class="attr">sourceType</span>: <span class="string">&#x27;script&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="string">&#x27;latest&#x27;</span>,</span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;@typescript-eslint&#x27;</span>, <span class="string">&#x27;vue&#x27;</span>],</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &quot;off&quot; 或 0    ==&gt;  关闭规则</span></span><br><span class="line"><span class="comment">   * &quot;warn&quot; 或 1   ==&gt;  打开的规则作为警告（不影响代码执行）</span></span><br><span class="line"><span class="comment">   * &quot;error&quot; 或 2  ==&gt;  规则作为一个错误（代码不能执行，界面报错）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="comment">// vue (https://eslint.vuejs.org/rules)</span></span><br><span class="line">    <span class="string">&#x27;vue/multi-word-component-names&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 关闭组件命名规则</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// typeScript (https://typescript-eslint.io/rules)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// eslint (http://eslint.cn/docs/rules)</span></span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: <span class="string">&#x27;warn&#x27;</span> <span class="comment">// console 警告</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="安装-stylelint"><a href="#安装-stylelint" class="headerlink" title="安装 stylelint"></a><strong>安装 stylelint</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># 安装包</span><br><span class="line">pnpm install stylelint stylelint-config-html stylelint-config-recommended-scss stylelint-config-recommended-vue stylelint-config-standard stylelint-config-standard-scss stylelint-config-recess-order postcss postcss-html -D</span><br><span class="line"># 注：stylelint-config-prettier 仓库已经废弃了，stylelint <span class="variable constant_">V15</span>自带了相关功能</span><br><span class="line"># .<span class="property">stylelintrc</span>.<span class="property">cjs</span> 配置</span><br><span class="line"><span class="comment">// @see: https://stylelint.io</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 继承某些已有的规则</span></span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&quot;stylelint-config-standard&quot;</span>, <span class="comment">// 配置 stylelint 拓展插件</span></span><br><span class="line">    <span class="string">&quot;stylelint-config-html/vue&quot;</span>, <span class="comment">// 配置 vue 中 template 样式格式化</span></span><br><span class="line">    <span class="string">&quot;stylelint-config-standard-scss&quot;</span>, <span class="comment">// 配置 stylelint scss 插件</span></span><br><span class="line">    <span class="string">&quot;stylelint-config-recommended-vue/scss&quot;</span>, <span class="comment">// 配置 vue 中 scss 样式格式化</span></span><br><span class="line">    <span class="string">&quot;stylelint-config-recess-order&quot;</span> <span class="comment">// 配置 stylelint css 属性书写顺序插件,</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">overrides</span>: [</span><br><span class="line">    <span class="comment">// 扫描 .vue/html 文件中的 &lt;style&gt; 标签内的样式</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">files</span>: [<span class="string">&quot;**/*.&#123;vue,html&#125;&quot;</span>],</span><br><span class="line">      <span class="attr">customSyntax</span>: <span class="string">&quot;postcss-html&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&quot;function-url-quotes&quot;</span>: <span class="string">&quot;always&quot;</span>, <span class="comment">// URL 的引号 &quot;always(必须加上引号)&quot;|&quot;never(没有引号)&quot;</span></span><br><span class="line">    <span class="string">&quot;color-hex-length&quot;</span>: <span class="string">&quot;long&quot;</span>, <span class="comment">// 指定 16 进制颜色的简写或扩写 &quot;short(16进制简写)&quot;|&quot;long(16进制扩写)&quot;</span></span><br><span class="line">    <span class="string">&quot;rule-empty-line-before&quot;</span>: <span class="string">&quot;never&quot;</span>, <span class="comment">// 要求或禁止在规则之前的空行 &quot;always(规则之前必须始终有一个空行)&quot;|&quot;never(规则前绝不能有空行)&quot;|&quot;always-multi-line(多行规则之前必须始终有一个空行)&quot;|&quot;never-multi-line(多行规则之前绝不能有空行)&quot;</span></span><br><span class="line">    <span class="string">&quot;font-family-no-missing-generic-family-keyword&quot;</span>: <span class="literal">null</span>, <span class="comment">// 禁止在字体族名称列表中缺少通用字体族关键字</span></span><br><span class="line">    <span class="string">&quot;scss/at-import-partial-extension&quot;</span>: <span class="literal">null</span>, <span class="comment">// 解决不能使用 @import 引入 scss 文件</span></span><br><span class="line">    <span class="string">&quot;property-no-unknown&quot;</span>: <span class="literal">null</span>, <span class="comment">// 禁止未知的属性</span></span><br><span class="line">    <span class="string">&quot;no-empty-source&quot;</span>: <span class="literal">null</span>, <span class="comment">// 禁止空源码</span></span><br><span class="line">    <span class="string">&quot;selector-class-pattern&quot;</span>: <span class="literal">null</span>, <span class="comment">// 强制选择器类名的格式</span></span><br><span class="line">    <span class="string">&quot;value-no-vendor-prefix&quot;</span>: <span class="literal">null</span>, <span class="comment">// 关闭 vendor-prefix (为了解决多行省略 -webkit-box)</span></span><br><span class="line">    <span class="string">&quot;no-descending-specificity&quot;</span>: <span class="literal">null</span>, <span class="comment">// 不允许较低特异性的选择器出现在覆盖较高特异性的选择器</span></span><br><span class="line">    <span class="string">&quot;value-keyword-case&quot;</span>: <span class="literal">null</span>, <span class="comment">// 解决在 scss 中使用 v-bind 大写单词报错</span></span><br><span class="line">    <span class="string">&quot;selector-pseudo-class-no-unknown&quot;</span>: [</span><br><span class="line">      <span class="literal">true</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">ignorePseudoClasses</span>: [<span class="string">&quot;global&quot;</span>, <span class="string">&quot;v-deep&quot;</span>, <span class="string">&quot;deep&quot;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">ignoreFiles</span>: [<span class="string">&quot;**/*.js&quot;</span>, <span class="string">&quot;**/*.jsx&quot;</span>, <span class="string">&quot;**/*.tsx&quot;</span>, <span class="string">&quot;**/*.ts&quot;</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><table><thead><tr><th>依赖</th><th>作用描述</th></tr></thead><tbody><tr><td>stylelint</td><td>stylelint 核心库</td></tr><tr><td>stylelint-config-html</td><td>Stylelint 的可共享 HTML（和类似 HTML）配置，捆绑 postcss-html 并对其进行配置。</td></tr><tr><td>stylelint-config-recommended-scss</td><td>扩展 stylelint-config-recommended 共享配置，并为 SCSS 配置其规则</td></tr><tr><td>stylelint-config-recommended-vue</td><td>扩展 stylelint-config-recommended 共享配置，并为 Vue 配置其规则</td></tr><tr><td>stylelint-config-standard</td><td>打开额外的规则来执行在规范和一些 CSS 样式指南中发现的通用约定，包括：惯用 CSS 原则，谷歌的 CSS 样式指南，Airbnb 的样式指南，和 @mdo 的代码指南。</td></tr><tr><td>stylelint-config-standard-scss</td><td>扩展 stylelint-config-standard 共享配置，并为 SCSS 配置其规则</td></tr><tr><td>stylelint-config-recess-order</td><td>属性的排序（插件包）</td></tr><tr><td>postcss</td><td>postcss-html 的依赖包</td></tr><tr><td>postcss-html</td><td>用于解析 HTML（和类似 HTML）的 PostCSS 语法</td></tr></tbody></table><hr><h3 id="安装-commitizen-cz-customizable"><a href="#安装-commitizen-cz-customizable" class="headerlink" title="安装 commitizen cz-customizable"></a><strong>安装 commitizen cz-customizable</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"># 安装依赖</span><br><span class="line">pnpm add commitizen cz-customizable -D</span><br><span class="line"># package.<span class="property">json</span> 脚本添加</span><br><span class="line"><span class="string">&quot;git&quot;</span>: <span class="string">&quot;git add . &amp;&amp; git cz&quot;</span>,</span><br><span class="line"># package.<span class="property">json</span> 脚本添加如下节点</span><br><span class="line"><span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;commitizen&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;node_modules/cz-customizable&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;cz-customizable&quot;</span>: &#123;</span><br><span class="line">     <span class="string">&quot;config&quot;</span>: <span class="string">&quot;.cz-config.cjs&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 根目录新建 .<span class="property">cz</span>-config.<span class="property">cjs</span></span><br><span class="line"><span class="comment">// 提交代码：使用 pnpm git 命令</span></span><br><span class="line"><span class="comment">// 相关配置：https://github.com/leoforfree/cz-customizable</span></span><br><span class="line"><span class="comment">// 图标地址：https://gitmoji.dev/</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">types</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;✨feat&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;✨ feat（新功能）&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;:bug: fix&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;🐛 fix（Bug 修复）&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;📝docs&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;📝 docs（文档更新）&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;💄style&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;💄 style（代码样式更改，例如空格、格式、缺少分号等）&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;💡refactor&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;💡 refactor（重构代码）&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;⚡️perf&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;⚡️ perf（性能优化）&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;✅test&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;✅ test（添加缺失或修正测试代码）&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;🔨chore&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;🔨 chore（构建相关的代码或工具库，如文档生成等）&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;⏪️revert&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;⏪️ revert（回退）&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;🎉ui&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;🎉 ui（更新UI）&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">scopes</span>: [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;components&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;views&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;utils&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;styles&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;store&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;router&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;hooks&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;layout&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;mock&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;assets&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;other&#x27;</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">messages</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;请选择提交类型：（必填）&#x27;</span>,</span><br><span class="line">    <span class="attr">scope</span>: <span class="string">&#x27;选择一个 scope：（可选）&#x27;</span>,</span><br><span class="line">    <span class="attr">customScope</span>: <span class="string">&#x27;请输入影响范围：（可选）&#x27;</span>,</span><br><span class="line">    <span class="attr">subject</span>: <span class="string">&#x27;请输入简要描述：（必填）&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="string">&#x27;请输入详细描述，使用 &quot;|&quot; 分行：（可选）&#x27;</span>,</span><br><span class="line">    <span class="attr">breaking</span>: <span class="string">&#x27;请列出所有的破坏性变更，例如：描述、理由或迁移方式等：（可选）&#x27;</span>,</span><br><span class="line">    <span class="attr">footer</span>: <span class="string">&#x27;请列出需关闭的 issue，例如：#31, #34：（可选）&#x27;</span>,</span><br><span class="line">    <span class="attr">confirmCommit</span>: <span class="string">&#x27;请确认此提交信息？&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">subjectLimit</span>: <span class="number">100</span>, <span class="comment">// subject文字长度默认</span></span><br><span class="line">  <span class="attr">allowCustomScopes</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">allowBreakingChanges</span>: [<span class="string">&#x27;:sparkles: feat&#x27;</span>, <span class="string">&#x27;:bug: fix&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="安装-husky"><a href="#安装-husky" class="headerlink" title="安装 husky"></a><strong>安装 husky</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">pnpm add husky -D</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">package.json 脚本添加</span></span><br><span class="line">&quot;prepare&quot;: &quot;husky install&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行命令创建 .husky 文件夹</span></span><br><span class="line">pnpm install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：在项目 pnpm i 时候必须要有 git 仓库</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git 仓库被删除了，要重新 pnpm i 后 husky 才会生效</span></span><br></pre></td></tr></table></figure><hr><h3 id="安装-lint-staged"><a href="#安装-lint-staged" class="headerlink" title="安装 lint-staged"></a><strong>安装 lint-staged</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">pnpm add lint-staged -D</span><br><span class="line"># package.<span class="property">json</span> 脚本添加</span><br><span class="line"><span class="string">&quot;lint-staged&quot;</span>: <span class="string">&quot;lint-staged&quot;</span></span><br><span class="line"># 根目录新建 .<span class="property">lintstagedrc</span>.<span class="property">json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;*.&#123;ts,tsx,js,jsx,cjs,mjs&#125;&quot;</span>: [<span class="string">&quot;prettier --write&quot;</span>, <span class="string">&quot;eslint --fix&quot;</span>],</span><br><span class="line">  <span class="string">&quot;*.vue&quot;</span>: [<span class="string">&quot;eslint --fix&quot;</span>, <span class="string">&quot;prettier --write&quot;</span>, <span class="string">&quot;stylelint --fix&quot;</span>],</span><br><span class="line">  <span class="string">&quot;*.&#123;scss,less,styl,html&#125;&quot;</span>: [<span class="string">&quot;stylelint --fix&quot;</span>, <span class="string">&quot;prettier --write&quot;</span>],</span><br><span class="line">  <span class="string">&quot;*.&#123;md,json&#125;&quot;</span>: [<span class="string">&quot;prettier --write&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"># 添加到 husky 钩子中</span><br><span class="line">pnpm husky add .<span class="property">husky</span>/pre-commit <span class="string">&quot;pnpm lint-staged&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="安装-commitlint"><a href="#安装-commitlint" class="headerlink" title="安装 commitlint"></a><strong>安装 commitlint</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">pnpm add @commitlint/cli commitlint-config-cz -D</span><br><span class="line"># 根目录新建 commitlint.<span class="property">config</span>.<span class="property">cjs</span></span><br><span class="line"><span class="comment">// 直接使用 commitlint-config-cz 配置</span></span><br><span class="line"><span class="comment">// 注意但是在 .cz-config.js 中 types里面的 value 图标和文字必须不能加空格</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;cz&#x27;</span>],</span><br><span class="line">  <span class="attr">parserPreset</span>: &#123;</span><br><span class="line">    <span class="attr">parserOpts</span>: &#123;</span><br><span class="line">      <span class="attr">headerPattern</span>: <span class="regexp">/^(.*?)(?:\((.*)\))?:?\s(.*)$/</span>,</span><br><span class="line">      <span class="attr">headerCorrespondence</span>: [<span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;scope&#x27;</span>, <span class="string">&#x27;subject&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;type-empty&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;subject-empty&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 添加到 husky 钩子中</span><br><span class="line">npx husky add .<span class="property">husky</span>/commit-msg <span class="string">&quot;npx --no-install commitlint --edit $1&quot;</span></span><br></pre></td></tr></table></figure><p>注：commit 开头添加表情，其他方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">pnpm add commitlint-config-git-commit-emoji -D</span><br><span class="line">// 使用 commitlint-config-git-commit-emoji 支持图标 types 里面的 value 图标和文字必须加空格隔开</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  extends: [&#x27;git-commit-emoji&#x27;, &#x27;cz&#x27;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="create-vue-构建"><a href="#create-vue-构建" class="headerlink" title="create-vue 构建"></a><strong>create-vue 构建</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">pnpm create vue@latest</span><br></pre></td></tr></table></figure><p>项目安装时，选择对应需要的工具，可以自动集成相关依赖（如：eslint、prettier）</p><p>只需参考上面的后面安装即可。</p><hr><h1 id="项目集成"><a href="#项目集成" class="headerlink" title="项目集成"></a><strong>项目集成</strong></h1><h2 id="node-声明文件"><a href="#node-声明文件" class="headerlink" title="node 声明文件"></a><strong>node 声明文件</strong></h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node 声明文件</span></span><br><span class="line">pnpm add <span class="meta">@types</span>/node -D</span><br><span class="line"><span class="comment">// 配置别名 vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath, <span class="variable constant_">URL</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;node:url&#x27;</span></span><br><span class="line"><span class="attr">resolve</span>: &#123;</span><br><span class="line">  <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./src&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// tsconfig.json 配置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@/*&quot;</span>: [<span class="string">&quot;./src/*&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="jsx、tsx"><a href="#jsx、tsx" class="headerlink" title="jsx、tsx"></a><strong>jsx、tsx</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pnpm add @vitejs/plugin-vue-jsx -D</span><br><span class="line">// vite.config.ts</span><br><span class="line">import vueJsx from &#x27;@vitejs/plugin-vue-jsx&#x27;</span><br><span class="line">plugins: [vueJsx()]</span><br></pre></td></tr></table></figure><hr><h2 id="pinia、router"><a href="#pinia、router" class="headerlink" title="pinia、router"></a><strong>pinia、router</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnmp add pinia vue-router</span><br></pre></td></tr></table></figure><hr><h2 id="其他集成"><a href="#其他集成" class="headerlink" title="其他集成"></a><strong>其他集成</strong></h2><p>以下插件为非必要安装的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mitt 事件总线</span></span><br><span class="line">pnpm add mitt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pinia 持久化插件</span></span><br><span class="line">pnpm add pinia-plugin-persistedstate</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">svg 图标</span></span><br><span class="line">pnpm add vite-plugin-svg-icons -D</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">svgo 优化 svg 文件大小</span></span><br><span class="line">pnpm add svgo -D</span><br><span class="line">&quot;svgo&quot;: &quot;svgo -f src/assets/icons&quot; # package.json 脚本</span><br><span class="line">&quot;src/assets/icons/*.svg&quot;: [&quot;svgo&quot;] # .lintstagedrc.json 添加</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自动引入 unplugin-auto-import</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自动注册 unplugin-vue-components</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gzip 插件 vite-plugin-compression</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mock 插件 vite-plugin-mock</span></span><br></pre></td></tr></table></figure><hr><h1 id="element-plus-引入在-TypeScript5-0-下的报错"><a href="#element-plus-引入在-TypeScript5-0-下的报错" class="headerlink" title="element-plus 引入在 TypeScript5.0 下的报错"></a><strong>element-plus 引入在 TypeScript5.0 下的报错</strong></h1><p>参考：<a href="https://juejin.cn/post/7232114747348205605">掘金</a> <a href="https://github.com/element-plus/element-plus/issues/11818">issues</a></p><p>使用 element-plus 组件属性提示</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 如果使用 Bundler 无法找到对应的 element-plus/global，组件上要没有提示，需要使用 Node</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;vite/client&quot;</span><span class="punctuation">,</span> <span class="string">&quot;element-plus/global&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 前端知识记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue-admin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识记录4</title>
      <link href="/2023/10/05/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%954/"/>
      <url>/2023/10/05/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%954/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记录平时遇到的技术问题和学习到的新知识</p><hr><h1 id="vue3-的-useAttrs-使用"><a href="#vue3-的-useAttrs-使用" class="headerlink" title="vue3 的 useAttrs 使用"></a><strong>vue3 的 useAttrs 使用</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// Grandpa.vue</span><br><span class="line">&lt;father text=&quot;文本&quot; @handle=&quot;handle&quot;/&gt;</span><br><span class="line">const handle = () =&gt; &#123; console.log(&#x27;Grandpa&#x27;) &#125;</span><br><span class="line">// father.vue</span><br><span class="line">&lt;son :=&quot;attrs&quot;&gt;</span><br><span class="line">const attrs = useAttrs() // 获取所有的未在 defineProps、defineEmits 中声明的属性与事件</span><br><span class="line">// son.vue</span><br><span class="line">&lt;div @click=&quot;handle&quot;&gt;我是son &#123;&#123; attrs.a &#125;&#125;&lt;/div&gt;</span><br><span class="line">const emit = defineEmits([&#x27;handle&#x27;])</span><br><span class="line">const handle = () =&gt; &#123;</span><br><span class="line">  emit(&#x27;handle&#x27;) // 可以直接调用 Grandpa 的方法，代替了 vue2 中的 $listeners</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 原因是在 v-bind:onHandle=&quot;handle&quot;，在 vue3 中也会被认为是一个事件，</span><br><span class="line">// 可以在 emits 里面接收 handle （注意：要去掉 on）</span><br></pre></td></tr></table></figure><hr><h1 id="scale-大屏"><a href="#scale-大屏" class="headerlink" title="scale 大屏"></a><strong>scale 大屏</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 想像一个定位在正中心的 div</span></span><br><span class="line"><span class="comment">// 在 transform-origin: 0 0 的作用</span></span><br><span class="line">div.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`scale(<span class="subst">$&#123;w&#125;</span>) translate(-50%, -50%)`</span></span><br><span class="line"><span class="comment">// 该代码就是，先缩放再位移，</span></span><br><span class="line"><span class="comment">// 每次改变窗口重新设置该属性时会覆盖原有的，transform: translate(-50%, -50%);</span></span><br><span class="line"><span class="comment">// 就相当于没有位于正中心放大，而是偏右下一点，设置为左上理解为先放大再拽回来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的就可以不用设置，因为每次都是先定位到中心再缩放</span></span><br><span class="line">div.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translate(-50%, -50%) scale(<span class="subst">$&#123;w&#125;</span>)`</span></span><br></pre></td></tr></table></figure><hr><h1 id="grid-布局"><a href="#grid-布局" class="headerlink" title="grid 布局"></a><strong>grid 布局</strong></h1><p><a href="http://ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">参考</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">// 容器属性</span><br><span class="line">1.display: grid 指定一个容器采用网格布局。display: inline-grid;</span><br><span class="line"></span><br><span class="line">2.grid-template-columns 属性定义每一列的列宽，grid-template-rows 属性定义每一行的行高</span><br><span class="line">  repeat() 简化重复的值 grid-template-columns: repeat(3, 33.33%) 或 repeat(2, 100px 20px 80px);</span><br><span class="line">  auto-fill 自动填充 grid-template-columns: repeat(auto-fill, 100px);</span><br><span class="line">  fr 比例关系 grid-template-columns: 1fr 1fr;</span><br><span class="line">  minmax() 长度范围 grid-template-columns: 1fr 1fr minmax(100px, 1fr);</span><br><span class="line">  auto 浏览器自己决定长度 grid-template-columns: 100px auto 100px;</span><br><span class="line">  网格线的名称  grid-template-columns: [c1] 100px [c2] 100px [c3] auto [c4];</span><br><span class="line">  网格线的多个名称 [fifth-line row-5]</span><br><span class="line">  </span><br><span class="line">3.grid-row-gap 属性行间距，grid-column-gap 属性列间距，</span><br><span class="line">  grid-row-gap: 20px; grid-column-gap: 20px;</span><br><span class="line">  grid-gap 简写属性 grid-gap: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;; </span><br><span class="line">  grid-gap: 20px 20px; 省略了第二个值，浏览器认为第二个值等于第一个值。</span><br><span class="line">  根据最新标准，上面三个属性名的 grid-前缀已经删除</span><br><span class="line">  </span><br><span class="line">4.grid-template-areas 属性，指定&quot;区域&quot;</span><br><span class="line">  grid-template-areas: &#x27;a b c&#x27;</span><br><span class="line">                       &#x27;d e f&#x27;</span><br><span class="line">                       &#x27;g h i&#x27;;</span><br><span class="line">  grid-template-areas: &quot;header header header&quot;</span><br><span class="line">                     &quot;main main sidebar&quot;</span><br><span class="line">                     &quot;footer footer footer&quot;;</span><br><span class="line">  如果某些区域不需要利用，则使用&quot;点&quot;（.）表示。</span><br><span class="line">  </span><br><span class="line">5.grid-auto-flow 属性，默认的放置顺序是&quot;先行后列&quot;</span><br><span class="line">  grid-auto-flow: column;</span><br><span class="line">  row dense 和 column dense 项目指定位置以后，剩下的项目怎么自动放置。</span><br><span class="line">  grid-auto-flow: row dense; 表示&quot;先行后列&quot;，并且尽可能紧密填满，尽量不出现空格。</span><br><span class="line">  </span><br><span class="line">6.justify-items 属性，align-items 属性，place-items 属性</span><br><span class="line">  单元格内容的水平位置（左中右），设置单元格内容的垂直位置（上中下）</span><br><span class="line">  justify-items: start | end | center | stretch （默认值）;</span><br><span class="line">  align-items: start | end | center | stretch （默认值）;</span><br><span class="line">  place-items: &lt;align-items&gt; &lt;justify-items&gt;; 省略第二个值，则浏览器认为与第一个值相等</span><br><span class="line">  </span><br><span class="line">7.justify-content 属性，align-content 属性，place-content 属性</span><br><span class="line">  整个内容区域在容器里面的水平位置（左中右），align-content属性是整个内容区域的垂直位置（上中下）</span><br><span class="line">  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class="line">  align-content: start | end | center | stretch | space-around | space-between | space-evenly;  </span><br><span class="line">  place-content: &lt;align-content&gt; &lt;justify-content&gt; 省略第二个值，浏览器就会假定第二个值等于第一个值</span><br><span class="line">  </span><br><span class="line">8.grid-auto-columns 属性，grid-auto-rows 属性，设置浏览器自动创建的多余网格的列宽和行高</span><br><span class="line">  grid-auto-rows: 50px; 新增的行高统一为50px</span><br><span class="line"></span><br><span class="line">9.grid-template 属性，grid 属性</span><br><span class="line"> grid-template属性是grid-template-columns、grid-template-rows和grid-template-areas这三个属性的合并简写形式。</span><br><span class="line"> grid属性是grid-template-rows、grid-template-columns、grid-template-areas、 grid-auto-rows、grid-auto-columns、grid-auto-flow这六个属性的合并简写形式。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">// 项目属性</span><br><span class="line">1.grid-column-start 属性，grid-column-end 属性，grid-row-start 属性，grid-row-end 属性</span><br><span class="line">  项目的位置是可以指定的，具体方法就是指定项目的四个边框，分别定位在哪根网格线</span><br><span class="line">  grid-column-start: 2;  grid-column-start: header-start; 指定为网格线的名字</span><br><span class="line">  grid-column-start: span 2; span关键字，表示&quot;跨越&quot;，跨越2个网格</span><br><span class="line">  </span><br><span class="line">2.简写属性，grid-column 属性，grid-row 属性</span><br><span class="line">  grid-column属性是grid-column-start和grid-column-end的合并简写形式，</span><br><span class="line">  grid-row属性是grid-row-start属性和grid-row-end的合并简写形式。</span><br><span class="line">  grid-column: 1 / 3;  grid-row: 1 / 3; grid-column: 1 / span 2;grid-row: 1 / span 2;</span><br><span class="line">  </span><br><span class="line">3.grid-area属性；指定项目放在哪一个区域。</span><br><span class="line">  grid-area: e;</span><br><span class="line">  grid-area属性还可用作grid-row-start、grid-column-start、grid-row-end、grid-column-end的合并简写形式，直接指定项目的位置。</span><br><span class="line">  grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;</span><br><span class="line">  grid-area: 1 / 1 / 3 / 3;</span><br><span class="line">  </span><br><span class="line">4.justify-self 属性，align-self 属性，place-self 属性</span><br><span class="line">  justify-self属性设置单元格内容的水平位置（左中右），跟justify-items属性的用法完全一致，但只作用于单个项目。</span><br><span class="line">  align-self属性设置单元格内容的垂直位置（上中下），跟align-items属性的用法完全一致，也是只作用于单个项目。</span><br></pre></td></tr></table></figure><hr><h1 id="一键置灰"><a href="#一键置灰" class="headerlink" title="一键置灰"></a><strong>一键置灰</strong></h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(.<span class="number">95</span>);</span><br><span class="line">    -webkit-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(.<span class="number">95</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="组件双向绑定函数写法"><a href="#组件双向绑定函数写法" class="headerlink" title="组件双向绑定函数写法"></a><strong>组件双向绑定函数写法</strong></h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;component :=<span class="string">&quot;createModel()&quot;</span>&gt;&lt;/component&gt;</span><br><span class="line"><span class="comment">// 每次返回一个函数</span></span><br><span class="line"><span class="comment">// 由于该函数里面有响应式的 form</span></span><br><span class="line"><span class="comment">// 每次 form 改变会导致重新调用该函数返回一个新的对象（modelValue 每次都是最新的值）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createModel</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">modelValue</span>: form.<span class="property">value</span>,</span><br><span class="line">      <span class="string">&#x27;onUpdate:modelValue&#x27;</span>: <span class="function">(<span class="params"><span class="attr">v</span>: <span class="built_in">any</span></span>) =&gt;</span> form.<span class="property">value</span> = v <span class="comment">// 加 on 前缀是绑定事件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然也可以使用 computed，这样上面就不用写括号调用了</span></span><br><span class="line"><span class="keyword">const</span> createModel = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">modelValue</span>: form.<span class="property">value</span>,</span><br><span class="line">    <span class="string">&#x27;onUpdate:modelValue&#x27;</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> form.<span class="property">value</span> = v</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h1 id="分页记录"><a href="#分页记录" class="headerlink" title="分页记录"></a><strong>分页记录</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 新增、编辑、删除等操作后重新获取列表，不需要将页数重置到第一页</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 当最后一页只有一条数据时候，删除后，重新请求当页没有数据 bug 不需要额外处理，</span></span><br><span class="line"><span class="comment">// 在分页组件中传了 size、tool 当没有那页数据时，current 会自动变为前一页</span></span><br><span class="line"><span class="comment">// current-change 会触发事件，然后重新发起一个请求，</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 在使用查询的时候，一般需要将 current 变为第一页 （也可以不处理，原因如下）</span></span><br><span class="line"><span class="comment">// 如果不改变为第一页，请求无数据会自动将 current 改为第一页，原因同上，</span></span><br><span class="line"><span class="comment">// 请求的数据没有到当前页数，则 current 为最后一页。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：组件上面双向绑定 current-page 了手动改变后， current-change 不会触发事件</span></span><br><span class="line"><span class="comment">// 手动改变 current-page 超出最大页数，也可以成功。</span></span><br><span class="line"><span class="comment">// 组件没有绑定 current-page 的话，分页请求只能在 current-change，</span></span><br><span class="line"><span class="comment">// 也就不能在查询中改为第一页，组件无法同步显示值。（单项或双向绑定可以）</span></span><br></pre></td></tr></table></figure><h1 id="验证码代码记录"><a href="#验证码代码记录" class="headerlink" title="验证码代码记录"></a><strong>验证码代码记录</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;getCode&quot;</span> :disabled=<span class="string">&quot;showCode !== 0&quot;</span> &gt;</span><br><span class="line">&#123;&#123;showCode===<span class="number">0</span>?<span class="string">&#x27;获取验证码&#x27;</span>:showCode&#125;&#125;</span><br><span class="line">&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> showCode = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> phone = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getCode</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (showCode.<span class="property">value</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> timerPhone</span><br><span class="line">        <span class="built_in">clearInterval</span>(timerPhone)</span><br><span class="line">        <span class="comment">// 校验手机号</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_">verifyPhone</span>(phone.<span class="property">value</span>)) <span class="keyword">return</span></span><br><span class="line">        showCode.<span class="property">value</span> = <span class="number">60</span></span><br><span class="line">        timerPhone = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            showCode.<span class="property">value</span>--</span><br><span class="line">            <span class="keyword">if</span> (showCode.<span class="property">value</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">clearInterval</span>(timerPhone)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">        <span class="comment">// 获取验证码</span></span><br><span class="line">        <span class="title function_">axios</span>(&#123;</span><br><span class="line">            <span class="attr">phone</span>: phone.<span class="property">value</span></span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;验证码&#x27;</span>, res);</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(timerPhone)</span><br><span class="line">            showCode.<span class="property">value</span> = <span class="number">0</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">verifyPhone</span> = (<span class="params">phone</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (phone === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;请输入手机号&#x27;</span>,</span><br><span class="line">            <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 手机号不为空</span></span><br><span class="line">        <span class="keyword">let</span> verify = <span class="regexp">/^1(3|4|7|5|8)([0-9]&#123;9&#125;)/</span>.<span class="title function_">test</span>(phone)</span><br><span class="line">        <span class="keyword">if</span> (!verify) &#123;</span><br><span class="line">            uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&#x27;手机号格式不正确&#x27;</span>,</span><br><span class="line">                <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Vite-兼容"><a href="#Vite-兼容" class="headerlink" title="Vite 兼容"></a><strong>Vite 兼容</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1 使用 @vitejs/plugin-legacy 处理</span></span><br><span class="line"><span class="comment">安装 yarn add @vitejs/plugin-legacy terser -D</span></span><br><span class="line"><span class="comment">注意：使用该方案必须 vite 要在 3 以上版本</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 配置如下</span></span><br><span class="line"><span class="keyword">import</span> legacyPlugin <span class="keyword">from</span> <span class="string">&quot;@vitejs/plugin-legacy&quot;</span>;</span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="title function_">legacyPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">targets</span>: [<span class="string">&quot;defaults&quot;</span>, <span class="string">&quot;ie &gt;= 11&quot;</span>, <span class="string">&quot;chrome 52&quot;</span>],</span><br><span class="line">    <span class="attr">additionalLegacyPolyfills</span>: [<span class="string">&quot;regenerator-runtime/runtime&quot;</span>],</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2 使用 babel 处理 （当上面的方案使用后还是报错页面白屏，采用该方案）</span></span><br><span class="line"><span class="comment">参考：https://juejin.cn/post/7242220704288964666</span></span><br><span class="line"><span class="comment">安装 yarn add @rollup/plugin-babel -D</span></span><br><span class="line"><span class="comment">     yarn add @babel/preset-env core-js@3 regenerator-runtime</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// main.ts 引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;core-js/stable&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;regenerator-runtime/runtime&#x27;</span>;</span><br><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; babel &#125; <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-babel&#x27;</span>;</span><br><span class="line"><span class="attr">build</span>: &#123;</span><br><span class="line">  <span class="attr">cssTarget</span>: <span class="string">&quot;chrome52&quot;</span>,</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&quot;es2015&quot;</span>,</span><br><span class="line">  <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="title function_">babel</span>(&#123;</span><br><span class="line">        <span class="attr">babelHelpers</span>: <span class="string">&quot;bundled&quot;</span>,</span><br><span class="line">        <span class="attr">plugins</span>: [],</span><br><span class="line">        <span class="attr">compact</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">presets</span>: [</span><br><span class="line">          [</span><br><span class="line">            <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">useBuiltIns</span>: <span class="literal">false</span>, <span class="comment">// 这里不能配置成 &#x27;entry&#x27;</span></span><br><span class="line">              <span class="attr">targets</span>: &#123;</span><br><span class="line">                <span class="attr">browsers</span>: <span class="string">&quot;last 2 versions and not dead, &gt; 0.2%, Firefox ESR&quot;</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        ],</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该配置踩坑：useBuiltIns 要配置成 false 故 corejs 配置也就无效要删除了。</span></span><br><span class="line"><span class="comment">// 使用 babel 不能开启分包策略 否则报错</span></span><br><span class="line"><span class="comment">// main.ts 引用最好在最上面，确保在所有包加载之前 （不过，实际测试：不放在最上面也可以）</span></span><br></pre></td></tr></table></figure><hr><h1 id="css-高度记录"><a href="#css-高度记录" class="headerlink" title="css 高度记录"></a><strong>css 高度记录</strong></h1><p><a href="https://blog.csdn.net/weixin_42335036/article/details/109102609">csdn</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">css 父元素设置了 height: 100% 和 min-height: 100% 当内容超出后，高度还是 100%？</span><br><span class="line">解决：</span><br><span class="line">1.父元素不设置 height: 100% 即可，但是子元素无法使用 height:100% （参考上面的 csdn 解决）</span><br><span class="line">  如：添加祖先元素 display: flex; overflow: auto </span><br><span class="line">  父元素由于 align-items: stretch 父元素和祖先元素一样高，子元素可以使用 height: 100%</span><br><span class="line">2.父元素要设置背景图片，子元素超出后，父元素不会变高，设置 height: fit-content;</span><br><span class="line">  背景图片会随着滚动来改变，父元素设置 overflow: auto; height: auto （滚动条在里面）</span><br></pre></td></tr></table></figure><hr><h1 id="input-正整数输入"><a href="#input-正整数输入" class="headerlink" title="input 正整数输入"></a><strong>input 正整数输入</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input v-model.<span class="property">number</span>=<span class="string">&quot;a&quot;</span> oninput=<span class="string">&quot;value=value.replace(/^0+(\d)|[^\d]+/g,&#x27;&#x27;)&quot;</span> type=<span class="string">&quot;number&quot;</span> /&gt;</span><br><span class="line"><span class="comment">// oninput 里面的 value 相当于 this.value （这里无法直接修改 a）</span></span><br><span class="line"><span class="comment">// 注意：如果使用 type=&quot;number&quot;，@input 监听不到 - . 输入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的写法，v-model.number 不会转化成数字 （可以不写）</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;a&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;v =&gt; a = v.replace(/^0+(\d)|[^\d]+/g, &#x27;&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 注意 @input （这里无法直接修改 v）</span></span><br></pre></td></tr></table></figure><hr><h1 id="new-promise-resolve-gt-resolve-new-promise"><a href="#new-promise-resolve-gt-resolve-new-promise" class="headerlink" title="new promise((resolve)=&gt; resolve(new promise()))"></a><strong>new promise((resolve)=&gt; resolve(new promise()))</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在这种情况下，返回的新 Promise 对象会被立即执行，并且它的状态将决定外部 Promise 的状态。</span><br><span class="line">如果内部的 Promise 对象被解决（resolved），外部的 Promise 对象也将被解决；</span><br><span class="line">如果内部的 Promise 对象被拒绝（rejected），外部的 Promise 对象也将被拒绝。</span><br><span class="line"></span><br><span class="line">这种行为是由 Promise 的规范所定义的。当你在 Promise 的回调函数中返回一个 Promise 对象时，</span><br><span class="line">外部的 Promise 对象将等待内部的 Promise 对象完成，并采用相同的状态。</span><br></pre></td></tr></table></figure><hr><h1 id="pinia-外部使用"><a href="#pinia-外部使用" class="headerlink" title="pinia 外部使用"></a><strong>pinia 外部使用</strong></h1><p><a href="https://pinia.vuejs.org/zh/core-concepts/outside-component-usage.html">pinia 在组件外部使用</a>  <a href="https://www.leanboot.com/74.htm">参考</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不推荐 注意：初始化了多个pinia 违反了pinia的单例模式，导致持久化插件失效</span></span><br><span class="line"><span class="comment">// 在外部 js 引入 pinia，传递给 use 函数</span></span><br><span class="line"><span class="comment">// pinia.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> pinia;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">import</span> pinia <span class="keyword">from</span> <span class="string">&#x27;@/stores/pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useAccessToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/stores&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useAccessToken</span>(pinia);</span><br></pre></td></tr></table></figure><hr><h1 id="v-model-number-输入不了小数、最后一位不能输入-0"><a href="#v-model-number-输入不了小数、最后一位不能输入-0" class="headerlink" title="v-model.number 输入不了小数、最后一位不能输入 0"></a><strong>v-model.number 输入不了小数、最后一位不能输入 0</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意这里不要使用 parseFloat </span></span><br><span class="line"><span class="comment">// parseFloat(&#x27;&#x27;)为 NAN ，Number(&#x27;&#x27;) 则为 0</span></span><br><span class="line">&lt;el-input type=<span class="string">&quot;number&quot;</span> v-model=<span class="string">&quot;a&quot;</span> @blur=<span class="string">&quot;a = Number(a)&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者封装一个函数处理 blur 统一处理</span></span><br></pre></td></tr></table></figure><hr><h1 id="触底加载"><a href="#触底加载" class="headerlink" title="触底加载"></a><strong>触底加载</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;about-item-scroll&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about-item-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about-item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in []&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触底加载</span></span><br><span class="line"><span class="keyword">let</span> isLoadingMore = <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> page = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">scrollHande</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 节流阀</span></span><br><span class="line">    <span class="keyword">if</span> (!isLoadingMore) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 获取内容高度</span></span><br><span class="line">    <span class="keyword">var</span> scrollH = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.about-item-container&#x27;</span>).<span class="property">scrollHeight</span></span><br><span class="line">    <span class="comment">// 获取窗口高度 (这里不能使用offsetHeight, 因为：如果子元素大于父元素的高度时，offsetHeight 获取的是子元素的高度)</span></span><br><span class="line">    <span class="keyword">var</span> innerH = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.about-item-scroll&#x27;</span>).<span class="property">clientHeight</span></span><br><span class="line">    <span class="comment">// 获取滚出去的内容高度</span></span><br><span class="line">    <span class="keyword">var</span> top = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.about-item-scroll&#x27;</span>).<span class="property">scrollTop</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当内容还剩余200的高度未滚出的时候发送请求</span></span><br><span class="line">    <span class="comment">// console.log(scrollH, top, innerH)</span></span><br><span class="line">    <span class="keyword">if</span> (scrollH - top - innerH &lt; <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触底了&#x27;</span>)</span><br><span class="line">        <span class="comment">// 发送请求</span></span><br><span class="line">        page++</span><br><span class="line">        <span class="title function_">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> isScrollEventBound = <span class="literal">false</span>; <span class="comment">// 控制第一次请求后绑定事件（因为有的DOM在请求后才会出现）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  isLoadingMore = <span class="literal">false</span></span><br><span class="line">  http.<span class="title function_">get</span>(<span class="string">&#x27;&#x27;</span>, &#123; page, size &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">code</span> == <span class="number">200</span>) &#123;</span><br><span class="line">      list = [...list.<span class="property">value</span>, ...res.<span class="property">data</span>]</span><br><span class="line">      isLoadingMore = !(page * size &gt;= res.<span class="property">count</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!isScrollEventBound) &#123;</span><br><span class="line">        <span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.about-item-scroll&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, scrollHande)</span><br><span class="line">          isScrollEventBound = <span class="literal">true</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    loading.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    loading.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">onBeforeUnmount</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.about-item-scroll&#x27;</span>)) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.about-item-scroll&#x27;</span>).<span class="title function_">removeEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, scrollHande)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h1 id="表格高度计算记录"><a href="#表格高度计算记录" class="headerlink" title="表格高度计算记录"></a><strong>表格高度计算记录</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐使用 flex: 1，或者 grid 布局</span></span><br><span class="line"><span class="comment">// 不推荐使用 el-table 属性 height 来控制，表格上方高度不固定时，无法正确计算</span></span><br><span class="line"><span class="comment">// 不推荐使用 offsetTop 获取表格顶部高度，由于有些 DOM 需要在请求后渲染，</span></span><br><span class="line"><span class="comment">// 但是在请求后就获取 offsetTop 有时候 DOM 没渲染完成 （图片加载其他的），</span></span><br><span class="line"><span class="comment">// 会获取错误（需要 setTimeout 、nextTick 获取）</span></span><br></pre></td></tr></table></figure><hr><h1 id="执行文本函数-Function-和-eval"><a href="#执行文本函数-Function-和-eval" class="headerlink" title="执行文本函数 Function 和 eval"></a><strong>执行文本函数 Function 和 eval</strong></h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function">csdn 参考</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">executeFunctionWithContext</span>(<span class="params">context, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(context) === <span class="string">&quot;[object Object]&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> fn = <span class="keyword">new</span> <span class="title class_">Function</span>(...<span class="title class_">Object</span>.<span class="title function_">keys</span>(context), <span class="string">`return <span class="subst">$&#123;callback&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">fn</span>(...<span class="title class_">Object</span>.<span class="title function_">values</span>(context));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">name</span>: <span class="string">&quot;jack&quot;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">executeFunctionWithContext</span>(obj, <span class="string">&quot;console.log(age)&quot;</span>)); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">executeFunctionWithContext</span>(obj, <span class="string">&quot;name == &#x27;jack&#x27;&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">executeFunctionWithContext</span>(obj, <span class="string">&quot;console.log(errorName)&quot;</span>)); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><hr><h1 id="setup-中使用-beforeRouteEnter"><a href="#setup-中使用-beforeRouteEnter" class="headerlink" title="setup 中使用 beforeRouteEnter"></a><strong>setup 中使用 beforeRouteEnter</strong></h1><p><a href="https://blog.csdn.net/oafzzl/article/details/125045087">csdn 参考</a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方案一 （注意：需要 vue3.3以上版本，低版本需要安装 unplugin-vue-define-options 包）</span></span><br><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, <span class="title class_">ComponentPublicInstance</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// * defineExpose暴露出来的方法，接口实现</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IInstance</span> <span class="keyword">extends</span> <span class="title class_">ComponentPublicInstance</span> &#123;</span><br><span class="line">  <span class="title function_">getData</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">defineOptions</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;***&#x27;</span>,</span><br><span class="line">  <span class="title function_">beforeRouteEnter</span>(<span class="params">_to, _from, next</span>) &#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="function">(<span class="params">vm</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> instance = vm <span class="keyword">as</span> <span class="title class_">IInstance</span></span><br><span class="line">      instance.<span class="title function_">getData</span>() <span class="comment">// 刷新列表数据（不缓存）</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取表格数据（示例方法）</span></span><br><span class="line"><span class="keyword">const</span> listData = <span class="title function_">ref</span>([])</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  listData.<span class="property">value</span> = []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// * beforeRouteEnter中要用到的方法，需要暴露出来</span></span><br><span class="line"><span class="title function_">defineExpose</span>(&#123; getData &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方案二</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; defineComponent, <span class="title class_">ComponentPublicInstance</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">interface <span class="title class_">IInstance</span> <span class="keyword">extends</span> <span class="title class_">ComponentPublicInstance</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setPathFrom</span>(<span class="attr">from</span>: string): <span class="keyword">void</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">next</span>(<span class="function">(<span class="params">vm</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> instance = vm <span class="keyword">as</span> <span class="title class_">IInstance</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      instance.<span class="title function_">setPathFrom</span>(<span class="keyword">from</span>.<span class="property">path</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> <span class="attr">pathFrom</span>: string</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">setPathFrom</span> = (<span class="params">path: string</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  pathFrom = path</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;vue-route::from::&#x27;</span>, pathFrom)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">defineExpose</span>(&#123; setPathFrom &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="表格分页选择回显"><a href="#表格分页选择回显" class="headerlink" title="表格分页选择回显"></a><strong>表格分页选择回显</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回显使用 toggleRowSelection 方法</span></span><br><span class="line"><span class="comment">// 只能通过对应的 row 而不是 id 来选中，故每次请求时候设置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 selection-change 事件，循环当前页面表格的数据，</span></span><br><span class="line"><span class="comment">// 然后获取 selection-change 返回值和总值来比对是否应该选中和删除，</span></span><br><span class="line"><span class="comment">// selection-change 返回值没有就是删除，有就是添加。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同理使用 select 和 select-all 来实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 待验证</span></span><br><span class="line"><span class="comment">// （解决）最好是直接返回的是 id 所在的表格数据 row，就可以一次回显所有的数据</span></span><br></pre></td></tr></table></figure><hr><h1 id="echarts-线上显示空白"><a href="#echarts-线上显示空白" class="headerlink" title="echarts 线上显示空白"></a><strong>echarts 线上显示空白</strong></h1><p>参考 <a href="https://blog.csdn.net/qq_45641978/article/details/119144542">csdn</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原因：由于 echars 机制原因 再次进入页面创建新的 canvas 需要清空之前的echarts图，</span></span><br><span class="line"><span class="comment">// 如果未清除，echarts 就会显示失败</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决一：离开页面时候销毁</span></span><br><span class="line">&lt;div id=<span class="string">&quot;echarts&quot;</span> &gt;&lt;/div&gt;</span><br><span class="line"><span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (myChart) &#123;</span><br><span class="line">    echarts.<span class="title function_">dispose</span>(myChart)</span><br><span class="line">    <span class="comment">// 或者 myChart.dispose()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：使用 getInstanceByDom、clear、resize 等无效</span></span><br><span class="line"><span class="comment">// 在开发环境下第二次进来 getInstanceByDom 获取 undefined 可能是开发环境会自动销毁</span></span><br><span class="line"><span class="comment">// 生产环境第二次进来却获取得到之前的实例</span></span><br><span class="line"> myChart = echarts.<span class="title function_">getInstanceByDom</span>(<span class="string">&#x27;dom&#x27;</span>) <span class="comment">// 这里是 dom 选择器</span></span><br><span class="line"> <span class="keyword">if</span>(!myChart) &#123; echarts.<span class="title function_">init</span>(<span class="string">&#x27;dom&#x27;</span>) &#125; <span class="comment">// 没有创建过才重新创建实例</span></span><br><span class="line"> <span class="comment">// 生产环境中，清空后再重新绘制还是无效果（下面的方案）</span></span><br><span class="line"> myChart.<span class="title function_">clear</span>(); <span class="comment">// 清空画布</span></span><br><span class="line"> myChart.<span class="title function_">setOption</span>() <span class="comment">// 重新绘画</span></span><br><span class="line"> myChart.<span class="title function_">resize</span>() <span class="comment">// 重新加载</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 解决二：使用 ref 或者动态 dom 属性等</span></span><br><span class="line">&lt;div id=<span class="string">&quot;echarts&quot;</span> :<span class="keyword">class</span>=<span class="string">&quot;`$&#123;new Date().getTime()&#125;`&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="comment">// 生产环境第二次进来 echarts.getInstanceByDom(refName.value) 也为 undefined</span></span><br><span class="line"><span class="comment">// 这样在生产环境每次 init 的 DOM 相当于不是同一个 </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;refName&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">echarts.init(refName.value)</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">// 总结：</span></span><br><span class="line"><span class="language-xml">// 页面在 onMounted 里面就应该 init，</span></span><br><span class="line"><span class="language-xml">// 不应该在请求完成后，这样在未完成请求切换页面就会导致没有元素报错</span></span><br><span class="line"><span class="language-xml">// 使用 id 必须销毁，暂没找到其他方法</span></span><br><span class="line"><span class="language-xml">// 使用 ref 来 init 获取元素，也应该销毁，可以释放内存</span></span><br></pre></td></tr></table></figure><hr><h1 id="npm-全局更新包"><a href="#npm-全局更新包" class="headerlink" title="npm 全局更新包"></a><strong>npm 全局更新包</strong></h1><p><a href="https://juejin.cn/post/6913833065647341581">参考</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 检查过时的安装包</span><br><span class="line">npm outdated [packageName]</span><br><span class="line">// Package 显示包名。若使用了 --long / -l 则还是显示这个包属于 dependencies 还是devDependency</span><br><span class="line">// Current  当前依赖包安装版本</span><br><span class="line">// Wanted 根据 package.json 包版本前缀规则可以更新的最新版本号</span><br><span class="line">// Latest 最新包版本号【默认情况下是最新的，这取决于开发人员的包管理制度】</span><br><span class="line">// Location 是该依赖包在所居于的依赖树中所在的位置</span><br><span class="line">// 更新依赖</span><br><span class="line">npm update packageName (-D | -S)</span><br></pre></td></tr></table></figure><hr><h1 id="el-table-出现-fixed-后滚动失灵"><a href="#el-table-出现-fixed-后滚动失灵" class="headerlink" title="el-table 出现 fixed 后滚动失灵"></a><strong>el-table 出现 fixed 后滚动失灵</strong></h1><p><a href="https://github.com/element-plus/element-plus/issues/13828">github issue</a> <a href="https://blog.csdn.net/qq_68155756/article/details/132059107">csdn 类似问题</a> <a href="https://blog.csdn.net/Phoebe_helloworld/article/details/127264228">解决参考</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在 el-table 没有写 height，缩放页面会出现滚动失灵</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">解决：https://blog.csdn.net/Phoebe_helloworld/article/details/127264228</span></span><br><span class="line"><span class="comment">原因：出现竖向滚动是由于固定列的伪元素导致的，所以只需要调整伪元素即可。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.el-table__body-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span><span class="selector-class">.el-table-fixed-column--left</span><span class="selector-class">.is-first-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__body-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span><span class="selector-class">.el-table-fixed-column--left</span><span class="selector-class">.is-last-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__body-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span><span class="selector-class">.el-table-fixed-column--right</span><span class="selector-class">.is-first-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__body-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span><span class="selector-class">.el-table-fixed-column--right</span><span class="selector-class">.is-last-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__body-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">th</span><span class="selector-class">.el-table-fixed-column--left</span><span class="selector-class">.is-first-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__body-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">th</span><span class="selector-class">.el-table-fixed-column--left</span><span class="selector-class">.is-last-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__body-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">th</span><span class="selector-class">.el-table-fixed-column--right</span><span class="selector-class">.is-first-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__body-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">th</span><span class="selector-class">.el-table-fixed-column--right</span><span class="selector-class">.is-last-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__footer-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span><span class="selector-class">.el-table-fixed-column--left</span><span class="selector-class">.is-first-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__footer-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span><span class="selector-class">.el-table-fixed-column--left</span><span class="selector-class">.is-last-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__footer-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span><span class="selector-class">.el-table-fixed-column--right</span><span class="selector-class">.is-first-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__footer-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span><span class="selector-class">.el-table-fixed-column--right</span><span class="selector-class">.is-last-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__footer-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">th</span><span class="selector-class">.el-table-fixed-column--left</span><span class="selector-class">.is-first-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__footer-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">th</span><span class="selector-class">.el-table-fixed-column--left</span><span class="selector-class">.is-last-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__footer-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">th</span><span class="selector-class">.el-table-fixed-column--right</span><span class="selector-class">.is-first-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__footer-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">th</span><span class="selector-class">.el-table-fixed-column--right</span><span class="selector-class">.is-last-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__header-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span><span class="selector-class">.el-table-fixed-column--left</span><span class="selector-class">.is-first-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__header-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span><span class="selector-class">.el-table-fixed-column--left</span><span class="selector-class">.is-last-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__header-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span><span class="selector-class">.el-table-fixed-column--right</span><span class="selector-class">.is-first-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__header-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span><span class="selector-class">.el-table-fixed-column--right</span><span class="selector-class">.is-last-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__header-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">th</span><span class="selector-class">.el-table-fixed-column--left</span><span class="selector-class">.is-first-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__header-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">th</span><span class="selector-class">.el-table-fixed-column--left</span><span class="selector-class">.is-last-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__header-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">th</span><span class="selector-class">.el-table-fixed-column--right</span><span class="selector-class">.is-first-column</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.el-table__header-wrapper</span> <span class="selector-tag">tr</span> <span class="selector-tag">th</span><span class="selector-class">.el-table-fixed-column--right</span><span class="selector-class">.is-last-column</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="行内-onclick-与-DOM-绑定区别"><a href="#行内-onclick-与-DOM-绑定区别" class="headerlink" title="行内 onclick 与 DOM 绑定区别"></a><strong>行内 onclick 与 DOM 绑定区别</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">行内绑定是直接写函数里面的内容 （函数体）</span></span><br><span class="line"><span class="comment">绑定是写一个函数</span></span><br><span class="line"><span class="comment">区别：比如 this</span></span><br><span class="line"><span class="comment">&lt;div onclick=&quot;handleClick(this)&quot;&gt;点击&lt;/div&gt;</span></span><br><span class="line"><span class="comment">const handleClick = function (that) &#123;</span></span><br><span class="line"><span class="comment">    console.log(this, that) // windos, div</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h1 id="el-input-textarea-回显出现滚动条"><a href="#el-input-textarea-回显出现滚动条" class="headerlink" title="el-input textarea 回显出现滚动条"></a><strong>el-input textarea 回显出现滚动条</strong></h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">deep</span>(.el-textarea) .el-textarea__inner &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="视口-meta"><a href="#视口-meta" class="headerlink" title="视口 meta"></a><strong>视口 meta</strong></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">以下为没有 initial-scale=1.0 时</span><br><span class="line">1. 当没有 width=device-width 时候 html 的宽 980px 高 2118.4px</span><br><span class="line">2. 当有 width=device-width 时候 html 的宽高为 设备宽高</span><br><span class="line">页面显示的最小宽度也就是 html 的宽度，但是如果 html 里面的元素大于 hmlt 的宽，也会在页面显示出来，</span><br><span class="line">具体的值好像是（1500左右）</span><br><span class="line"></span><br><span class="line">initial-scale 没有设置就不会缩放，为 1 就是按照物理像素来的。</span><br><span class="line"></span><br><span class="line">通过更改这个元素在当前页面样式是不会重新加载的，（移动端 刷新也不行，需要关闭页面重新打开）</span><br></pre></td></tr></table></figure><hr><h1 id="vue3-watch-记录"><a href="#vue3-watch-记录" class="headerlink" title="vue3 watch 记录"></a><strong>vue3 watch 记录</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ref</span></span><br><span class="line"><span class="comment">一、watch 监听 ref 定义对象：</span></span><br><span class="line"><span class="comment">1. 直接写 () =&gt; xxx.value 和 xxx，需要开启深度；</span></span><br><span class="line"><span class="comment">2. 直接写 xxx.value 不需要写 deep。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">二、watch 监听 ref 定义原始值：</span></span><br><span class="line"><span class="comment">1. 直接写 xxx.value 监听失效（不能监听一个具体的字符串）；</span></span><br><span class="line"><span class="comment">2. () =&gt; xxx.value 可以的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">三、reactive 里面有对象 let a = reactive(&#123; b: &#123;&#125; &#125;) 可以直接写 a.b，不需要deep，箭头函数需要。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">总结：</span></span><br><span class="line"><span class="comment">直接传入一个响应式对象，会隐式地创建一个深层侦听器，</span></span><br><span class="line"><span class="comment">一个返回响应式对象的 getter 函数，只有在返回不同的对象时，才会触发回调</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">推荐监听对象里面的值一般写 getter ，需要开启则写上 deep，如果直接写是原始值就会出现警告（防止值不确定）</span></span><br><span class="line"><span class="comment">注意：ref 直接写，里面的是对象，默认不深度监听</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">flush: &#x27;post&#x27; 侦听器回调中能访问被 Vue 更新之后的 DOM</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h1 id="mitt-使用记录"><a href="#mitt-使用记录" class="headerlink" title="mitt 使用记录"></a><strong>mitt 使用记录</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用 mitt on 传递数据</span></span><br><span class="line">bus.<span class="title function_">on</span>(<span class="string">&quot;onMitt&quot;</span>, <span class="function">(<span class="params">callBack</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">callBack</span>(<span class="string">&#x27;数据&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">bus.<span class="title function_">emit</span>(<span class="string">&quot;emitMitt&quot;</span>, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 数据</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. mitt 注销事件</span></span><br><span class="line">bus.<span class="title function_">off</span>(<span class="string">&#x27;name&#x27;</span>) <span class="comment">// 如果不传第二个参数，则注销所有的同名事件</span></span><br><span class="line">bus.<span class="title function_">off</span>(<span class="string">&#x27;name&#x27;</span>, hanlde) <span class="comment">// 注销为 name 并且时当前处理的函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. mitt emit 传递多个值</span></span><br><span class="line"><span class="comment">// 不同于 vue 的组件 emit 直接传递多个，mitt 只能传递一个值 payload</span></span><br></pre></td></tr></table></figure><hr><h1 id="css-英文自动换行"><a href="#css-英文自动换行" class="headerlink" title="css 英文自动换行"></a><strong>css 英文自动换行</strong></h1><p>参考：<a href="https://juejin.cn/post/6844903667863126030">掘金</a></p><ul><li>white-space，控制空白字符的显示，同时还能控制是否自动换行。值：normal | nowrap | pre | pre-wrap | pre-line</li><li>word-break，控制单词如何被拆分换行。它有三个值：normal | break-all | keep-all</li><li>word-wrap（overflow-wrap）控制长度超过一行的单词是否被拆分换行，值：normal | break-word</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">word-wrap</span>:break-word;</span><br><span class="line">    <span class="attribute">word-break</span>:break-all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* word-break:break-all 所有单词碰到边界一律拆分换行，</span></span><br><span class="line"><span class="comment">   而 word-wrap:break-word 只有当一个单词一整行都显示不下时，才会拆分换行该单词。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h1 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a><strong>git rebase</strong></h1><p>参考：<a href="https://juejin.cn/post/7389650358539255845">掘金</a> <a href="https://juejin.cn/post/7026724793047220254">掘金</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 拉取</span><br><span class="line">git pull -r 或者 git pull --rebase</span><br><span class="line">// 冲突</span><br><span class="line">git add .</span><br><span class="line">git rebase --continue</span><br><span class="line"></span><br><span class="line">// 注意：</span><br><span class="line">rebase 并没有进行合并操作，只是提取了当前分支的修改，将其复制在了目标分支的最新提交后面</span><br><span class="line">git rebase xxx 是将当前分支变基到 xxx 下会导致溯源不能追踪了，当前分支就不知道从哪里来的</span><br><span class="line">git pull -r 里面的是 git rebase origin/master 将当前分支变成远端的基座，之后就 push 同步远端</span><br><span class="line">不能将 master 直接变基到其他分支，分支之间最好使用 merge</span><br><span class="line"></span><br><span class="line">// 在分支开发中，可以先在开发分支变基为 master，再切换为 master 合并 merge 开发分支。</span><br></pre></td></tr></table></figure><hr><h1 id="vue3-属性穿透"><a href="#vue3-属性穿透" class="headerlink" title="vue3 属性穿透"></a><strong>vue3 属性穿透</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 vue3 中，子组件没有接收的 props 会自动挂载组件根节点上面。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 深层传递坑</span></span><br><span class="line"><span class="comment">// App.vue</span></span><br><span class="line">&lt;<span class="title class_">TestFather</span> :name=<span class="string">&quot;999&quot;</span> :age=<span class="string">&quot;18&quot;</span>&gt;&lt;/<span class="title class_">TestFather</span>&gt;</span><br><span class="line"><span class="comment">// TestFather.vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Test&quot;</span> <span class="attr">:age</span>=<span class="string">&quot;10&quot;</span> <span class="attr">:name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line"><span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="title class_">Number</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// Test.vue</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;test&quot;</span>&gt;<span class="title class_">Tset</span>&#123;&#123; age &#125;&#125; &#123;&#123; name &#125;&#125;&lt;/div&gt;</span><br><span class="line"><span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="title class_">Number</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 TestFather 没有接收的 props 里面的 age，会自动继承到 Test 组件并且覆盖自己传递的age</span></span><br><span class="line"><span class="comment">// Test.vue 渲染的是 18（不管 TestFather.vue 里面 component 是否有传递 age 都是最外面的）</span></span><br></pre></td></tr></table></figure><hr><h1 id="v-for-使用-ref"><a href="#v-for-使用-ref" class="headerlink" title="v-for 使用 ref"></a><strong>v-for 使用 ref</strong></h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form v-<span class="keyword">for</span>=<span class="string">&quot;(formItem, formIndex) in formItems&quot;</span> :key=<span class="string">&quot;formIndex&quot;</span> :ref=<span class="string">&quot;setFormRef(formIndex)&quot;</span> /&gt;</span><br><span class="line"><span class="keyword">const</span> formRefs = <span class="title function_">reactive</span>([])</span><br><span class="line"><span class="comment">// 注意这里的写法是返回一个函数的函数，DOM 处相当于直接先调用了函数再就是 DOM 绑定的函数。</span></span><br><span class="line"><span class="comment">// 与 :ref=&quot;(el) =&gt; setFormRef(formIndex, el)&quot; 效果相同（推荐）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setFormRef</span> = (<span class="params">index</span>) =&gt; <span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">  formRefs[index] = el;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 校验</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">validateAndSubmit</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> validatePromises = formRefs.<span class="title function_">map</span>(<span class="function"><span class="params">formRef</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      formRef.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid, fields</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(fields);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(validatePromises);</span><br><span class="line">    <span class="comment">// 所有表单校验通过的逻辑</span></span><br><span class="line">    <span class="comment">// 在这里可以触发后续事件</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (fields) &#123;</span><br><span class="line">    <span class="comment">// 校验失败的逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二中写法 （ v3.2.25 以上）</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;itemRefs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：上面的第二种写法 ref 数组并不保证与源数组相同的顺序。（暂未发现，注意 Key 值不同）</span></span><br><span class="line"><span class="comment">// 第一种有闭包则不会，该函数只有在改 DOM 组件更新时被调用。</span></span><br><span class="line"><span class="comment">//如果没有使用传递 index，举例：而是直接 push (操作数据会重复push) 则会可能出现顺序不一致的情况</span></span><br><span class="line"><span class="comment">// 参考：https://juejin.cn/post/7069301529437536270</span></span><br></pre></td></tr></table></figure><hr><h1 id="css-flex-中挤压其他元素空间"><a href="#css-flex-中挤压其他元素空间" class="headerlink" title="css flex 中挤压其他元素空间"></a><strong>css flex 中挤压其他元素空间</strong></h1><p><a href="https://segmentfault.com/q/1010000043388498">参考</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 解决：设置 width: 0</span><br></pre></td></tr></table></figure><hr><h1 id="input-正则校验金额"><a href="#input-正则校验金额" class="headerlink" title="input 正则校验金额"></a><strong>input 正则校验金额</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input v-model=&quot;xxx&quot; oninput=&quot;value = inputNumberValidate(value)&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">const inputNumberValidate = (v) =&gt; &#123;</span><br><span class="line">    return v.replace(/^\.|[^\d.]/g, &#x27;&#x27;).replace(/(\..*)\./g, &#x27;$1&#x27;).replace(/^0+(\d+)/g, &#x27;$1&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="原生-body-添加-vue-组件渲染"><a href="#原生-body-添加-vue-组件渲染" class="headerlink" title="原生 body 添加 vue 组件渲染"></a><strong>原生 body 添加 vue 组件渲染</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// import componentName from &#x27;.../index.vue&#x27;</span><br><span class="line">const parent = document.createElement(&#x27;div&#x27;)</span><br><span class="line">const instance = createApp(componentName).mount(parent)</span><br><span class="line">const dom = instance.$el</span><br><span class="line">document.body.appendChild(dom)</span><br></pre></td></tr></table></figure><hr><h1 id="文本省略-Clamp-js-原生"><a href="#文本省略-Clamp-js-原生" class="headerlink" title="文本省略 Clamp.js 原生"></a><strong>文本省略 Clamp.js 原生</strong></h1><p><a href="https://github.com/josephschmitt/Clamp.js">Clamp.js</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;js/clamp.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">1、 单行省略</span><br><span class="line">$clamp(myHeader,&#123;clamp:1&#125;)</span><br><span class="line">2、多行省略</span><br><span class="line">$clamp(myHeader,&#123;clamp:3&#125;)</span><br><span class="line">3、根据有效的高度自动省略</span><br><span class="line">$clamp(myparagraph,&#123;clamp:&#x27;auto&#x27;&#125;)</span><br><span class="line">4、基于固定元素高度的省略</span><br><span class="line">$clamp(myparagraph,&#123;clamp:&#x27;35px&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">注意：文本需要使用p标签或div标签，span不行。</span><br></pre></td></tr></table></figure><hr><h1 id="getBoundingClientRect-api-以及定位记录"><a href="#getBoundingClientRect-api-以及定位记录" class="headerlink" title="getBoundingClientRect api 以及定位记录"></a><strong>getBoundingClientRect api 以及定位记录</strong></h1><p>实现下拉组件的记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 定位记录</span><br><span class="line">1. 外层元素overflow:auto/scroll导致absolute定位的子元素溢出部分被隐藏</span><br><span class="line">（https://blog.csdn.net/Wind_waving/article/details/123473622）</span><br><span class="line">2. 子元素定位没有设置宽度，内容（文字）不会超出父元素</span><br><span class="line"></span><br><span class="line">// getBoundingClientRect</span><br><span class="line">方法返回一个 DOMRect 对象，其提供了元素的大小及其相对于视口的位置。</span><br><span class="line">（https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect）</span><br><span class="line"></span><br><span class="line">下拉框的位置可以使用 popper.js 库来解决</span><br></pre></td></tr></table></figure><hr><h1 id="BroadCastChannel"><a href="#BroadCastChannel" class="headerlink" title="BroadCastChannel"></a><strong>BroadCastChannel</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接到指定频道</span></span><br><span class="line"><span class="keyword">const</span> bc = <span class="keyword">new</span> <span class="title class_">BroadcastChannel</span>(<span class="string">&#x27;channelName&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送消息可以是任何类型的 Object</span></span><br><span class="line">bc.<span class="title function_">postMessage</span>(<span class="string">&#x27;message&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收消息 onmessage 同样可以</span></span><br><span class="line"><span class="keyword">const</span> listen = <span class="keyword">new</span> <span class="title class_">BroadcastChannel</span>(<span class="string">&#x27;channelName&#x27;</span>);</span><br><span class="line">listen.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在无法反序列化的消息到达频道时触发 onmessageerror 同样可以</span></span><br><span class="line">listen.<span class="title function_">addEventListener</span>(<span class="string">&quot;messageerror&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制台打印频道名称</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bc.<span class="property">name</span>); <span class="comment">// &quot;test_channel&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当完成后，断开与频道的连接</span></span><br><span class="line">bc.<span class="title function_">close</span>();</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 前端知识记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js 补充</title>
      <link href="/2022/12/28/Node-js-%E8%A1%A5%E5%85%85/"/>
      <url>/2022/12/28/Node-js-%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>参考：<a href="https://brucecai55520.gitee.io/bruceblog/notes/nodejs/node.html">Node.js</a></p><h1 id="初识-Node-js"><a href="#初识-Node-js" class="headerlink" title="初识 Node.js"></a><strong>初识 Node.js</strong></h1><ul><li><p><strong>使用 Node.js 运行 js 文件</strong></p><p>输入：node 要执行的js文件的路径</p></li><li><p><strong>cmd 中快捷键：</strong>Tab 快速补全、Esc 快速情况当前输入的命令</p></li></ul><hr><h1 id="Node-js-中的-fs-模块"><a href="#Node-js-中的-fs-模块" class="headerlink" title="Node.js 中的 fs 模块"></a><strong>Node.js 中的 fs 模块</strong></h1><h2 id="fs-readFile"><a href="#fs-readFile" class="headerlink" title="fs.readFile"></a><strong>fs.readFile</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>) <span class="comment">// 注意不能使用 import fs from &#x27;fs&#x27;;</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(path[, options], callback)</span><br></pre></td></tr></table></figure><ul><li><p>path：文件路径（必选）</p></li><li><p>options：配置选项，若是字符串则指定编码格式 （可选）</p></li><li><ul><li>encoding：编码格式</li><li>flag：打开方式</li></ul></li><li><p>callback：回调函数 （必选）</p></li><li><ul><li>err：错误信息</li><li>data：读取的数据，如果未指定编码格式则返回一个 Buffer</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入 fs 模块，来操作文件</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 调用 fs.readFile() 方法读取文件</span></span><br><span class="line"><span class="comment">//    参数1：读取文件的存放路径</span></span><br><span class="line"><span class="comment">//    参数2：读取文件时候采用的编码格式，一般默认指定 utf8</span></span><br><span class="line"><span class="comment">//    参数3：回调函数，拿到读取失败和成功的结果  err  dataStr</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./files/11.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, dataStr</span>) &#123;</span><br><span class="line">  <span class="comment">// 2.1 打印失败的结果</span></span><br><span class="line">  <span class="comment">// 如果读取成功，则 err 的值为 null</span></span><br><span class="line">  <span class="comment">// 如果读取失败，则 err 的值为 错误对象，dataStr 的值为 undefined</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------&#x27;</span>)</span><br><span class="line">  <span class="comment">// 2.2 打印成功的结果</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dataStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="fs-writeFile"><a href="#fs-writeFile" class="headerlink" title="fs.writeFile"></a><strong>fs.writeFile</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile(file, data[, options], callback)</span><br></pre></td></tr></table></figure><ul><li>file：文件路径</li><li>data：写入内容</li><li>options：配置选项，包含 encoding, mode, flag；若是字符串则指定编码格式</li><li>callback：回调函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./files/3.txt&#x27;</span>, <span class="string">&#x27;ok123&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="comment">// 1 如果文件写入成功，则 err 的值等于 null</span></span><br><span class="line">  <span class="comment">// 2 如果文件写入失败，则 err 的值等于一个 错误对象</span></span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件写入失败！&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件写入成功！&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 注意：该方法只能在一个文件中写入数据，有其他内容会被完全替换成该传入的内容</span></span><br></pre></td></tr></table></figure><hr><h1 id="Node-js-中的-path-模块"><a href="#Node-js-中的-path-模块" class="headerlink" title="Node.js 中的 path 模块"></a><strong>Node.js 中的 path 模块</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在 node 中 路径问题：</span><br><span class="line">出现路径拼接错误的问题，是因为提供了 ./ 或 ../ 开头的相对路径，绝对路径不会出现</span><br><span class="line">代码在运行的时候，会以执行 node 命令时所处的目录，动态拼接出被操作文件的完整路径。</span><br><span class="line">如：index.js 读取 ./xxx.txt，不会按照这个文件来作为依据查找，而是工作目录。</span><br></pre></td></tr></table></figure><hr><h2 id="path-jion-与-path-resolve"><a href="#path-jion-与-path-resolve" class="headerlink" title="path.jion 与 path.resolve"></a><strong>path.jion 与 path.resolve</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__dirname) <span class="comment">// 得到的是当前文件所在目录的绝对路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__dirname + <span class="string">&#x27;/xxx.txt&#x27;</span>) <span class="comment">// 手动拼接</span></span><br><span class="line"><span class="comment">// path.join 可以传递任意多个参数，返回拼接后的字符串（../ 则是返回）</span></span><br><span class="line">path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;/src&#x27;</span>, <span class="string">&#x27;./index.js&#x27;</span>) <span class="comment">// 如__dirname为F:/moxie，则F:/moxie/src/index.js</span></span><br><span class="line"><span class="comment">// path.resolve 则无论如何都会返回一个绝对路径</span></span><br></pre></td></tr></table></figure><hr><h2 id="获取路径中文件名-path-basename"><a href="#获取路径中文件名-path-basename" class="headerlink" title="获取路径中文件名 path.basename"></a><strong>获取路径中文件名 path.basename</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取路径中的最后一部分，常通过该方法获取路径中的文件名</span></span><br><span class="line">path.<span class="title function_">basename</span>(path[, ext])</span><br><span class="line"><span class="comment">/* path: 文件路径，ext: 文件扩展名 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/a/b/c/index.html&#x27;</span> <span class="comment">// 定义文件的存放路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(fpath)) <span class="comment">// index.html</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(fpath, <span class="string">&#x27;.html&#x27;</span>)) <span class="comment">// index</span></span><br></pre></td></tr></table></figure><hr><h2 id="path-extname"><a href="#path-extname" class="headerlink" title="path.extname"></a><strong>path.extname</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">extname</span>(path)</span><br><span class="line"><span class="comment">// 获取路径中文件扩展名，path 必选参数，表示一个路径的字符串</span></span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/a/b/c/index.html&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(fpath)) <span class="comment">// .html</span></span><br></pre></td></tr></table></figure><hr><h1 id="http-模块"><a href="#http-模块" class="headerlink" title="http 模块"></a><strong>http 模块</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 创建 web 服务器实例</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"><span class="comment">// 3. 为服务器实例绑定 request 事件，监听客户端的请求</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">`Your request url is <span class="subst">$&#123;req.url&#125;</span>, and request method is <span class="subst">$&#123;req.method&#125;</span>`</span></span><br><span class="line">  <span class="comment">// 设置 Content-Type 响应头，解决中文乱码的问题</span></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>)</span><br><span class="line">  <span class="comment">// 向客户端响应内容</span></span><br><span class="line">  res.<span class="title function_">end</span>(str)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 4. 启动服务器（80 端口可以省略）</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://127.0.0.1:8080&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h1 id="Node-中的模块化"><a href="#Node-中的模块化" class="headerlink" title="Node 中的模块化"></a><strong>Node 中的模块化</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 默认情况下，exports 和 module.exports 指向同一个对象。最终结果，以 module.exports 指向的对象为准。</span></span><br><span class="line"><span class="comment">module 对象中也包含了其他的一些常用属性 */</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">exports</span> === <span class="variable language_">module</span>.<span class="property">exports</span>); <span class="comment">//  true</span></span><br></pre></td></tr></table></figure><hr><h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a><strong>npm</strong></h1><h2 id="包的语义化版本规范"><a href="#包的语义化版本规范" class="headerlink" title="包的语义化版本规范"></a>包的语义化版本规范</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">包的版本号是以“点分十进制”形式进行定义的，总共有三位数字</span><br><span class="line">例如 2.24.0，含义如下：</span><br><span class="line">第1位数字：大版本</span><br><span class="line">2位数字：功能版本</span><br><span class="line">3位数字：Bug修复版本</span><br><span class="line">注意：版本号提升的规则：只要前面的版本号增长了，则后面的版本号归零。</span><br></pre></td></tr></table></figure><h2 id="包管理配置文件"><a href="#包管理配置文件" class="headerlink" title="包管理配置文件"></a>包管理配置文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm init -y // 生成 package.json 配置文件</span><br><span class="line">// 上述命令只能在英文的目录下成功运行！</span><br><span class="line">// 所以，项目文件夹的名称一定要使用英文命名，不要使用中文，不能出现空格。</span><br></pre></td></tr></table></figure><h2 id="切换-npm-的下包镜像源"><a href="#切换-npm-的下包镜像源" class="headerlink" title="切换 npm 的下包镜像源"></a>切换 npm 的下包镜像源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查看当前下载包镜像源</span><br><span class="line">npm config get registry</span><br><span class="line"># 将下载的包的镜像切换为淘宝镜像源</span><br><span class="line">npm config set registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure><hr><h2 id="nrm-的使用"><a href="#nrm-的使用" class="headerlink" title="nrm 的使用"></a><strong>nrm 的使用</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.全局安装 nrm</span></span><br><span class="line">npm i nrm -g</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.查看所有可用镜像源</span></span><br><span class="line">nrm ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3.将下载包的镜像源切换为 taobao 镜像</span></span><br><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure><hr><h2 id="发布包"><a href="#发布包" class="headerlink" title="发布包"></a><strong>发布包</strong></h2><p>一个规范的包必须符合以下 3 点要求：</p><p>① 包必须以单独的目录而存在</p><p>② 包的顶级目录下要必须包含 package.json 这个包管理配置文件</p><p>③ package.json 中必须包含 name，version，main 这三个属性，分别代表包的名字、版本号、包的入口文件。</p><p><strong>发布流程</strong></p><ol><li><p>新建package.json、index.js、README.md 三个文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json 文件</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;npm-moxie-heima&quot;</span>,  <span class="comment">// 名称</span></span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>, <span class="comment">// 版本</span></span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;包的描述信息&quot;</span>, <span class="comment">// 描述信息</span></span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>, <span class="comment">// 入口文件</span></span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: [<span class="string">&quot;moxie&quot;</span>], <span class="comment">// 关键字</span></span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 作者</span></span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span> <span class="comment">// 协议：https://www.jianshu.com/p/86251523e898</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>登录 npm 账号</p><p>npm 账号注册完成后</p><p>终端中执行 <code>npm login</code> 命令，依次输入用户名、密码、邮箱后，即可登录成功。</p><p>注意：在运行 <code>npm login</code> 命令之前，必须先把下包的服务器地址切换为 npm 的官方服务器。否则会导致发布包失败！ </p><p>使用 <code>npm config get registry</code> 查看下载地址 <code>https://registry.npmmirror.com/</code></p><p>使用 <code>npm config set registry https://registry.npmjs.org/</code> 切换到官方地址</p></li><li><p>把包发布到 npm 上</p><p>将终端切换到包的根目录之后，运行 <code>npm publish</code> 命令，即可将包发布到 npm 上</p><p>注意：包名不能雷同</p></li><li><p>删除发布的包</p><p>运行 <code>npm unpublish 包名 --force</code> 命令，即可从 npm 删除已发布的包。</p><p>① <code>npm unpublish</code> 命令只能删除 72 小时以内发布的包</p><p>② <code>npm unpublish</code> 删除的包，在 24 小时内不允许重复发布</p><p>③ 发布包的时候要慎重，尽量不要往 npm 上发布没有意义的包！</p></li><li><p>其他命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm whoami <span class="comment">// npm 查看用户信息</span></span><br><span class="line">npm logout <span class="comment">// npm 退出</span></span><br><span class="line">npm publish --access public  <span class="comment">// 发布包</span></span><br><span class="line"><span class="comment">// 表示包访问权限   </span></span><br><span class="line"><span class="comment">// --access public    设置包开放</span></span><br><span class="line"><span class="comment">// --access restricted 设置包私有</span></span><br><span class="line"><span class="comment">// 注: npm 可发布最小单位是 package.json 一个文件，只有登录后才可以发布 npm 包</span></span><br><span class="line"> npm unpublish 包名 --force <span class="comment">// npm撤销发布的包</span></span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a><strong>Express</strong></h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a><strong>基本使用</strong></h2><p>安装 Express：<code>npm install express</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建 web 服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听客户端的 GET 和 POST 请求，并向客户端响应具体的内容</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;请求成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 通过 req.query 可以获取到客户端发送过来的查询参数</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(req.<span class="property">query</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的 :id 是一个动态的参数</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/:ids/:username&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// req.params 是动态匹配到的 URL 参数，默认是一个空对象</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(req.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="托管静态资源"><a href="#托管静态资源" class="headerlink" title="托管静态资源"></a><strong>托管静态资源</strong></h2><ul><li>通过 <code>express.static()</code> 方法可创建静态资源服务器，向外开放访问静态资源。</li><li>Express 在指定的静态目录中查找文件，并对外提供资源的访问路径，存放静态文件的目录名不会出现在URL 中</li><li>访问静态资源时，会根据托管顺序查找文件</li><li>可为静态资源访问路径添加前缀</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;files&#x27;</span>))</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/bruce&#x27;</span>, express.<span class="title function_">static</span>(<span class="string">&#x27;bruce&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">可直接访问 public, files 目录下的静态资源</span></span><br><span class="line"><span class="comment">http://localhost:3000/images/bg.jpg</span></span><br><span class="line"><span class="comment">http://localhost:3000/css/style.css</span></span><br><span class="line"><span class="comment">http://localhost:3000/js/login.js</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">通过带有 /bruce 前缀的地址访问 bruce 目录下的文件</span></span><br><span class="line"><span class="comment">http://localhost:8080/bruce/images/logo.png</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：实际过程中要使用 path 模块</span></span><br></pre></td></tr></table></figure><hr><h2 id="模块化路由"><a href="#模块化路由" class="headerlink" title="模块化路由"></a><strong>模块化路由</strong></h2><p>为了方便对路由进行模块化的管理，Express 不建议将路由直接挂载到 app 上，而是推荐将路由抽离为单独的模块。</p><p>将路由抽离为单独模块的步骤如下：</p><p>① 创建路由模块对应的 .js 文件</p><p>② 调用 express.Router() 函数创建路由对象</p><p>③ 向路由对象上挂载具体的路由</p><p>④ 使用 module.exports 向外共享路由对象</p><p>⑤ 使用 app.use() 函数注册路由模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载具体路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Get user list.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/user/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Add new user.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外导出路由对象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册路由模块，添加访问前缀</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="Express-中间件"><a href="#Express-中间件" class="headerlink" title="Express 中间件"></a><strong>Express 中间件</strong></h2><ul><li>中间件是指流程的中间处理环节</li><li>服务器收到请求后，可先调用中间件进行预处理</li><li>中间件是一个函数，包含 req, res, next 三个参数，next() 参数把流转关系交给下一个中间件或路由</li></ul><p><strong>中间件注意事项：</strong></p><ul><li>在注册路由之前注册中间件（错误级别中间件除外）</li><li>中间件可连续调用多个</li><li>别忘记调用 next() 函数</li><li>next() 函数后别写代码</li><li>多个中间件共享 req、res对象</li></ul><p><strong>全局中间件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个最简单的中间件函数</span></span><br><span class="line"><span class="comment">// const mw = function (req, res, next) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;这是最简单的中间件函数&#x27;)</span></span><br><span class="line"><span class="comment">//   把流转关系，转交给下一个中间件或路由</span></span><br><span class="line"><span class="comment">//   next()</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 将 mw 注册为全局生效的中间件</span></span><br><span class="line"><span class="comment">// app.use(mw)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义第一个全局中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第1个全局中间件&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 定义第二个全局中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第2个全局中间件&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;User page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>局部中间件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义中间件函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw1</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第一个局部生效的中间件&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw2</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第二个局部生效的中间件&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两种定义局部中间件的方式</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/hello&#x27;</span>, mw2, mw1, <span class="function">(<span class="params">req, res</span>) =&gt;</span> res.<span class="title function_">send</span>(<span class="string">&#x27;hello page.&#x27;</span>))</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/about&#x27;</span>, [mw1, mw2], <span class="function">(<span class="params">req, res</span>) =&gt;</span> res.<span class="title function_">send</span>(<span class="string">&#x27;about page.&#x27;</span>))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> res.<span class="title function_">send</span>(<span class="string">&#x27;User page.&#x27;</span>))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Express server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>中间件分类</strong></p><ol><li><p>应用级别的中间件</p><ul><li>通过 app.use() 或 app.get() 或 app.post() ，绑定到 app 实例上的中间件。</li></ul></li><li><p>路由级别的中间件</p><ul><li><p>绑定到 express.Router() 实例上的中间件，叫做路由级别的中间件。用法和应用级别中间件没有区别。应用级别中间件是绑定到 app 实例上，路由级别中间件绑定到 router 实例上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, router)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>错误级别的中间件</p><ul><li>用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题</li><li>错误级别中间件的处理函数中，必须有 4 个形参，形参顺序从前到后分别是 (err, req, res, next) 。</li><li>错误级别的中间件必须注册在所有路由之后。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;服务器内部发生了错误！&#x27;</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Home page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义错误级别的中间件，捕获整个项目的异常错误，从而防止程序的崩溃</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发生了错误！&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Error：&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Express server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>Express 内置中间件</p><p>自 Express 4.16.0 版本开始，Express 内置了 3 个常用的中间件，极大的提高了 Express 项目的开发效率和体验：</p><ul><li>express.static 快速托管静态资源的内置中间件，例如： HTML 文件、图片、CSS 样式等（无兼容性）</li><li>express.json 解析 JSON 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</li><li>express.urlencoded 解析 URL-encoded 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：除了错误级别的中间件，其他的中间件，必须在路由之前进行配置</span></span><br><span class="line"><span class="comment">// 通过 express.json() 这个中间件，解析表单中的 JSON 格式的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line"><span class="comment">// 通过 express.urlencoded() 这个中间件，来解析 表单中的 url-encoded 格式的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在服务器，可以使用 req.body 这个属性，来接收客户端发送过来的请求体数据</span></span><br><span class="line">  <span class="comment">// 默认情况下，如果不配置解析表单数据的中间件，则 req.body 默认等于 undefined</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义中间件</span></span><br><span class="line"><span class="comment">/*  一. custom-body-parser.js ---------------*/</span></span><br><span class="line"><span class="comment">// 导入 Node.js 内置的 querystring 模块</span></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">bodyParser</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 定义中间件具体的业务逻辑</span></span><br><span class="line">  <span class="comment">// 1. 定义一个 str 字符串，专门用来存储客户端发送过来的请求体数据</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="comment">// 2. 监听 req 的 data 事件</span></span><br><span class="line">  req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">    str += chunk</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 3. 监听 req 的 end 事件</span></span><br><span class="line">  req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在 str 中存放的是完整的请求体数据</span></span><br><span class="line">    <span class="comment">// console.log(str)</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 把字符串格式的请求体数据，解析成对象格式</span></span><br><span class="line">    <span class="keyword">const</span> body = qs.<span class="title function_">parse</span>(str)</span><br><span class="line">    req.<span class="property">body</span> = body</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = bodyParser</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 二、main.js --------------- */</span></span><br><span class="line"><span class="comment">// 导入 express 模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建 express 的服务器实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">// 1. 导入自己封装的中间件模块</span></span><br><span class="line"><span class="keyword">const</span> customBodyParser = <span class="built_in">require</span>(<span class="string">&#x27;./custom-body-parser&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 将自定义的中间件函数，注册为全局可用的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(customBodyParser)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(req.<span class="property">body</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 调用 app.listen 方法，指定端口号并启动web服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Express server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>第三方中间件</p></li></ol><hr><h2 id="CORS-跨域资源共享"><a href="#CORS-跨域资源共享" class="headerlink" title="CORS 跨域资源共享"></a><strong>CORS 跨域资源共享</strong></h2><h3 id="cors-中间件解决跨域"><a href="#cors-中间件解决跨域" class="headerlink" title="cors 中间件解决跨域"></a><strong>cors 中间件解决跨域</strong></h3><ul><li>安装中间件：<code>npm install cors</code></li><li>导入中间件：<code>const cors = require(&#39;cors&#39;)</code></li><li>配置中间件：<code>app.use(cors())</code></li></ul><hr><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a><strong>CORS</strong></h3><ul><li>CORS（Cross-Origin Resource Sharing，跨域资源共享）解决跨域，是通过 HTTP 响应头决定浏览器是否阻止前端 JS 代码跨域获取资源</li><li>浏览器的同源安全策略默认会阻止网页“跨域”获取资源。但如果接口服务器配置了 CORS 相关的 HTTP 响应头，就可解除浏览器端的跨域访问限制</li><li>CORS 主要在服务器端进行配置。客户端浏览器无须做任何额外的配置，即可请求开启了 CORS 的接口。</li><li>CORS 在浏览器中有兼容性。只有支持 XMLHttpRequest Level2 的浏览器，才能正常访问开启了 CORS 的服务端接口（例如：IE10+、Chrome4+、FireFox3.5+）。</li></ul><hr><h3 id="CORS-常见响应头"><a href="#CORS-常见响应头" class="headerlink" title="CORS 常见响应头"></a><strong>CORS 常见响应头</strong></h3><p><code>Access-Control-Allow-Origin</code>：制定了允许访问资源的外域 URL</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;http://bruceblog.io&#x27;</span>)</span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>Access-Control-Allow-Headers</code></p><ul><li>默认情况下，CORS 仅支持客户端向服务器发送如下的 9 个请求头：<code>Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width 、Content-Type （值仅限于 text/plain、multipart/form-data、application/x-www-form-urlencoded 三者之一）</code></li><li>如果客户端向服务器发送了额外的请求头信息，则需要在服务器端，通过 <code>Access-Control-Allow-Headers</code> 对额外的请求头进行声明，否则这次请求会失败！</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>Access-Control-Allow-Methods</code></p><ul><li>默认情况下，CORS 仅支持客户端发起 GET、POST、HEAD 请求。如果客户端希望通过 PUT、DELETE 等方式请求服务器的资源，则需要在服务器端，通过 <code>Access-Control-Alow-Methods</code> 来指明实际请求所允许使用的 HTTP 方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;POST, GET, DELETE, HEAD&#x27;</span>)</span><br><span class="line">res.<span class="title function_">setHEader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="CORS-请求分类"><a href="#CORS-请求分类" class="headerlink" title="CORS 请求分类"></a><strong>CORS 请求分类</strong></h3><p><strong>简单请求</strong></p><ul><li>请求方式：GET、POST、HEAD 三者之一</li><li>HTTP 头部信息不超过以下几种字段：无自定义头部字段、<code>Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width 、Content-Type（只有三个值 application/x-www-formurlencoded、multipart/form-data、text/plain）</code></li></ul><p><strong>预检请求</strong></p><ul><li>请求方式为 GET、POST、HEAD 之外的请求 Method 类型</li><li>请求头中包含自定义头部字段</li><li>向服务器发送了 application/json 格式的数据</li></ul><p>在浏览器与服务器正式通信之前，浏览器会先发送 OPTION 请求进行预检，以获知服务器是否允许该实际请求，所以这一次的 OPTION 请求称为“预检请求”。服务器成功响应预检请求后，才会发送真正的请求，并且携带真实数据</p><hr><h1 id="数据库与身份验证"><a href="#数据库与身份验证" class="headerlink" title="数据库与身份验证"></a><strong>数据库与身份验证</strong></h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a><strong>数据库</strong></h2><p>数据库（database）是用来组织、存储和管理数据的仓库。</p><p><strong>分类</strong></p><ul><li>MySQL 数据库（目前使用最广泛、流行度最高的开源免费数据库；Community + Enterprise）</li><li>Oracle 数据库（收费）</li><li>SQL Server 数据库（收费）</li><li>Mongodb 数据库（Community + Enterprise）</li></ul><p>其中，MySQL、Oracle、SQL Server 属于传统型数据库（又叫做：关系型数据库 或 SQL 数据库），这三者的设计理念相同，用法比较类似。而 Mongodb 属于新型数据库（又叫做：非关系型数据库 或 NoSQL 数据库），它在一定程度上弥补了传统型数据库的缺陷。</p><hr><h2 id="mysql-的安装"><a href="#mysql-的安装" class="headerlink" title="mysql 的安装"></a><strong>mysql 的安装</strong></h2><p><a href="https://www.mysql.com/">mysql 官网</a></p><p>只需要安装 MySQL Server 和 MySQL Workbench 这两个软件，就能满足开发的需要了。</p><ul><li>MySQL Server：专门用来提供数据存储和服务的软件。</li><li>MySQL Workbench：可视化的 MySQL 管理工具，通过它，可以方便的操作存储在 MySQL Server 中的数据</li></ul><p>也可以使用集成环境 laragon、phpstudy 等包含了 mysql，再配合 navicat 等</p><hr><h2 id="sql-语句使用"><a href="#sql-语句使用" class="headerlink" title="sql 语句使用"></a><strong>sql 语句使用</strong></h2><p>SQL（英文全称：Structured Query Language）是结构化查询语言，专门用来访问和处理数据库的编程语言。能够让我们以编程的形式，操作数据库里面的数据。</p><p><strong>三个关键点：</strong></p><ul><li>SQL 是一门数据库编程语言</li><li>使用 SQL 语言编写出来的代码，叫做 SQL 语句</li><li>SQL 语言只能在关系型数据库中使用（例如 MySQL、Oracle、SQL Server）。非关系型数据库（例如 Mongodb）不支持 SQL 语言</li></ul><p>注意：SQL 语句中的关键字对大小写不敏感。SELECT 等效于 select，FROM 等效于 from。</p><p><strong>WHERE 子句中使用的运算符</strong></p><table><thead><tr><th><strong>操作符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>BETWEEN</td><td>在某个范围内</td></tr><tr><td>LIKE</td><td>搜索某种模式</td></tr></tbody></table><p>注意：在某些版本的 SQL 中，操作符 &lt;&gt; 可以写为 !=</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 这是注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- SQL 的 SELECT 语句</span></span><br><span class="line"><span class="comment">-- 从 FROM 指定的【表中】，查询出【所有的】数据。*表示【所有列】</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名称</span><br><span class="line"><span class="comment">-- 从 FROM 指定的【表中】，查询出指定列名称（字段）的数据。</span></span><br><span class="line"><span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表名称</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SQL 的 INSERT INTO 语句</span></span><br><span class="line"><span class="comment">-- 语法解读：向指定的表中，插入如下几列数据，列的值通过 values 指定</span></span><br><span class="line"><span class="comment">-- 注意：列和值要一对应，多个列和多个值之间，使用英文的逗号分隔</span></span><br><span class="line"><span class="keyword">INSERT</span> INT0 table_name (列<span class="number">1</span>, 列<span class="number">2</span>, ...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SQL 的 UPDATE 语句</span></span><br><span class="line"><span class="comment">-- 1.用 UPDATE 指定要更新哪个表中的数据</span></span><br><span class="line"><span class="comment">-- 2.用 SET 指定列对应的新值</span></span><br><span class="line"><span class="comment">-- 3.用 WHERE 指定更新的条件</span></span><br><span class="line"><span class="keyword">UPDATE</span> 表名称 <span class="keyword">SET</span> 列名称 <span class="operator">=</span> 新值 <span class="keyword">WHERE</span> 列名称 <span class="operator">=</span> 某值</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SQL 的 DELETE 语句：</span></span><br><span class="line"><span class="comment">-- 从指定的表中，根据 WHERE 条件，删除对应的数据行</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 列名称 <span class="operator">=</span> 值</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SQL 的 WHERE 子句</span></span><br><span class="line"><span class="comment">-- 查询语句中的WHERE条件</span></span><br><span class="line"><span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 列 运算符 值</span><br><span class="line"><span class="comment">-- 更新语句中的WHERE条件</span></span><br><span class="line"><span class="keyword">UPDATE</span> 表名称 <span class="keyword">SET</span> 列<span class="operator">=</span>新值 <span class="keyword">WHERE</span> 列 运算符 值</span><br><span class="line"><span class="comment">-- 删除语句中的WHERE条件</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 列运算符值</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SQL 的 AND 和 OR 运算符</span></span><br><span class="line"><span class="comment">-- AND 表示必须同时满足多个条件，相当于 JavaScript 中的 &amp;&amp; 运算符</span></span><br><span class="line"><span class="comment">-- OR 表示只要满足任意一个条件即可，相当于 JavaScript 中的 || 运算符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- SQL 的 ORDER BY 子句</span></span><br><span class="line"><span class="comment">-- ORDER BY 语句默认按照升序对记录进行排序。ASC</span></span><br><span class="line"><span class="comment">-- 按照降序对记录进行排序，可以使用 DESC 关键字。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- SQL 的 COUNT(*) 函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> 表名称</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 AS 为列设置别名</span></span><br></pre></td></tr></table></figure><p><strong>举例使用</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通过 * 把 users 表中所有的数据查询出来</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 从 users 表中把 username 和 password 对应的数据查询出来</span></span><br><span class="line"><span class="keyword">select</span> username, password <span class="keyword">from</span> users</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向 users 表中，插入新数据，username 的值为 tony stark  password 的值为 098123</span></span><br><span class="line"><span class="keyword">insert into</span> users (username, password) <span class="keyword">values</span> (<span class="string">&#x27;tony stark&#x27;</span>, <span class="string">&#x27;098123&#x27;</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将 id 为 4 的用户密码，更新成 888888</span></span><br><span class="line"><span class="keyword">update</span> users <span class="keyword">set</span> password<span class="operator">=</span><span class="string">&#x27;888888&#x27;</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">4</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更新 id 为 2 的用户，把用户密码更新为 admin123  同时，把用户的状态更新为 1</span></span><br><span class="line"><span class="keyword">update</span> users <span class="keyword">set</span> password<span class="operator">=</span><span class="string">&#x27;admin123&#x27;</span>, status<span class="operator">=</span><span class="number">1</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">2</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除 users 表中， id 为 4 的用户</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">4</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 演示 where 子句的使用</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> status<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">&gt;=</span><span class="number">2</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username<span class="operator">&lt;&gt;</span><span class="string">&#x27;ls&#x27;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username<span class="operator">!=</span><span class="string">&#x27;ls&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 AND 来显示所有状态为0且id小于3的用户</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> status<span class="operator">=</span><span class="number">0</span> <span class="keyword">and</span> id<span class="operator">&lt;</span><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 or 来显示所有状态为1 或 username 为 zs 的用户</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> status<span class="operator">=</span><span class="number">1</span> <span class="keyword">or</span> username<span class="operator">=</span><span class="string">&#x27;zs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对users表中的数据，按照 status 字段进行升序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> status</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照 id 对结果进行降序的排序  desc 表示降序排序   asc 表示升序排序（默认情况下，就是升序排序的）</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">desc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对 users 表中的数据，先按照 status 进行降序排序，再按照 username 字母的顺序，进行升序的排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> status <span class="keyword">desc</span>, username <span class="keyword">asc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 count(*) 来统计 users 表中，状态为 0 用户的总数量</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> users <span class="keyword">where</span> status<span class="operator">=</span><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 AS 关键字给列起别名</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> total <span class="keyword">from</span> users <span class="keyword">where</span> status<span class="operator">=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">as</span> uname, password <span class="keyword">as</span> upwd <span class="keyword">from</span> users</span><br></pre></td></tr></table></figure><hr><h2 id="mysql-模块"><a href="#mysql-模块" class="headerlink" title="mysql 模块"></a><strong>mysql 模块</strong></h2><h3 id="配置-mysql-模块"><a href="#配置-mysql-模块" class="headerlink" title="配置 mysql 模块"></a><strong>配置 mysql 模块</strong></h3><ol><li><p>安装 mysql 模块 <code>npm install mysql</code></p></li><li><p>建立连接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>测试是否正常工作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">query</span>(<span class="string">&#x27;select 1&#x27;</span>, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(results)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="操作-mysql-数据库"><a href="#操作-mysql-数据库" class="headerlink" title="操作 mysql 数据库"></a><strong>操作 mysql 数据库</strong></h3><ol><li><p>查询数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">query</span>(<span class="string">&#x27;select * from users&#x27;</span>, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>插入数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ? 表示占位符</span></span><br><span class="line"><span class="keyword">const</span> sql = <span class="string">&#x27;insert into users values(?, ?)&#x27;</span></span><br><span class="line"><span class="comment">// 使用数组的形式为占位符指定具体的值</span></span><br><span class="line">db.<span class="title function_">query</span>(sql, [username, password], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>向表中新增数据时，如果数据对象的每个属性和数据表的字段一一对应，则可以通过如下方式快速插入数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">username</span>:<span class="string">&#x27;Bruce&#x27;</span>, <span class="attr">password</span>:<span class="string">&#x27;55520&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> sql = <span class="string">&#x27;insert into users set ?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sql, user, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>更新数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sql = <span class="string">&#x27;update users set username=?, password=? where id=?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sql, [username, password, id], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>快捷方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">id</span>:<span class="number">7</span>,<span class="attr">username</span>:<span class="string">&#x27;Bruce&#x27;</span>,<span class="attr">password</span>:<span class="string">&#x27;55520&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> sql = <span class="string">&#x27;update users set ? where id=?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sql, [user, user.<span class="property">id</span>], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sql = <span class="string">&#x27;delete from users where id=?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(sql, id, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用 delete 语句会真正删除数据，保险起见，使用标记删除的形式，模拟删除的动作。即在表中设置状态字段，标记当前的数据是否被删除。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">query</span>(<span class="string">&#x27;update users set status=1 where id=?&#x27;</span>, <span class="number">7</span>, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="Web-开发模式"><a href="#Web-开发模式" class="headerlink" title="Web 开发模式"></a><strong>Web 开发模式</strong></h2><h3 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a><strong>服务端渲染</strong></h3><p>服务器发送给客户端的 HTML 页面，是在服务器通过字符串的拼接动态生成的。因此客户端不需要使用 Ajax 额外请求页面的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/index.html&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;Bruce&#x27;</span>, <span class="attr">age</span>: <span class="number">29</span> &#125;</span><br><span class="line">  <span class="keyword">const</span> html = <span class="string">`&lt;h1&gt;username:<span class="subst">$&#123;user.name&#125;</span>, age:<span class="subst">$&#123;user.age&#125;</span>&lt;/h1&gt;`</span></span><br><span class="line">  res.<span class="title function_">send</span>(html)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>前端耗时短。浏览器只需直接渲染页面，无需额外请求数据。</li><li>有利于 SEO。服务器响应的是完整的 HTML 页面内容，有利于爬虫爬取信息。</li></ul><p>缺点：</p><ul><li>占用服务器资源。服务器需要完成页面内容的拼接，若请求比较多，会对服务器造成一定访问压力。</li><li>不利于前后端分离，开发效率低。</li></ul><hr><h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a><strong>前后端分离</strong></h3><p>前后端分离的开发模式，依赖于 Ajax 技术的广泛应用。后端只负责提供 API 接口，前端使用 Ajax 调用接口。</p><p>优点：</p><ul><li>开发体验好。前端专业页面开发，后端专注接口开发。</li><li>用户体验好。页面局部刷新，无需重新请求页面。</li><li>减轻服务器的渲染压力。页面最终在浏览器里生成。</li></ul><p>缺点：</p><ul><li>不利于 SEO。完整的 HTML 页面在浏览器拼接完成，因此爬虫无法爬取页面的有效信息。Vue、React 等框架的 SSR（server side render）技术能解决 SEO 问题。</li></ul><hr><h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a><strong>如何选择</strong></h3><ul><li>企业级网站，主要功能是展示，没有复杂交互，且需要良好的 SEO，可考虑服务端渲染</li><li>后台管理项目，交互性强，无需考虑 SEO，可使用前后端分离</li><li>为同时兼顾首页渲染速度和前后端分离开发效率，可采用首屏服务器端渲染+其他页面前后端分离的开发模式</li></ul><hr><h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a><strong>身份认证</strong></h2><h3 id="Session-认证机制"><a href="#Session-认证机制" class="headerlink" title="Session 认证机制"></a><strong>Session 认证机制</strong></h3><p>服务端渲染推荐使用 Session 认证机制</p><hr><h3 id="Session-工作原理"><a href="#Session-工作原理" class="headerlink" title="Session 工作原理"></a><strong>Session 工作原理</strong></h3><p><img src="https://pic.imgdb.cn/item/63da5d8dac6ef8601673f1af.png"></p><p><strong>Express 中使用 Session 认证</strong></p><ol><li><p>安装 express-session 中间件 npm install express-session</p></li><li><p>配置中间件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="string">&#x27;Bruce&#x27;</span>, <span class="comment">// secret 的值为任意字符串</span></span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">saveUninitalized</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>向 session 中存数据</p><p>中间件配置成功后，可通过 <code>req.session</code> 访问 session 对象，存储用户信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  req.<span class="property">session</span>.<span class="property">user</span> = req.<span class="property">body</span></span><br><span class="line">  req.<span class="property">session</span>.<span class="property">isLogin</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;login done&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>从 session 取数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/username&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">isLogin</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;fail&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;success&#x27;</span>, <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">username</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>清空 session</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/logout&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 清空当前客户端的session信息</span></span><br><span class="line">  req.<span class="property">session</span>.<span class="title function_">destroy</span>()</span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;logout done&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="JWT-认证机制"><a href="#JWT-认证机制" class="headerlink" title="JWT 认证机制"></a><strong>JWT 认证机制</strong></h3><p>前后端分离推荐使用 JWT（JSON Web Token）认证机制，是目前最流行的跨域认证解决方案</p><p><strong>JWT 工作原理</strong></p><p>Session 认证的局限性：</p><ul><li>Session 认证机制需要配合 Cookie 才能实现。由于 Cookie 默认不支持跨域访问，所以，当涉及到前端跨域请求后端接口的时候，需要做很多额外的配置，才能实现跨域 Session 认证。</li><li>当前端请求后端接口不存在跨域问题的时候，推荐使用 Session 身份认证机制。</li><li>当前端需要跨域请求后端接口的时候，不推荐使用 Session 身份认证机制，推荐使用 JWT 认证机制</li></ul><p>JWT 工作原理图：</p><p>用户的信息通过 Token 字符串的形式，保存在客户端浏览器中。服务器通过还原 Token 字符串的形式来认证用户的身份。</p><p><img src="https://pic.imgdb.cn/item/63da5e91ac6ef8601676add6.png"></p><p>JWT 组成部分：</p><ul><li>Header、Payload、Signature</li><li>Payload 是真正的用户信息，加密后的字符串</li><li>Header 和 Signature 是安全性相关部分，保证 Token 安全性</li><li>三者使用<code>.</code>分隔</li></ul><p><code>Header.Payload.Signature</code></p><p><strong>JWT 使用方式：</strong></p><ul><li><p>客户端会把 JWT 存储在 localStorage 或 sessionStorage 中</p></li><li><p>此后客户端与服务端通信需要携带 JWT 进行身份认证，将 JWT 存在 HTTP 请求头 Authorization 字段中</p></li><li><p>加上 Bearer 前缀</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure></li></ul><p><strong>Express 使用 JWT</strong></p><ol><li><p>安装 <code>npm install jsonwebtoken express-jwt</code></p><ul><li>jsonwebtoken 用于生成 JWT 字符串</li><li>express-jwt 用于将 JWT 字符串解析还原成 JSON 对象</li></ul></li><li><p>定义 secret 密钥</p><ul><li>为保证 JWT 字符串的安全性，防止其在网络传输过程中被破解，需定义用于加密和解密的 secret 密钥</li><li>生成 JWT 字符串时，使用密钥加密信息，得到加密好的 JWT 字符串</li><li>把 JWT 字符串解析还原成 JSON 对象时，使用密钥解密</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> expressJWT = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 密钥为任意字符串</span></span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="string">&#x27;Bruce&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>生成 JWT 字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;登录成功&#x27;</span>,</span><br><span class="line">    <span class="comment">// jwt.sign() 生成 JWT 字符串</span></span><br><span class="line">    <span class="comment">// 参数：用户信息对象、加密密钥、配置对象-token有效期</span></span><br><span class="line">    <span class="comment">// 尽量不保存敏感信息，因此只有用户名，没有密码</span></span><br><span class="line">    <span class="attr">token</span>: jwt.<span class="title function_">sign</span>(&#123;<span class="attr">username</span>: userInfo.<span class="property">username</span>&#125;, secretKey, &#123;<span class="attr">expiresIn</span>: <span class="string">&#x27;10h&#x27;</span>&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>JWT 字符串还原为 JSON 对象</p><ul><li>客户端访问有权限的接口时，需通过请求头的 Authorization 字段，将 Token 字符串发送到服务器进行身份认证</li><li>服务器可以通过 express-jwt 中间件将客户端发送过来的 Token 解析还原成 JSON 对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// unless(&#123; path: [/^\/api\//] &#125;) 指定哪些接口无需访问权限</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressJWT</span>(&#123; <span class="attr">secret</span>: secretKey &#125;).<span class="title function_">unless</span>(&#123; <span class="attr">path</span>: [<span class="regexp">/^\/api\//</span>] &#125;))</span><br></pre></td></tr></table></figure></li><li><p>获取用户信息</p><ul><li><p>当 express-jwt 中间件配置成功后，即可在那些有权限的接口中，使用 req.user 对象，来访问从 JWT 字符串中解析出来的用户信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/admin/getinfo&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">user</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;获取信息成功&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: req.<span class="property">user</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>捕获解析 JWT 失败后产生的错误</p><ul><li>当使用 express-jwt 解析 Token 字符串时，如果客户端发送过来的 Token 字符串过期或不合法，会产生一个解析失败的错误，影响项目的正常运行</li><li>通过 Express 的错误中间件，捕获这个错误并进行相关的处理</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err.<span class="property">name</span> === <span class="string">&#x27;UnauthorizedError&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">401</span>, <span class="attr">message</span>: <span class="string">&#x27;Invalid token&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">500</span>, <span class="attr">message</span>: <span class="string">&#x27;Unknown error&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识记录3</title>
      <link href="/2022/11/20/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%953/"/>
      <url>/2022/11/20/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%953/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记录平时遇到的技术问题和学习到的新知识</p><hr><h1 id="动态加载js"><a href="#动态加载js" class="headerlink" title="动态加载js"></a><strong>动态加载js</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用document.write 动态加载 script（每次引入的js文件名称不同防止浏览器读取缓存文件）</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;script src=&#x27;xxx.js?num=&quot;</span> + <span class="title class_">Date</span>.<span class="title function_">now</span>() + <span class="string">&quot;&#x27;&gt;&lt;\/script&gt;&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：如果后面的闭合标签不使用\分割就会与上面的标签对应，导致后面的成了HTML文本</span></span><br><span class="line"><span class="comment">// 以后在&lt;script&gt;&lt;/script&gt;中的字符串中使用到&lt;/script&gt;，都需要分割处理。否则还会出现此BUG！</span></span><br></pre></td></tr></table></figure><hr><h1 id="element-plus-自动按需加载与其他"><a href="#element-plus-自动按需加载与其他" class="headerlink" title="element plus 自动按需加载与其他"></a><strong>element plus 自动按需加载与其他</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * element-plus 自动按需引入</span></span><br><span class="line"><span class="comment"> * 注意：vue文件中不需要引入组件或组件api既可以使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&quot;unplugin-auto-import/vite&quot;</span>; <span class="comment">// 自动导入</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&quot;unplugin-vue-components/vite&quot;</span>; <span class="comment">// 组件注册</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&quot;unplugin-vue-components/resolvers&quot;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自动按需引入后：使用手动引入组件或者组件api方式会丢失样式 （需要手动引入样式文件）</span></span><br><span class="line"><span class="comment"> * 使用插件解决手动引入的样式丢失问题 （即可不需要手动引入）</span></span><br><span class="line"><span class="comment"> * 不使用插件ElMessage使用 如：</span></span><br><span class="line"><span class="comment"> * import &#123; ElMessage &#125; from &#x27;element-plus&#x27;</span></span><br><span class="line"><span class="comment"> * import &#x27;element-plus/es/components/message/style/css&#x27;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&quot;unplugin-element-plus/vite&quot;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自动引入 element plus 图标</span></span><br><span class="line"><span class="comment"> * 注意：使用时需要添加 i-ep 前缀</span></span><br><span class="line"><span class="comment"> * 如：&lt;el-icon&gt;&lt;IEpSearch /&gt;&lt;/el-icon&gt;</span></span><br><span class="line"><span class="comment"> * 其他如input、button添加图标要使用插槽的方式 </span></span><br><span class="line"><span class="comment"> * &lt;el-button&gt;&lt;template #icon&gt;&lt;i-ep-edit /&gt;&lt;/template&gt;&lt;/el-button&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Icons</span> <span class="keyword">from</span> <span class="string">&quot;unplugin-icons/vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">IconsResolver</span> <span class="keyword">from</span> <span class="string">&quot;unplugin-icons/resolver&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="comment">// 自动导入 Vue、Vue Router、pinia 相关函数，如：ref, reactive, toRef 等</span></span><br><span class="line">      <span class="attr">imports</span>: [<span class="string">&quot;vue&quot;</span>, <span class="string">&quot;vue-router&quot;</span>, <span class="string">&quot;pinia&quot;</span>],</span><br><span class="line">      <span class="comment">// 解决 eslint 报错</span></span><br><span class="line">      <span class="attr">eslintrc</span>: &#123;</span><br><span class="line">        <span class="attr">enabled</span>: <span class="literal">false</span>, <span class="comment">// Default `false`</span></span><br><span class="line">        <span class="attr">filepath</span>: <span class="string">&quot;./.eslintrc-auto-import.json&quot;</span>, <span class="comment">// Default `./.eslintrc-auto-import.json`</span></span><br><span class="line">        <span class="attr">globalsPropValue</span>: <span class="literal">true</span>, <span class="comment">// Default `true`, (true | false | &#x27;readonly&#x27; | &#x27;readable&#x27; | &#x27;writable&#x27; | &#x27;writeable&#x27;)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 解析器，例如element-plus 的 ElementPlusResolver</span></span><br><span class="line">      <span class="attr">resolvers</span>: [</span><br><span class="line">        <span class="comment">// 自动导入 Element Plus 相关函数，如：ElMessage, ElMessageBox... (带样式)</span></span><br><span class="line">        <span class="title class_">ElementPlusResolver</span>(),</span><br><span class="line">        <span class="comment">// 自动导入图标组件</span></span><br><span class="line">        <span class="title class_">IconsResolver</span>(&#123;</span><br><span class="line">          <span class="attr">prefix</span>: <span class="string">&quot;Icon&quot;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [</span><br><span class="line">        <span class="comment">// 自动注册图标组件</span></span><br><span class="line">        <span class="title class_">IconsResolver</span>(&#123;</span><br><span class="line">          <span class="attr">enabledCollections</span>: [<span class="string">&quot;ep&quot;</span>],</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 自动导入 Element Plus 组件</span></span><br><span class="line">        <span class="title class_">ElementPlusResolver</span>(),</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Icons</span>(&#123;</span><br><span class="line">      <span class="attr">autoInstall</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">ElementPlus</span>(),</span><br><span class="line">    <span class="title function_">viteMockServe</span>(),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：element plus 官网上的</span></span><br><span class="line"><span class="comment">//（如果您使用 unplugin-element-plus 并且只使用组件 API，您需要手动导入样式。）</span></span><br><span class="line"><span class="comment">// 暂无触发该bug、使用插件后并没有样式丢失</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 国际化</span></span><br><span class="line">在 <span class="variable constant_">APP</span>.<span class="property">vue</span> 中 使用全局组件 <span class="title class_">Config</span> <span class="title class_">Provider</span></span><br></pre></td></tr></table></figure><hr><h1 id="svg-使用"><a href="#svg-使用" class="headerlink" title="svg 使用"></a><strong>svg 使用</strong></h1><p>参考：<a href="https://juejin.cn/post/7118985770408345630">掘金</a> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注意：直接在浏览器上访问svg，需要使用 xmlns 声明渲染规则</span></span><br><span class="line"><span class="comment">svg 在使用img 背景图时需要添加xmlns，直接在HTML中使用则不需要</span></span><br><span class="line"><span class="comment">如果 svg 没有写宽高有默认宽高，在背景图片不会出现 repeat、背景大小无效（不推荐）</span></span><br><span class="line"><span class="comment">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;/svg&gt; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 项目安装 vite-plugin-svg-icons svgo插件 */</span></span><br><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createSvgIconsPlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-svg-icons&#x27;</span> <span class="comment">// svg 雪碧图</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span> <span class="comment">// path 模块</span></span><br><span class="line"><span class="title function_">createSvgIconsPlugin</span>(&#123;</span><br><span class="line">  <span class="comment">// 指定需要缓存的图标文件夹</span></span><br><span class="line">  <span class="attr">iconDirs</span>: [path.<span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), <span class="string">&#x27;src/assets/icons&#x27;</span>)],</span><br><span class="line">  <span class="comment">// 指定symbolId格式</span></span><br><span class="line">  <span class="attr">symbolId</span>: <span class="string">&#x27;icon-[dir]-[name]&#x27;</span></span><br><span class="line">&#125;),</span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;virtual:svg-icons-register&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// components 新建 SvgIcon组件，使用自动注册组件 unplugin-vue-components/vite 即可使用</span></span><br><span class="line"><span class="comment">// svgo 安装后 package添加 &quot;svgo&quot;: &quot;svgo -f src/assets/icons&quot;</span></span><br></pre></td></tr></table></figure><hr><h1 id="vite-中的引入资源"><a href="#vite-中的引入资源" class="headerlink" title="vite 中的引入资源"></a><strong>vite 中的引入资源</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 1. import 后再使用 --&gt;</span><br><span class="line">&lt;img :src=&quot;myImg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">import img from &#x27;xxx.png&#x27;</span><br><span class="line"> </span><br><span class="line">const myImg = img</span><br><span class="line"></span><br><span class="line">&lt;!-- 2. 使用new URL()，获取静态图片资源</span><br><span class="line">在vite.config.js 中</span><br><span class="line">import.meta.url -&gt; file:///D:/code/vue3-moxie-admin/vite.config.js</span><br><span class="line">new URL(&#x27;./src&#x27;, import.meta.url) -&gt; 一个 URL 对象，其中的href是当前目录的src 为 file:///D:/code/vue3-moxie-admin/src</span><br><span class="line">fileURLToPath(new URL(&#x27;./src&#x27;, import.meta.url)) -&gt; D:\code\vue3-moxie-admin\src</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!-- 获取地址函数 --&gt;</span><br><span class="line">const getImage = (name) =&gt; &#123;</span><br><span class="line">  return new URL(`/src/assets/$&#123;name&#125;`, import.meta.url).href</span><br><span class="line">&#125;</span><br><span class="line">&lt;img :src=&quot;getImage(&#x27;vue.svg&#x27;)&quot; alt=&quot;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 3.使用import.meta.glob，配置 eager: true 为直接导入--&gt;</span><br><span class="line">const getImage = (name) =&gt; &#123;</span><br><span class="line">  const modules = import.meta.glob(&#x27;/src/assets/*.svg&#x27;, &#123; eager: true &#125;)</span><br><span class="line">  const path = `/src/assets/$&#123;name&#125;.svg`</span><br><span class="line">  return modules[path]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;img :src=&quot;getImage(name)&quot;&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 4.使用await import --&gt;</span><br><span class="line">&lt;img :src=&quot;imgUrl&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">let imgUrl = ref(&#x27;&#x27;)</span><br><span class="line">const handleImgSrc = async () =&gt; &#123;</span><br><span class="line">  let middle = await import(&#x27;@/assets/vue.svg&#x27;)</span><br><span class="line">  imgUrl.value = middle.default</span><br><span class="line">&#125;</span><br><span class="line">handleImgSrc()</span><br></pre></td></tr></table></figure><hr><h1 id="flex-中的-margin-auto"><a href="#flex-中的-margin-auto" class="headerlink" title="flex 中的 margin:auto"></a><strong>flex 中的 margin:auto</strong></h1><p>参考：<a href="https://juejin.cn/post/6844903704085135373">css flex布局中妙用margin: auto</a></p><hr><h1 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a><strong>websocket</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接到WebSockets</span></span><br><span class="line"><span class="keyword">const</span> webSocket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://localhost:8080&#x27;</span>);</span><br><span class="line"><span class="comment">// onopen连接成功后触发</span></span><br><span class="line">webSocket.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功连接到websocket服务器&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// onmessage收到服务器发送的信息时触发</span></span><br><span class="line">webSocket.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// onclose与服务器连接丢失或关闭时触发</span></span><br><span class="line">webSocket.<span class="property">onclose</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接关闭&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// send发送信息到服务器</span></span><br><span class="line">webSocket.<span class="title function_">send</span>(<span class="string">&#x27;发送消息&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="pinia-的-setup-用法与补充"><a href="#pinia-的-setup-用法与补充" class="headerlink" title="pinia 的 setup 用法与补充"></a><strong>pinia 的 setup 用法与补充</strong></h1><p>参考：<a href="https://juejin.cn/post/7127506173963534344#heading-3">基本知识</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象定义数据的补充，stores/counter.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;  <span class="comment">// 注意：必须使用箭头函数</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; <span class="comment">// 注意：需要写成普通函数</span></span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123; <span class="comment">// 该函数也可以接收参数</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++ <span class="comment">// 直接使用 this</span></span><br><span class="line">      <span class="variable language_">this</span>.$patch(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123; <span class="comment">// 使用 $patch</span></span><br><span class="line">        state.<span class="property">count</span>++</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 测试在action 中 $patch 对象，$reset、$state等都可以使用（如下面的使用）</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123; <span class="comment">// 使用普通函数和箭头函数都可以，如果使用this则需要使用普通函数（不推荐使用this）</span></span><br><span class="line">    <span class="attr">double</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">count</span> * <span class="number">2</span>,</span><br><span class="line">    <span class="comment">// 也可以返回一个函数并接受传递的参数</span></span><br><span class="line">    <span class="attr">getCount</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123; <span class="comment">// 返回一个函数别忘记调用</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function">(<span class="params">num</span>) =&gt;</span> state.<span class="property">count</span> + num</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 pinia 数据 （以下是在 setup 语法的使用，vue2选项式的调用参考 pinia 文档）</span></span><br><span class="line"><span class="keyword">import</span> &#123;useCounterStore&#125; <span class="keyword">from</span> <span class="string">&#x27;@/stores/counter&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">const</span> counter = <span class="title function_">useCounterStore</span>()</span><br><span class="line">counter.<span class="property">count</span>++  <span class="comment">// 直接修改</span></span><br><span class="line">counter.$patch(&#123; <span class="attr">count</span>: counter.<span class="property">count</span> + <span class="number">1</span> &#125;) <span class="comment">// 使用$patch对象</span></span><br><span class="line">counter.$patch(<span class="function">(<span class="params">state</span>)=&gt;</span>&#123;state.<span class="property">count</span> += <span class="number">1</span>&#125;) <span class="comment">// 使用$patch函数</span></span><br><span class="line">counter.<span class="title function_">increment</span>() <span class="comment">// 使用 action</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="property">double</span>) <span class="comment">// getters 的访问使用</span></span><br><span class="line">counter.<span class="title function_">getCount</span>(<span class="number">1</span>) <span class="comment">// getters 函数传递参数</span></span><br><span class="line"><span class="keyword">const</span> &#123; count &#125; = <span class="title function_">storeToRefs</span>(counter) <span class="comment">// 使用 storeToRefs 解构数据得到 refs，避免丢失响应式，</span></span><br><span class="line"><span class="comment">// 也不能直接使用count.value修改，打印得到的是一个 undefined</span></span><br><span class="line">counter.$reset() <span class="comment">// 重置 state 数据</span></span><br><span class="line">counter.<span class="property">$state</span> = &#123; <span class="attr">count</span>: <span class="number">1</span> &#125; <span class="comment">// 更改整个 state，相当于Object.assign()</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用setup的方式定义 pinia</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>) <span class="comment">// 也支持使用 reactive 定义（不推荐，不方便重新赋值）</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count.<span class="property">value</span>++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">return</span> &#123; count, increment, doubleCount &#125; <span class="comment">// 注意：需要 return 出去</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件使用和上面的类似，组件中的修改也不需要加value，注意：使用改语法不能使用 $reset 会报错</span></span><br></pre></td></tr></table></figure><hr><h1 id="vue-动画补充"><a href="#vue-动画补充" class="headerlink" title="vue 动画补充"></a><strong>vue 动画补充</strong></h1><p>参考：<a href="https://juejin.cn/post/6919404953203277832#heading-1">Vue中transition过渡组件全掌握</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1. v-move 属性，只在 transition-group 中生效，</span></span><br><span class="line"><span class="comment">通过 name 来自定义前缀，或者 move-class 自定义 */</span></span><br><span class="line"><span class="comment">/* 2. 不使用 CSS的 class，也可使用 js 钩子钩子函数 */</span></span><br></pre></td></tr></table></figure><hr><h1 id="flex-auto与flex-1的区别"><a href="#flex-auto与flex-1的区别" class="headerlink" title="flex:auto与flex:1的区别"></a><strong>flex:auto与flex:1的区别</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flex: auto 相当于 1 1 auto，不管内容多少，是根据内容的大小来分，不是均分的（如：元素里面有文字）</span><br><span class="line">flex: 1 相当于 1 1 0%，一般都是平分空间，空间大小都一致。</span><br><span class="line">flex: auto 的 flex-basis: auto，不覆盖元素的 width 而 flex: 1 则会覆盖</span><br><span class="line">在 flex: auto 相当于有宽度，有个基准值。</span><br></pre></td></tr></table></figure><hr><h1 id="表单编辑与新增共用时表单重置的问题"><a href="#表单编辑与新增共用时表单重置的问题" class="headerlink" title="表单编辑与新增共用时表单重置的问题"></a><strong>表单编辑与新增共用时表单重置的问题</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 原因：</span></span><br><span class="line"><span class="comment">// 表单重置的逻辑是在表单 DOM 生成时，初始绑定的 form 的值（在 DOM 生成之前就有）就是后面重置的值</span></span><br><span class="line"><span class="comment">// 出现这种原因是，打开编辑后，新增打开表单时的 form 的值不是该新增所要的值（编辑每次 form DOM 渲染都绑定了值，所以编辑没有问题）</span></span><br><span class="line"><span class="comment">// 2. 解决方案：</span></span><br><span class="line"><span class="comment">// 表单关闭使用表单重置：新增与编辑一样，打开之前先赋值（或者，打开编辑时，使用新增的默认数据，在 nexttick 中赋值编辑的值）</span></span><br><span class="line"><span class="comment">// 表单关闭使用赋值为新增一样的值 （相当于新增打开给表单赋初始值）</span></span><br><span class="line"><span class="comment">// 故：最佳为新增打开时赋值form，这样都不用管关闭的逻辑</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：使用弹框时，关闭弹框表单的 DOM 没有消失，而是控制的样式。</span></span><br></pre></td></tr></table></figure><hr><h1 id="el-tree-的使用问题"><a href="#el-tree-的使用问题" class="headerlink" title="el-tree 的使用问题"></a><strong>el-tree 的使用问题</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在使用 el-tree 做权限管理时，默认选择与选择问题</span></span><br><span class="line"><span class="comment">// 设置默认选中时，如果父选中了，所有的子也会选中，如果新加了一个子就会出现问题</span></span><br><span class="line"><span class="comment">// 1. 先设置默认，获取所选中的值与接口应该保存的值比较，再将那些不该保存的值取消</span></span><br><span class="line"><span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置值</span></span><br><span class="line">    refRolePermissionTree.<span class="property">value</span>.<span class="title function_">setCheckedKeys</span>(defaultCheckedKeys.<span class="property">value</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 获取树中所有选中的值</span></span><br><span class="line">        <span class="keyword">let</span> defaultCheckAll = refRolePermissionTree.<span class="property">value</span>.<span class="title function_">getCheckedKeys</span>()</span><br><span class="line">        <span class="comment">// 通过对比树所有选中的值（defaultCheckAll）和详情返回选中的值（res.data.menuIdDtos）去取两个数组的差集</span></span><br><span class="line">        <span class="keyword">let</span> deleteArr = defaultCheckAll.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !defaultCheckedKeys.<span class="property">value</span>.<span class="title function_">some</span>(<span class="function"><span class="params">item_1</span> =&gt;</span> item_1 === item))</span><br><span class="line">        <span class="comment">// 遍历去掉不需要选中的值</span></span><br><span class="line">        deleteArr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            refRolePermissionTree.<span class="property">value</span>.<span class="title function_">setChecked</span>(item, <span class="literal">false</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 2. 设置时，先比较，不设置父的选中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意获取半选：</span></span><br><span class="line"><span class="keyword">let</span> ids = refRolePermissionTree.<span class="property">value</span>.<span class="title function_">getCheckedKeys</span>();</span><br><span class="line">ids = [...ids, ...refRolePermissionTree.<span class="property">value</span>.<span class="title function_">getHalfCheckedKeys</span>()]</span><br></pre></td></tr></table></figure><hr><h1 id="按钮权限"><a href="#按钮权限" class="headerlink" title="按钮权限"></a><strong>按钮权限</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局指令</span></span><br><span class="line"><span class="keyword">import</span> &#123; usePerms &#125; <span class="keyword">from</span> <span class="string">&quot;@/store/perms.js&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> ownPermission = []; <span class="comment">// 这里不能直接在Local Storage拿取，只会执行一次。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toolPermission</span>(<span class="params">el, permission</span>) &#123;</span><br><span class="line">  ownPermission = <span class="title function_">usePerms</span>(); <span class="comment">// 里面获取 pinia</span></span><br><span class="line">  <span class="keyword">if</span> (permission &amp;&amp; !ownPermission.<span class="property">perms</span>.<span class="title function_">includes</span>(permission)) &#123;</span><br><span class="line">    el.<span class="property">parentNode</span> &amp;&amp; el.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(el);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> permission = &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">    <span class="title function_">toolPermission</span>(el, binding.<span class="property">value</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">updated</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">    <span class="title function_">toolPermission</span>(el, binding.<span class="property">value</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; permission &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：pinia 在组件外面使用时，放在外面使用时会报错，</span></span><br><span class="line"><span class="comment">// getActivePinia was called with no active Pinia. Did you forget to install pinia</span></span><br><span class="line"><span class="comment">// 不能直接在函数外面获取 menus，不刷新就无法更新权限，设置权限后退出登录还需要刷新的bug</span></span><br></pre></td></tr></table></figure><hr><h1 id="element-plus-无限滚动报错"><a href="#element-plus-无限滚动报错" class="headerlink" title="element plus 无限滚动报错"></a><strong>element plus 无限滚动报错</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原因：需要 nextTick() 之后再去显示 DOM</span></span><br><span class="line"><span class="comment">// 解决：</span></span><br><span class="line">&lt;div</span><br><span class="line"> v-infinite-scroll=<span class="string">&quot;load&quot;</span></span><br><span class="line"> infinite-scroll-immediate=<span class="string">&quot;false&quot;</span> </span><br><span class="line"> style=<span class="string">&quot;overflow: hidden&quot;</span> v-<span class="keyword">if</span>=<span class="string">&quot;isMounted&quot;</span>&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;i in 8&quot;</span>&gt;</span>&#123;&#123; i &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"><span class="keyword">const</span> isMounted = <span class="title function_">ref</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  isMounted.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="el-popover-与-el-select-使用的问题"><a href="#el-popover-与-el-select-使用的问题" class="headerlink" title="el-popover 与 el-select 使用的问题"></a><strong>el-popover 与 el-select 使用的问题</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 el-popover 里面有 el-select 时，当选择完成后，会自动关闭同时 el-popover</span></span><br><span class="line"><span class="comment">// 解决：</span></span><br><span class="line"><span class="comment">// element plus 中在 el-select 添加 :teleported=&quot;false&quot; 即可解决</span></span><br><span class="line"><span class="comment">// element ui 可能时使用 popper-append-to-body 在 plus 中配置无效</span></span><br></pre></td></tr></table></figure><hr><h1 id="js-数组在批量删除的问题"><a href="#js-数组在批量删除的问题" class="headerlink" title="js 数组在批量删除的问题"></a><strong>js 数组在批量删除的问题</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误案例</span></span><br><span class="line"><span class="comment">// 删除数组中的 delete 为 true 的值</span></span><br><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">1</span>,<span class="attr">delete</span>: <span class="literal">true</span>&#125;,&#123;<span class="attr">id</span>: <span class="number">2</span>,<span class="attr">delete</span>: <span class="literal">true</span>&#125;,&#123;<span class="attr">id</span>: <span class="number">2</span>,<span class="attr">delete</span>: <span class="literal">true</span>&#125;,&#123;<span class="attr">id</span>: <span class="number">3</span>,<span class="attr">delete</span>: <span class="literal">true</span>&#125;</span><br><span class="line">]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    arr.<span class="title function_">splice</span>(index, <span class="number">1</span>) <span class="comment">// 这样删除会出现第二次索引错误</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确案例</span></span><br><span class="line"><span class="comment">// 1. 倒序删除</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> n = arr.<span class="property">length</span>-<span class="number">1</span> ; n&gt;=<span class="number">0</span> ; n--) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = arr[n]</span><br><span class="line">    <span class="keyword">if</span>( item.<span class="property">delete</span> ) &#123; arr.<span class="title function_">splice</span>(n, <span class="number">1</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 先找到要删除的项放在一个数组里面</span></span><br><span class="line"><span class="keyword">let</span> arrDelete = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">delete</span> )</span><br><span class="line">arrDelete.<span class="title function_">forEach</span>(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = arr.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>)=&gt;</span> item.<span class="property">id</span> == i.<span class="property">id</span> )</span><br><span class="line">    arr.<span class="title function_">splice</span>( index, <span class="number">1</span> )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 filter</span></span><br><span class="line">arr = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !item.<span class="property">delete</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="自定义表格部分问题"><a href="#自定义表格部分问题" class="headerlink" title="自定义表格部分问题"></a><strong>自定义表格部分问题</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 表格 table-layout 的 fixed 、auto 区别 </span></span><br><span class="line"><span class="comment">// fixed 也就是表格每项固定，文字多了会换行，</span></span><br><span class="line"><span class="comment">// auto 则不会,文字在同一行，回挤压其他列的宽度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 表格列设置宽度的问题，设置无效</span></span><br><span class="line"><span class="comment">// 在第一行中，设置会有效，如果是其他行（不在第一行）则无效</span></span><br><span class="line"><span class="comment">// 当第一行有 colspan 使用时候，无法设置某个列的宽度</span></span><br><span class="line"><span class="comment">// 解决：使用 colgroup 标签</span></span><br><span class="line">&lt;table&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">colgroup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">col</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">colgroup</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">// 3. 表格文字居中</span></span><br><span class="line"><span class="language-xml">// 在默认行高为 40 的情况下，其中一列换行了，设置行高 20 等会出现高度不正确</span></span><br><span class="line"><span class="language-xml">// 解决：设置 vertical-align: middle 居中即可</span></span><br></pre></td></tr></table></figure><hr><h1 id="定位遇到的问题"><a href="#定位遇到的问题" class="headerlink" title="定位遇到的问题"></a><strong>定位遇到的问题</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 固定定位元素的父元素有 translate 属性，则会相对于该父元素</span><br><span class="line"><span class="number">2.</span> 在父元素使用了 <span class="attr">overflow</span>: hidden; 子元素定位超出也会被隐藏，</span><br><span class="line">   可以采用 fixed ，元素的上线位置改变移动可以使用 translate 属性</span><br></pre></td></tr></table></figure><hr><h1 id="前端表格导出-pdf-记录"><a href="#前端表格导出-pdf-记录" class="headerlink" title="前端表格导出 pdf 记录"></a><strong>前端表格导出 pdf 记录</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 html2canvas 、jsPDF 导出 pdf</span></span><br><span class="line"><span class="comment">// 参考：https://blog.csdn.net/weixin_45021027/article/details/129335654</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 相关问题：</span></span><br><span class="line"><span class="comment">// html2canvas 时会出现 input 文字向上偏移 textarea 不能换行</span></span><br><span class="line"><span class="comment">// 解决：将 html2canvas 换成 @nidi/html2canvas</span></span><br><span class="line"><span class="comment">// 修复版本：https://github.com/niklasvh/html2canvas/pull/2132</span></span><br></pre></td></tr></table></figure><hr><h1 id="flex-布局，子元素-flex-1，overflow-auto失效"><a href="#flex-布局，子元素-flex-1，overflow-auto失效" class="headerlink" title="flex 布局，子元素 flex: 1，overflow: auto失效"></a><strong>flex 布局，子元素 flex: 1，overflow: auto失效</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参考：https://blog.csdn.net/jiladahe1997/article/details/107736576</span></span><br><span class="line"><span class="comment">// 参考：https://blog.51cto.com/u_15127637/4208524</span></span><br><span class="line"><span class="comment">// 参考：https://www.cnblogs.com/liangshaoming/p/16974731.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 要实现子元素 flex: 1，overflow: auto 效果</span></span><br><span class="line"><span class="comment">// 父元素都要写：overflow: auto 既可以实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 补充</span></span><br><span class="line"><span class="comment">// 父元素 flex:1，子元素的 flex: 1; overflow: hidden;white-space: nowrap;text-overflow:ellipsis 无效</span></span><br><span class="line"><span class="comment">// 解决：父元素设置 width: 0;</span></span><br></pre></td></tr></table></figure><hr><h1 id="浏览器滚动"><a href="#浏览器滚动" class="headerlink" title="浏览器滚动"></a><strong>浏览器滚动</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滚动到顶部方案</span></span><br><span class="line"><span class="comment">// 1. 使用 scrollTo</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">0</span>); </span><br><span class="line"><span class="comment">// 2. 注意 window 上面没有 scrollTop 属性</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 3. 使用 scrollBy</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollBy</span>(&#123;</span><br><span class="line">    <span class="attr">top</span>: -<span class="variable language_">window</span>.<span class="property">scrollY</span>,</span><br><span class="line">    <span class="attr">behavior</span>: <span class="string">&#x27;smooth&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意</span></span><br><span class="line"><span class="comment">// 1.如果一个元素不能被滚动（例如，它没有溢出，或者这个元素有一个 &quot;non-scrollable&quot; 属性）， </span></span><br><span class="line"><span class="comment">//   scrollTop 将被设置为 0。</span></span><br><span class="line"><span class="comment">// 2.设置 scrollTop的值小于 0，scrollTop 被设为 0</span></span><br><span class="line"><span class="comment">// 3.如果设置了超出这个容器可滚动的值，scrollTop 会被设为最大值。</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 前端知识记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端HTML、CSS补充</title>
      <link href="/2022/10/23/%E5%89%8D%E7%AB%AFHTML%E3%80%81CSS%E8%A1%A5%E5%85%85/"/>
      <url>/2022/10/23/%E5%89%8D%E7%AB%AFHTML%E3%80%81CSS%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文是 Pink 老师HTML CSS 教程学习后的补充记录。</p><p>参考：<a href="https://www.bilibili.com/video/BV14J4114768?p=1&vd_source=324ad3605faa1f1927a8c7fa74b35296">黑马程序员pink老师前端入门教程</a></p><hr><h1 id="HTML-补充"><a href="#HTML-补充" class="headerlink" title="HTML 补充"></a><strong>HTML 补充</strong></h1><h2 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a><strong>浏览器内核</strong></h2><table><thead><tr><th>浏览器</th><th>内核</th><th>备注</th></tr></thead><tbody><tr><td>IE</td><td>Trident</td><td>IE、猎豹安全、360极速浏览器、百度浏览器</td></tr><tr><td>firefox</td><td>Gecko</td><td>可惜这几年已经没落了，打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。</td></tr><tr><td>Safari</td><td>webkit</td><td>现在很多人错误地把 webkit 叫做 chrome内核（即使 chrome内核已经是 blink 了）。苹果感觉像被别人抢了媳妇，都哭晕在厕所里面了。</td></tr><tr><td>chrome</td><td>Chromium/Blink</td><td>在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。大部分国产浏览器最新版都采用Blink内核。二次开发</td></tr><tr><td>Opera</td><td>blink</td><td>现在跟随chrome用blink内核。</td></tr></tbody></table><hr><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a><strong>标签</strong></h2><p><strong>基本补充</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span> <span class="comment">&lt;!-- 用来说明你用的XHTML或者HTML是什么版本，告诉浏览器按照HTML5标准解析页面 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span> <span class="comment">&lt;!-- lang指定该html标签内容所用的语言，帮助翻译工具做识别等 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 字符编码，其他编码 GB2312 、BIG5 、GBK --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 排版标签</span></span><br><span class="line"><span class="comment">b 和 strong 文字以粗体显示</span></span><br><span class="line"><span class="comment">i 和 em 文字以斜体显示</span></span><br><span class="line"><span class="comment">s 和 del 文字以加删除线显示</span></span><br><span class="line"><span class="comment">u 和 ins 文字以加下划线显示</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果 href 里面地址是一个文件或者压缩包，会下载这个文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- target=&quot;_self&quot;  默认窗口弹出方式，target=&quot;_blank&quot; 新窗口弹出 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- src 与 href 的区别：src 是引入资源的 href 是跳转url的，</span></span><br><span class="line"><span class="comment">src用于替换当前元素，href用于在当前文档和引用资源之间确立联系。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 锚点定位: 目标元素上添加 id=&quot;xxx&quot; 属性，a 标签上 href=&quot;#xxx&quot; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 字符补充 --&gt;</span></span><br><span class="line">空格符号<span class="symbol">&amp;nbsp;</span></span><br><span class="line">小于符号<span class="symbol">&amp;lt;</span></span><br><span class="line">大于符号<span class="symbol">&amp;gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>绝对路径</strong></p><p>直接打开 HTML 文件绝对路径是根据盘符开始的，服务器运行根目录使用/开始（如localhost:3000）</p><p><strong>表格元素属性</strong></p><table><thead><tr><th>属性名</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>left,center,right</td><td>规定表格相对周围元素的对齐方式</td></tr><tr><td>border</td><td>1或者””</td><td>规定表格单元是否拥有边框，默认为” “，表示没有边框</td></tr><tr><td>cellpadding</td><td>像素值</td><td>规定单元边沿与其内容之间的空白，默认1像素</td></tr><tr><td>cellspacing</td><td>像素值</td><td>规定单元格之间的空白，默认2像素</td></tr><tr><td>width</td><td>像素值或百分比</td><td>规定表格的宽度</td></tr></tbody></table><ul><li>跨行合并：rowspan=“合并单元格的s个数”</li><li>跨列合并：colspan=”合并单元格的个数”</li></ul><p><strong>自定义列表标签</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dt</span>&gt;</span>关注我们<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dd</span>&gt;</span>新浪微博<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dd</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>表单</strong></p><ul><li>表单属性：action=”url地址” method=”提交方式” name=”表单域的名称”</li><li>input 元素 type=”reset” 重置表单</li><li>checked 属性主要针对于单选框和复选框</li><li>selected 属性主要争对下拉选项</li></ul><hr><h1 id="CSS-补充"><a href="#CSS-补充" class="headerlink" title="CSS 补充"></a><strong>CSS 补充</strong></h1><p><strong>杂乱补充</strong></p><ul><li>css 书写风格，使用大写的也可以（ HTML 不区分大小写），但是不推荐。</li><li>列表清除点位：list-style：none；或者list-stype-type：none；</li></ul><h2 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a><strong>字体属性</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="comment">/* 可以写多个字体（依次往后查找），如果是多个字母组成的需要使用 &#x27;&#x27;  */</span></span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Times New Roman&#x27;</span>, Times, serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 字体的复合属性写法 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: italic;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Microsoft yahe&#x27;</span>;</span><br><span class="line">    <span class="comment">/* 复合属性：简写的方式  节约代码*/</span></span><br><span class="line">    <span class="comment">/* 顺序：font-style font-weight  font-size/line-height  font-family */</span></span><br><span class="line">    <span class="attribute">font</span>: italic <span class="number">700</span> <span class="number">16px</span> <span class="string">&#x27;Microsoft yahe&#x27;</span>;</span><br><span class="line">    <span class="comment">/* 不需要设置的属性可以省略(取默认值)，但必须保留 font-size 和 font-family属性，</span></span><br><span class="line"><span class="comment">    否则 font 属性将不起作用 */</span></span><br><span class="line">    <span class="attribute">font</span>: <span class="number">20px</span> <span class="string">&#x27;Microsoft yahe&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a><strong>文本属性</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* text-decoration 属性用于装饰文本，可以给文本添加下划线，删除线，上划线等</span></span><br><span class="line"><span class="comment">none：默认  underline：下划线  overline：上划线  line-through：删除线 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* em 补充</span></span><br><span class="line"><span class="comment">子元素字体大小的em是相对于父元素字体大小</span></span><br><span class="line"><span class="comment">元素的width/height/padding/margin用em的话是相对于该元素的font-size </span></span><br><span class="line"><span class="comment">注意：不要把em当作继承父元素的字体，子元素改变了font-size就是根据自己的了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 颜色 #ffffff 简写成 #fff （前三个与后三个相同可以简写） */</span></span><br><span class="line"><span class="comment">/* 想要图片居中对齐,则是让它的父亲 p标签添加 水平居中的代码 */</span></span><br></pre></td></tr></table></figure><hr><h2 id="Emmet-语法"><a href="#Emmet-语法" class="headerlink" title="Emmet 语法"></a><strong>Emmet 语法</strong></h2><p> <strong>HTML 部分</strong></p><ol><li><p>生成标签 直接输入标签名 按tab键即可 比如 div 然后tab 键， 就可以生成 </p></li><li><p>如果想要生成多个相同标签 加上 * 就可以了 比如 div*</p></li><li><p>就可以快速生成3个div3. 如果有父子级关系的标签，可以用 &gt; 比如 ul &gt; li就可以了</p></li><li><p>如果有兄弟关系的标签，用 + 就可以了 比如 div+p</p></li><li><p>如果生成带有类名或者id名字的， 直接写 .demo 或者 #two tab 键就可以了</p></li><li><p>如果生成的div 类名是有顺序的， 可以用 自增符号 $</p></li><li><p>如果想要在生成的标签内部写内容可以用 { } 表示</p></li></ol><p><strong>CSS 部分</strong></p><ol><li><p>比如 w200 按tab 可以 生成 width: 200px;</p></li><li><p>比如 lh26px 按tab 可以生成 line-height: 26px;</p></li></ol><hr><h2 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a><strong>复合选择器</strong></h2><p><strong>伪类选择器</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 链接伪类，是利用交集选择器</span></span><br><span class="line"><span class="comment">a:link 未访问的链接</span></span><br><span class="line"><span class="comment">a:visited 已访问的链接</span></span><br><span class="line"><span class="comment">a:hover 鼠标移动到链接上</span></span><br><span class="line"><span class="comment">a:active 选定的链接 </span></span><br><span class="line"><span class="comment">注意：一般按照上面的顺序写法，否者会样式无效。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* :focus选择器 用于input元素</span></span><br><span class="line"><span class="comment">input:focus &#123;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h2 id="CSS-元素显示模式"><a href="#CSS-元素显示模式" class="headerlink" title="CSS 元素显示模式"></a><strong>CSS 元素显示模式</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 文字类的元素内不能使用块级元素 （h1-h6，p）</span></span><br><span class="line"><span class="comment">链接里面不能再放链接</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在行内元素中有几个特殊的标签 —— &lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;，它们同时具有块元素和行内元素的特点</span></span><br><span class="line"><span class="comment">①：和相邻行内元素在一行上，但是他们之间会有空白缝隙。一行可以显示多个(行内元素特点)</span></span><br><span class="line"><span class="comment">②：默认宽度就是它本身内容的宽度(行内元素特点)</span></span><br><span class="line"><span class="comment">③：高度，行高，外边距以及内边距都可以控制(块级元素特点)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h2 id="CSS-背景"><a href="#CSS-背景" class="headerlink" title="CSS 背景"></a><strong>CSS 背景</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-color</span>: transparent <span class="comment">/* 默认值 透明 */</span></span><br><span class="line">background-image : none | <span class="built_in">url</span>(<span class="string">url</span>)  <span class="comment">/* 背景图片（）设置成 none 或者 地址 */</span></span><br><span class="line">background-repeat: repeat| no-repeat| repeat-x| repeat-y <span class="comment">/* 背景图片平铺 */</span></span><br><span class="line">background-position: x y <span class="comment">/* 背景图片位置 */</span></span><br><span class="line"> <span class="comment">/* </span></span><br><span class="line"><span class="comment"> 1.参数是方位名词：top、center、bottom、left、right </span></span><br><span class="line"><span class="comment"> （前后顺序无关，只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐） </span></span><br><span class="line"><span class="comment"> 2.参数是精准单位：第一个x坐标，第二个y坐标。只指定一个，那该一定是x坐标，另一个默认垂直居中。</span></span><br><span class="line"><span class="comment"> 3.使用百分比：x轴上0%相当于left，100%相当于right（注意：并不是单一的当前元素宽高的百分比，</span></span><br><span class="line"><span class="comment"> 如果以背景图单位左上角参考，相对的百分比应该是当前元素的宽减去背景图的宽）</span></span><br><span class="line"><span class="comment"> 4.混合单位：第一个值是x坐标，第二个值是y坐标</span></span><br><span class="line"><span class="comment"> */</span>    </span><br><span class="line">background-attachment: scroll | fixed <span class="comment">/* 背景图片固定默认值scroll */</span></span><br><span class="line">background-size: px | 当前元素百分比 | cover | contain | auto <span class="comment">/* 后面补充 */</span></span><br><span class="line"><span class="comment">/* 背景的复合写法</span></span><br><span class="line"><span class="comment">background: background-color background-image background-repeat background-attachment</span></span><br><span class="line"><span class="comment">            background-position/background-size background-origin background-clip</span></span><br><span class="line"><span class="comment">.example &#123;</span></span><br><span class="line"><span class="comment">    background: aquamarine</span></span><br><span class="line"><span class="comment">    url(img.png)</span></span><br><span class="line"><span class="comment">    no-repeat</span></span><br><span class="line"><span class="comment">    scroll</span></span><br><span class="line"><span class="comment">    center center / 50%</span></span><br><span class="line"><span class="comment">    content-box</span></span><br><span class="line"><span class="comment">    content-box;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">属性值之一缺失并不要紧，只要按照此顺序设置其他值即可（如不写 background-attachment ）。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h2 id="CSS-三大特性"><a href="#CSS-三大特性" class="headerlink" title="CSS 三大特性"></a><strong>CSS 三大特性</strong></h2><ol><li><p>层叠性：相同选择器设置相同的样式，此时一个样式就会覆盖另一个冲突的样式。</p></li><li><p>继承性：子继承父元素部分样式，font家族样式（注意继承的样式优先度最低，会被浏览器默认样式覆盖，如：a标签的color属性），行高可不写单位相对于当前元素的字体大小。</p></li><li><p>优先级：权重来比较。</p><p>important &gt; 内联 &gt; ID &gt; 类 &gt; 标签 | 伪类 | 属性选择 &gt; 伪对象 &gt; 继承</p><p>注意：权重计算不会出现进位，无论多个 class 都不会比一个 id 大</p><p>继承的权重为0</p></li></ol><hr><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a><strong>盒子模型</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 边框：下面的调换顺序无影响，border-top 单独设置</span></span><br><span class="line"><span class="comment">border : borde-width || border-style || border-color</span></span><br><span class="line"><span class="comment">控制浏览器绘制表格边框的方式，它控制相邻单元格的边框，合并边框</span></span><br><span class="line"><span class="comment">border-collapse : collapse;</span></span><br><span class="line"><span class="comment">box-sizing: border-box; 元素的总高度和宽度包含内边距和边框(padding 与 border)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* padding 内边距</span></span><br><span class="line"><span class="comment">如果盒子本身没有指定width或height属性，则此时padding则不会撑开盒子没有指定的宽或高的大小</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* margin 外边距</span></span><br><span class="line"><span class="comment">1.外边距塌陷问题：相邻块元素垂直外边距的合并，嵌套块元素垂直外边距的塌陷</span></span><br><span class="line"><span class="comment">嵌套元素解决：可以为父元素定义上边框，可以为父元素定义上内边距，可以为父元素添加 overflow: hidden</span></span><br><span class="line"><span class="comment">还有其他方法，比如浮动、固定、绝对定位的盒子不会有塌陷问题。后面会进行总结。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 行内元素设置 上下margin不生效 */</span></span><br></pre></td></tr></table></figure><hr><h2 id="CSS-圆角"><a href="#CSS-圆角" class="headerlink" title="CSS 圆角"></a><strong>CSS 圆角</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 边框圆角，设置一个矩形左右圆角（高度一般）*/</span></span><br><span class="line"><span class="attribute">border-radius</span>:length; <span class="comment">/* 一个代表全部；四个代表左上角，右上角，右下角，左下角；两个则是对角*/</span></span><br><span class="line"><span class="attribute">border-top-left-radius</span>:</span><br><span class="line">border-top-right-radius:</span><br><span class="line">border-bottom-right-radius:</span><br><span class="line">border-bottom-left-radius:</span><br><span class="line"><span class="comment">/* 圆角的水半径于垂直半径分别相对于宽高 */</span></span><br><span class="line">border-radius: <span class="number">2em</span> <span class="number">1em</span> <span class="number">4em</span> / <span class="number">0.5em</span> <span class="number">3em</span>; </span><br><span class="line"><span class="comment">/* 等价于 */</span></span><br><span class="line"><span class="attribute">border-top-left-radius</span>: <span class="number">2em</span> <span class="number">0.5em</span>;</span><br><span class="line"><span class="attribute">border-top-right-radius</span>: <span class="number">1em</span> <span class="number">3em</span>;</span><br><span class="line"><span class="attribute">border-bottom-right-radius</span>: <span class="number">4em</span> <span class="number">0.5em</span>;</span><br><span class="line"><span class="attribute">border-bottom-left-radius</span>: <span class="number">1em</span> <span class="number">3em</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="盒子阴影与文字阴影"><a href="#盒子阴影与文字阴影" class="headerlink" title="盒子阴影与文字阴影"></a><strong>盒子阴影与文字阴影</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">h-shadow 必需。水平阴影的位置，允许负值</span></span><br><span class="line"><span class="comment">v-shadow 必需。垂直阴影的位置，允许负值</span></span><br><span class="line"><span class="comment">blur 可选。模糊距离。（理解为阴影的虚实）</span></span><br><span class="line"><span class="comment">spread 可选，阴影的尺寸。</span></span><br><span class="line"><span class="comment">color 可选，阴影的颜色。</span></span><br><span class="line"><span class="comment">inset 可选，将外部阴影（outset）改为内部阴影</span></span><br><span class="line"><span class="comment">注意：默认的是外阴影（outset），但是不可以在后面写这个单词，否则导致阴影无效</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">text-shadow</span>: h-shadow v-shadow blur color</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">h-shadow 必需。水平阴影的位置，允许负值</span></span><br><span class="line"><span class="comment">v-shadow 必需。垂直阴影的位置，允许负值</span></span><br><span class="line"><span class="comment">blur 可选。模糊距离</span></span><br><span class="line"><span class="comment">color 可选，阴影的颜色。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h2 id="CSS-浮动"><a href="#CSS-浮动" class="headerlink" title="CSS 浮动"></a><strong>CSS 浮动</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">设置 float 后元素变成类似于inline-block 不会继承父元素的宽</span></span><br><span class="line"><span class="comment">注意：浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的标准流</span></span><br><span class="line"><span class="comment">（三个div，第一个左浮动、第二个标准流、第三个左浮动，第三个不会影响第二个所以不会于第一个一起挨着）</span></span><br><span class="line"><span class="comment">清除浮动：</span></span><br><span class="line"><span class="comment">1.额外标签法(隔墙法) &lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">2.父级添加overflow属性方法，将其属性值设置为hidden,auto或scroll</span></span><br><span class="line"><span class="comment">3.使用after伪元素清除浮动</span></span><br><span class="line"><span class="comment">4.使用双伪元素清除浮动</span></span><br><span class="line"><span class="comment">.clearfix:before,.clearfix:after&#123;</span></span><br><span class="line"><span class="comment">   content:&quot;&quot;;</span></span><br><span class="line"><span class="comment">   display:table;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">.clearfix:after &#123;</span></span><br><span class="line"><span class="comment">     clear:both;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h2 id="PS-补充"><a href="#PS-补充" class="headerlink" title="PS 补充"></a><strong>PS 补充</strong></h2><p>PS 有很多的切图方式：图层切图、切片切图、PS 插件切图等。</p><ul><li>图层切图：右击图层 ➡导出 PNG 切片，多个图片按住Shift选中 后Ctrl+E合并图层后再导出。</li><li>切片切图</li><li>插件切图：<a href="http://www.cutterman.cn/zh/cutterman">Cutterman官网</a>，PS 必须是完整版，不能是绿色版。</li></ul><hr><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a><strong>定位</strong></h2><ul><li><p>默认的值：position:static。</p></li><li><p>绝对定位的祖先级没有非static的情况下，相对于浏览器窗口而非body。</p></li><li><p>绝对定位与固定定位是脱离文档流的。</p></li><li><p>固定定位小技巧，固定在版心右侧位置：</p><p> 1.让固定定位的盒子 left: 50% 走到浏览器可视区（也可以看做版心）的一半位置。</p><p> 2.让固定定位的盒子 margin-left 版心宽度的一半距离。多走版心宽度的一半位置。</p></li><li><p>粘性定位：position:sticky 相对于浏览器的可视窗口、占有原来的位置、必须添加top，left，right，bottom其中一个才有效。</p></li><li><p>浮动元素、绝对定位(固定定位)元素都不会触发外边距合并的问题。</p></li><li><p>行内元素添加绝对或者固定定位，可以直接设置高度和宽度</p></li><li><p>块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。</p></li></ul><hr><h2 id="界面样式"><a href="#界面样式" class="headerlink" title="界面样式"></a><strong>界面样式</strong></h2><h3 id="鼠标样式cursor"><a href="#鼠标样式cursor" class="headerlink" title="鼠标样式cursor"></a><strong>鼠标样式cursor</strong></h3><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>default</td><td>小白，默认</td></tr><tr><td>pointer</td><td>小手</td></tr><tr><td>move</td><td>移动</td></tr><tr><td>text</td><td>文本</td></tr><tr><td>not-allowed</td><td>禁止</td></tr></tbody></table><h3 id="轮廓线outline"><a href="#轮廓线outline" class="headerlink" title="轮廓线outline"></a><strong>轮廓线outline</strong></h3><p>input添加outline:0; 或者outline: none;样式后，就可以去掉默认的蓝色边框</p><h3 id="防止拖拽文本域"><a href="#防止拖拽文本域" class="headerlink" title="防止拖拽文本域"></a><strong>防止拖拽文本域</strong></h3><p>textarea { resize: none; }</p><h3 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a><strong>vertical-align</strong></h3><ul><li>使用场景：经常用于设置图片或者表单（行内块元素）和文字垂直对齐。</li><li>官方解释：用于设置一个元素的垂直对齐方式，但是它只针对于行内元素或者行内块元素有效</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vertical-align: baseline | top | middle | bottom</span><br></pre></td></tr></table></figure><h3 id="图片底侧空白缝隙解决"><a href="#图片底侧空白缝隙解决" class="headerlink" title="图片底侧空白缝隙解决"></a><strong>图片底侧空白缝隙解决</strong></h3><ul><li>图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐（给图片加边框就可以看见）</li></ul><p>主要解决办法有两种：</p><ol><li>给图片添加 vertical-align: middle | top | bottom 等 （推荐）</li><li>把图片转换为块级元素 display:block 因为块级元素不会有 vertical-align 属性</li></ol><h3 id="溢出文字省略"><a href="#溢出文字省略" class="headerlink" title="溢出文字省略"></a><strong>溢出文字省略</strong></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1.先强制一行内显示文本 */</span></span><br><span class="line"><span class="attribute">white-space</span>: nowrap;  <span class="comment">/*默认 normal 是自动换行，nowrap是强制一行显示文本*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.超出的部分隐藏 */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.文字用省略号替代超出的部分*/</span></span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="comment">/*ellipsis:省略号*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----------*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="comment">/* 弹性伸缩盒子模型显示 */</span></span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line"><span class="comment">/* 限制在一个块元素显示的文本的行数 */</span></span><br><span class="line">-webkit-<span class="selector-tag">line</span>-clamp: <span class="number">2</span>;</span><br><span class="line"><span class="comment">/* 设置或检索伸缩盒对象的子元素的排列方式 */</span></span><br><span class="line">-webkit-<span class="attribute">box-orient</span> : vertical;</span><br></pre></td></tr></table></figure><h3 id="直角三角形"><a href="#直角三角形" class="headerlink" title="直角三角形"></a><strong>直角三角形</strong></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 1.只保留右边的边框有颜色 */</span></span><br><span class="line">    <span class="attribute">border-color</span>: transparent red transparent transparent;</span><br><span class="line">    <span class="comment">/* 2. 样式都是solid */</span></span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="comment">/* 3. 上边框宽度要大， 右边框 宽度稍小， 其余的边框该为 0 */</span></span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">100px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a><strong>HTML5</strong></h1><h2 id="新增标签"><a href="#新增标签" class="headerlink" title="新增标签"></a><strong>新增标签</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;header&gt;：头部标签</span><br><span class="line">&lt;nav&gt;：导航标签</span><br><span class="line">&lt;article&gt;：内容标签</span><br><span class="line">&lt;section&gt;：定义文档某个区域</span><br><span class="line">&lt;aside&gt;：侧边栏标签</span><br><span class="line">&lt;footer&gt;：尾部标签</span><br><span class="line">&lt;video&gt;：视频标签，支持mp4、WebM、ogg三种视频格式（浏览器基本都支持mp4）</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>视频就绪自动播放(谷歌浏览器需要添加muted来解决自动播放问题)</td></tr><tr><td>controls</td><td>controls</td><td>向用户显示播放控件</td></tr><tr><td>width</td><td>pixels(像素)</td><td>设置播放器宽度</td></tr><tr><td>height</td><td>pixels(像素)</td><td>设置播放器高度</td></tr><tr><td>loop</td><td>loop</td><td>播放完是否继续播放该视频,循环播放</td></tr><tr><td>preload</td><td>auto(预先加载视频)none(不应加载视频)</td><td>规定是否预加载视频(如果有了autoplay 就忽略该属性)</td></tr><tr><td>src</td><td>url</td><td>视频url的地址</td></tr><tr><td>poster</td><td>lmgurl</td><td>加载等待的画面图片</td></tr><tr><td>muted</td><td>muted</td><td>静音播放</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 谷歌浏览器禁用了自动播放（需要开启muted静音才可以） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;media/mi.mp4&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span> <span class="attr">muted</span>=<span class="string">&quot;muted&quot;</span> <span class="attr">loop</span>=<span class="string">&quot;loop&quot;</span> <span class="attr">poster</span>=<span class="string">&quot;media/mi9.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 source 添加不同视频格式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span> <span class="attr">autoplay</span> <span class="attr">muted</span> <span class="attr">loop</span> <span class="attr">poster</span>=<span class="string">&quot;./media/pig.jpg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./media/video.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./media/video.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span>&gt;</span>：音频标签，支持mp3、Wav、ogg三种格式（浏览器基本都支持mp3）</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;文件地址&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;media/music.mp3&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意：在 chrome 浏览器中已经禁用了 autoplay 属性 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 因为不同浏览器支持不同的格式，也可采取多个source --&gt;</span></span><br></pre></td></tr></table></figure><p><strong>新增input</strong></p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>type=“email”</td><td>限制用户输入必须为Email类型</td></tr><tr><td>type=“url”</td><td>限制用户输入必须为URL类型</td></tr><tr><td>type=“data”</td><td>限制用户输入必须为日期类型</td></tr><tr><td>type=“time”</td><td>限制用户输入必须为时间类型</td></tr><tr><td>type=“month”</td><td>限制用户输入必须为月类型</td></tr><tr><td>type=“week”</td><td>限制用户输入必须为周类型</td></tr><tr><td>type=”number”</td><td>限制用户输入必须为数字类型</td></tr><tr><td>type=”tel”</td><td>手机号码</td></tr><tr><td>type=”search”</td><td>搜索框</td></tr><tr><td>type=“color”</td><td>生成一个颜色选择表单</td></tr></tbody></table><p><strong>新增表单属性</strong></p><table><thead><tr><th>属性</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>required</td><td>required</td><td>表单拥有该属性表示其内容不能为空，必填</td></tr><tr><td>placeholder</td><td>提示文本</td><td>表单的提示信息，存在默认值将不显示</td></tr><tr><td>autofocus</td><td>autofocus</td><td>自动聚焦属性，页面加载完成自动聚焦到指定表单</td></tr><tr><td>autocomplete</td><td>off/on</td><td>当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项，默认已经打开。如autocomplete=“on” ,关闭autocomplete=“off”，需要放在表单内，同时加上name属性，同时成功提交</td></tr><tr><td>multiple</td><td>multiple</td><td>可以多选文件提示</td></tr></tbody></table><hr><h1 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a><strong>CSS3</strong></h1><h2 id="新增选择器"><a href="#新增选择器" class="headerlink" title="新增选择器"></a><strong>新增选择器</strong></h2><p><strong>属性选择器</strong></p><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E[att]</td><td>选择具有att属性的E元素</td></tr><tr><td>E[att=“val”]</td><td>选择具有att属性且属性值等于val的E元素</td></tr><tr><td>E[att^=“val”]</td><td>匹配具有att属性且值以val开头的E元素</td></tr><tr><td>E[att$=“val”]</td><td>匹配具有att属性且值以val结尾的E元素</td></tr><tr><td>E[att*=“val”]</td><td>匹配具有att属性且值中含有val的E元素</td></tr></tbody></table><p>注意：类选择器，属性选择器，伪类选择器，权重为10</p><p><strong>伪类选择器</strong></p><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E:first-child</td><td>匹配父元素中的第一个子元素E</td></tr><tr><td>E:last-child</td><td>匹配父元素中最后一个E元素</td></tr><tr><td>E:nth-child(n)</td><td>匹配父元素中的第n个子元素E</td></tr><tr><td>E:first-of-type</td><td>指定类型E的第一个</td></tr><tr><td>E:last-of-type</td><td>指定类型E的最后一个</td></tr><tr><td>E:nth-of-type（n）</td><td>指定类型E的第n个</td></tr></tbody></table><p>注意：</p><ul><li>n 是从0开始的，前三个相对于父元素（所有元素都排列）、后面的则指定盒子排列</li><li>nth-child 对父元素里面所有孩子排序选择(序号是固定的)，先找到第n个孩子，然后看看是否和E匹配</li><li>nth-of-type 对父元素里面指定子元素进行排序选择，先去匹配E,然后再根据E 找第n个孩子</li><li>伪类选择器的权重为10</li></ul><p><strong>伪元素选择器</strong></p><ul><li>before 和 after 必须有 content 属性</li><li>before 在内容前面，after 在内容后面</li><li>before 和 after 创建的是一个元素，但是属于行内元素</li><li>创建出来的元素在 Dom 中查找不到，所以称为伪元素</li><li>伪元素和标签选择器一样，权重为 1</li></ul><hr><h2 id="filter背景滤镜"><a href="#filter背景滤镜" class="headerlink" title="filter背景滤镜"></a><strong>filter背景滤镜</strong></h2><p>CSS属性将模糊或颜色偏移等图形效果应用于元素(图片变模糊)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="comment">/* blur 是一个函数，小括号里面的数值越大，图片越模糊，注意数值要加px单位 */</span></span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="transition-过渡动画"><a href="#transition-过渡动画" class="headerlink" title="transition 过渡动画"></a><strong>transition 过渡动画</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">transition: 要过渡的属性 花费时间 运动曲线 何时开始</span><br><span class="line">运动曲线：默认是ease(可以省略)，单位是秒(必须写单位)</span><br><span class="line">何时开始：可以设置延迟触发事件，默认是0s(可以省略)</span><br></pre></td></tr></table></figure><hr><h2 id="transform-变形"><a href="#transform-变形" class="headerlink" title="transform 变形"></a><strong>transform</strong> <strong>变形</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注意：对行内标签没有效果 */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(x, y)</span><br><span class="line">transform: <span class="built_in">translateX</span>(n)</span><br><span class="line">transfrom: <span class="built_in">translateY</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 旋转 ratate</span></span><br><span class="line"><span class="comment">rotate 里面跟度数，单位是 deg 比如 rotate(45deg)</span></span><br><span class="line"><span class="comment">角度为正时，顺时针，负时，为逆时针</span></span><br><span class="line"><span class="comment">默认旋转的中心点是元素的中心点 */</span></span><br><span class="line">transform: <span class="built_in">rotate</span>(度数)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置元素转换的中心点 transform-origin</span></span><br><span class="line"><span class="comment">注意后面的参数x 和 y 用空格隔开</span></span><br><span class="line"><span class="comment">x y 默认转换的中心点是元素的中心点(50% 50%)</span></span><br><span class="line"><span class="comment">还可以给x y 设置 像素或者方位名词(top bottom left right center)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">transform-origin: x y;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注意其中的x和y用逗号分割</span></span><br><span class="line"><span class="comment">transform:scale(1,1): 宽和高都放大一倍，相当于没有放大</span></span><br><span class="line"><span class="comment">transform:scale(2,2)：宽和高都放大了2倍</span></span><br><span class="line"><span class="comment">transform:scale(2)：只写一个参数，第二个参数则和第一个参数一样，相当于 scale(2,2)</span></span><br><span class="line"><span class="comment">transform:scale(0.5,0.5)：缩小</span></span><br><span class="line"><span class="comment">sacle缩放最大的优势：可以设置转换中心点缩放，默认以中心点缩放的，而且不影响其他盒</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(x,y);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">其顺序会影响转换的效果(先旋转会改变坐标轴方向)</span></span><br><span class="line"><span class="comment">当我们同时有位移和其他属性时候，记得要将位移放到最前面</span></span><br><span class="line"><span class="comment">transform:translate() rotate() scale() 移动-旋转-缩放</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h2 id="animation-动画"><a href="#animation-动画" class="headerlink" title="animation 动画"></a><strong>animation 动画</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line">   <span class="number">0%</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="number">100%</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>动画常用属性</strong></p><table><thead><tr><th><strong>属性</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>@keyframes</td><td>规定动画。</td></tr><tr><td>animation</td><td>所有动画属性的简写属性，除了animation-play-state属性。</td></tr><tr><td>animation-name</td><td>规定@keyframes动画的名称。（必须的）</td></tr><tr><td>animation-duration</td><td>规定动画完成一个周期所花费的秒或毫秒，默认是0。（必须的）</td></tr><tr><td>animation-timing-function</td><td>规定动画的速度曲线，默认是“ease”。</td></tr><tr><td>animation-delay</td><td>规定动画何时开始，默认是0。</td></tr><tr><td>animation-iteration-count</td><td>规定动画被播放的次数，默认是1，还有infinite</td></tr><tr><td>animation-direction</td><td>规定动画是否在下一周期逆向播放，默认是“normal“,alternate逆播放</td></tr><tr><td>animation-play-state</td><td>规定动画是否正在运行或暂停。默认是”running”,还有”paused”。</td></tr><tr><td>animation-fill-mode</td><td>规定动画结束后状态，保持forwards回到起始backwards</td></tr></tbody></table><p><strong>animation-timing-function 的值</strong></p><table><thead><tr><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>linear</td><td>动画从头到尾的速度是相同的。匀速</td></tr><tr><td>ease</td><td>默认。动画以低速开始，然后加快，在结束前变慢。</td></tr><tr><td>ease-in</td><td>动画以低速开始。</td></tr><tr><td>ease-out</td><td>动画以低速结束。</td></tr><tr><td>ease-in-out</td><td>动画以低速开始和结束。</td></tr><tr><td>steps()</td><td>指定了时间函数中的间隔数量（步长）</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">animation：动画名称 持续时间 运动曲线  何时开始  播放次数  是否反方向  动画起始或者结束的状态</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">animation</span>: myfirst <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate;</span><br><span class="line"><span class="comment">/* 添加多个动画使用,隔开 */</span></span><br><span class="line"><span class="attribute">animation</span>：xxx,xxx;</span><br></pre></td></tr></table></figure><hr><h2 id="3D-转换"><a href="#3D-转换" class="headerlink" title="3D 转换"></a><strong>3D 转换</strong></h2><ul><li>translform:translateX(100px)：仅仅是在x轴上移动</li><li>translform:translateY(100px)：仅仅是在Y轴上移动</li><li>translform:translateZ(100px)：仅仅是在Z轴上移动（注意：translateZ一般用px单位）</li><li>transform:translate3d(x,y,z)：其中 x、y、z 分别指要移动的轴的方向的距离</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* translate3d */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>) <span class="built_in">translateY</span>(<span class="number">100px</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line"></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">100px</span>, <span class="number">100px</span>, <span class="number">100px</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 透视 perspective</span></span><br><span class="line"><span class="comment">近大远小，单位是像素（值越小就越近观察越大，有translateZ盒子大小才变化、rotate3d等才会生效）</span></span><br><span class="line"><span class="comment">添加透视后translateZ越大观察的就越大</span></span><br><span class="line"><span class="comment">透视写在被观察元素的父盒子上面的 */</span></span><br><span class="line"></span><br><span class="line">transform: <span class="built_in">rotateX</span>(<span class="number">45deg</span>) ：沿着X轴正方向旋转<span class="number">45</span>度</span><br><span class="line">transform: <span class="built_in">rotateY</span>(<span class="number">45deg</span>) ：沿着Y轴正方向旋转<span class="number">45</span>度</span><br><span class="line">transform: <span class="built_in">rotateZ</span>(<span class="number">45deg</span>) ：沿着Z轴正方向旋转<span class="number">45</span>度</span><br><span class="line">transform: <span class="built_in">rotate3d</span>(x,y,z,deg) ：沿着自定义轴旋转 deg为角度(了解即可)</span><br><span class="line"><span class="comment">/*沿着X轴旋转45deg*/</span></span><br><span class="line">transform: <span class="built_in">rotate3d</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">45deg</span>) </span><br><span class="line"><span class="comment">/*沿着对角线旋转45deg*/</span></span><br><span class="line">transform: <span class="built_in">rotate3d</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">45deg</span>) </span><br><span class="line"><span class="comment">/* 添加了旋转后给父元素加上透视会有立体感效果会更好，如 perspective:500px */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">左手的手拇指指向 x轴的正方向，其余手指的弯曲方向就是该元素沿着x轴旋转的方向</span></span><br><span class="line"><span class="comment">左手的手拇指指向 y轴的正方向，其余手指的弯曲方向就是该元素沿着y轴旋转的方向（正值）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3D 呈现</span></span><br><span class="line"><span class="comment">控制子元素是否开启三维立体环境</span></span><br><span class="line"><span class="comment">代码写给父级，但是影响的是子盒子</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">transform-style: flat （子元素不开启<span class="number">3</span>d立体空间 默认的） | preserve-<span class="number">3</span>d （子元素开启立体空间）</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 一般3d效果，都是要加透视与3D呈现这两者个属性 */</span></span><br></pre></td></tr></table></figure><hr><h1 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a><strong>移动端</strong></h1><h2 id="视口viewport"><a href="#视口viewport" class="headerlink" title="视口viewport"></a><strong>视口viewport</strong></h2><p><strong>布局视口layout viewport</strong></p><ul><li>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题。</li><li>iOS, Android基本都将这个视口分辨率设置为 980px，所以PC上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。</li></ul><p><strong>视觉视口 visual viewport</strong></p><ul><li>字面意思，它是用户正在看到的网站的区域。注意：是网站的区域。</li><li>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。</li></ul><p><strong>理想视口 ideal viewport</strong></p><ul><li>为了使网站在移动端有最理想的浏览和阅读宽度而设定</li><li>理想视口，对设备来讲，是最理想的视口尺寸</li><li>需要手动添写meta视口标签通知浏览器操作</li><li>meta视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就多宽。</li></ul><hr><h2 id="meta视口标签"><a href="#meta视口标签" class="headerlink" title="meta视口标签"></a><strong>meta视口标签</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no,initial-scale=1.0, </span><br><span class="line">maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br></pre></td></tr></table></figure><p>content 的属性</p><table><thead><tr><th>属性</th><th>解释说明</th></tr></thead><tbody><tr><td>width</td><td>宽度设置的是viewport宽度，可以设置device-width特殊值(宽度是设备宽度)</td></tr><tr><td>initial-scale</td><td>初始缩放比，大于0的数字</td></tr><tr><td>maximum-scale</td><td>最大缩放比，大于0的数字</td></tr><tr><td>minimum-scale</td><td>最小缩放比，大于0的数字</td></tr><tr><td>user-scalable</td><td>用户是否可以缩放，yes或no（1或0）</td></tr></tbody></table><hr><h2 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a><strong>二倍图</strong></h2><p><strong>物理像素和物理像素比</strong></p><ul><li>物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了,比如苹果6\7\8 是 750* 1334</li><li>我们开发时候的1px 不是一定等于1个物理像素的</li><li>PC端页面，1个px 等于1个物理像素的，但是移动端就不尽相同</li><li>一个px的能显示的物理像素点的个数，称为物理像素比或屏幕像素比</li><li>PC端 和 早前的手机屏幕 / 普通手机屏幕: 1CSS像素 = 1 物理像素的</li></ul><p>我们准备的图片，比我们实际需要的大小大2倍，这种方式就是二倍图</p><hr><h2 id="CSS初始化-normalize-css"><a href="#CSS初始化-normalize-css" class="headerlink" title="CSS初始化 normalize.css"></a><strong>CSS初始化 normalize.css</strong></h2><p>官网地址：<a href="http://necolas.github.io/normalize.css/">http://necolas.github.io/normalize.css/</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*CSS3盒子模型*/</span></span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">-webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*点击高亮我们需要清除 设置为transparent 完成透明*/</span></span><br><span class="line">-webkit-tap-highlight-<span class="attribute">color</span>: transparent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/</span></span><br><span class="line">-webkit-<span class="attribute">appearance</span>: none;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*禁用长按页面时的弹出菜单*/</span></span><br><span class="line"><span class="selector-tag">img</span>,<span class="selector-tag">a</span> &#123; </span><br><span class="line">    -webkit-touch-callout: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a><strong>flex 布局</strong></h2><ul><li>flex 是 flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局。</li><li>当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</li></ul><hr><h2 id="背景渐变"><a href="#背景渐变" class="headerlink" title="背景渐变"></a><strong>背景渐变</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image: linear-gradient(to bottom, #e1f0f0, #1f99b0);</span><br></pre></td></tr></table></figure><p><strong>值</strong></p><table><thead><tr><th><strong>角度</strong></th><th><strong>英文</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>0deg</td><td>to top</td><td>从下向上</td></tr><tr><td>90deg</td><td>to right</td><td>从左向右</td></tr><tr><td>180deg</td><td>to bottom</td><td>从上向下</td></tr><tr><td>270deg</td><td>to left</td><td>从右向左</td></tr><tr><td></td><td>to top left</td><td>右下角到左上角</td></tr><tr><td></td><td>to top right</td><td>左下角到右上角</td></tr></tbody></table><hr><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a><strong>媒体查询</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> mediatype <span class="keyword">and</span>|<span class="keyword">not</span>|<span class="keyword">only</span>(media feature)&#123;</span><br><span class="line">    CSS-<span class="selector-tag">code</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.mediatype 媒体类型：</span></span><br><span class="line"><span class="comment">（all用于所有设备，print用于打印机和打印预览，screen用于电脑屏幕、平板电脑、智能手机等）</span></span><br><span class="line"><span class="comment">2.关键字：</span></span><br><span class="line"><span class="comment">（and：可以将多个媒体特性连接到一起，相当于“且”的意思。</span></span><br><span class="line"><span class="comment">not：排除某个媒体类型，相当于“非”的意思，可以省略。</span></span><br><span class="line"><span class="comment">only：指定某个特定的媒体类型，可以省略。）</span></span><br><span class="line"><span class="comment">3.媒体特性（width、max-width、min-width）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* link 媒体引入 */</span></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;mediatype and|not|only (media feature)&quot; href=&quot;mystylesheet<span class="selector-class">.css</span>&quot;&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="rem-布局"><a href="#rem-布局" class="headerlink" title="rem 布局"></a><strong>rem 布局</strong></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用 scss 自动计算</span></span><br><span class="line"><span class="comment">注意：单独除法无效果需要添加括号</span></span><br><span class="line"><span class="comment">p &#123;</span></span><br><span class="line"><span class="comment">    font: 10px/2px;</span></span><br><span class="line"><span class="comment">    font: (10px/2px);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">编译后</span></span><br><span class="line"><span class="comment">p &#123;</span></span><br><span class="line"><span class="comment">    font: 10px/2px;</span></span><br><span class="line"><span class="comment">    font: 5px;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* flexible.js 使用</span></span><br><span class="line"><span class="comment">flexible 中将页面画分为 10 等份，所以 10rem 应该是设计稿的宽度</span></span><br><span class="line"><span class="comment">其他的px转成rem为：当前宽度 / (设计稿的高度/10)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 超过了 750px （flexible中自定义rem大小）*/</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">750px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">75px</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
          <category> 其他 </category>
          
          <category> HTML </category>
          
          <category> 前端知识记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
            <tag> 前端知识记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript补充</title>
      <link href="/2022/10/12/JavaScript%E8%A1%A5%E5%85%85/"/>
      <url>/2022/10/12/JavaScript%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要记录博主遇到的JavaScrprt的补充知识。</p><hr><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a><strong>Ajax</strong></h1><p>参考：<a href="https://www.bilibili.com/video/BV1WC4y1b78y/?spm_id_from=333.337.search-card.all.click&vd_source=324ad3605faa1f1927a8c7fa74b35296">3小时Ajax入门到精通</a>    <a href="https://blog.csdn.net/weixin_44972008/article/details/113772348">CSDN</a></p><h2 id="AJAX-简介"><a href="#AJAX-简介" class="headerlink" title="AJAX 简介"></a><strong>AJAX 简介</strong></h2><p>​        异步的 JS 和 XML(AsynchronousJavaScript And XML)，浏览通过 Ajax 向服务器发送异步请求，可以无刷新获取数据。</p><ul><li>优点：无需刷新页面与服务器端进行通信、允许你根据用户事件来更新部分页面内容</li><li>缺点：没有浏览历史不能回退、存在跨域问题、SEO 不友好</li></ul><hr><h2 id="XML-简介"><a href="#XML-简介" class="headerlink" title="XML 简介"></a><strong>XML 简介</strong></h2><p>​        可扩展标记语言，和 HTML 类似，但 XML 中没有预定义标签，用来表示一些数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用 XML 来表示 一个学生的信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- XML 已被 JSON 取代 --&gt;</span></span><br><span class="line">&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="HTTP相关问题-MDN文档"><a href="#HTTP相关问题-MDN文档" class="headerlink" title="HTTP相关问题  MDN文档"></a><strong>HTTP相关问题</strong>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview"><strong>MDN文档</strong></a></h2><ul><li><p><strong>请求报文</strong></p><ol><li>请求行：请求类型（method–get、post） 请求路径（url）、HTTP版本协议（HTTP1.1、HTTP2.0）</li><li>请求头： 格式（key：value），如：Content-type: application/x-www-form-urlencoded</li><li>请求空行：必须要有</li><li>请求体：get请求体为空、post可有可无</li></ol></li><li><p><strong>响应报文</strong></p><ol><li>响应行：HTTP版本协议（HTTP1.1、HTTP2.0）、响应状态码（200）、响应状态字符串（ok）</li><li>响应头： 格式（key：value），如：Content-type: text/html;charset=utf-8</li><li>响应空行：必须要有</li><li>响应体：响应主要内容</li></ol></li></ul><hr><h2 id="原生-Ajax-使用"><a href="#原生-Ajax-使用" class="headerlink" title="原生 Ajax 使用"></a><strong>原生 Ajax 使用</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 发送请求4个步骤 */</span></span><br><span class="line"><span class="comment">// 1.创建对象</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// 2.初始化</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;Get&#x27;</span>, <span class="string">&#x27;http://localhost:3333&#x27;</span>)</span><br><span class="line"><span class="comment">// 3.发送</span></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br><span class="line"><span class="comment">// 4.事件绑定响应</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// readyState 是 xhr对象中的属性, 表示状态 0 1 2 3 4</span></span><br><span class="line">    <span class="comment">// 0 -&gt; 创建对象</span></span><br><span class="line">    <span class="comment">// 1 -&gt; 初始化</span></span><br><span class="line">    <span class="comment">// 2 -&gt; 发送</span></span><br><span class="line">    <span class="comment">// 3 -&gt; 服务器返回结果中</span></span><br><span class="line">    <span class="comment">// 4 -&gt;  服务器返回了所有的结果</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>) <span class="comment">// 响应体</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">status</span>) <span class="comment">// 响应状态码</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">statusText</span>) <span class="comment">// 响应字符串</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="title function_">getResponseHeader</span>(<span class="string">&#x27;Content-type&#x27;</span>)) <span class="comment">// 获取指定名称的响应头</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">getAllResponseHeaders</span>) <span class="comment">// 所有的响应头</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 携带请求参数</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;Get&#x27;</span>, <span class="string">&#x27;http://localhost:3333?a=100&amp;b=200&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// post 请求设置请求体</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;a=100&amp;b=200&#x27;</span>)  <span class="comment">// 里面的格式可自定义（一般x-www-form-urlencoded或者json）</span></span><br><span class="line"><span class="comment">// 设置请求头，在opne后面调用方法</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;token&#x27;</span>,<span class="string">&#x27;xxx&#x27;</span>) <span class="comment">// 设置多个（再写一个即可）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对响应 JSON 数据的处理</span></span><br><span class="line"><span class="comment">// 1.手动转化</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>)</span><br><span class="line"><span class="comment">// 2.自动转化</span></span><br><span class="line"><span class="comment">// 设置响应头数据类型</span></span><br><span class="line">xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 了解ie浏览器Ajax请求缓存问题，同一个请求url不变走缓存，加一个参数保证每次不一样即可</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;Get&#x27;</span>, <span class="string">&#x27;http://localhost:3333?t=&#x27;</span>+<span class="title class_">Date</span>.<span class="property">now</span>) <span class="comment">// 实际情况不需要自己加，工具会自动处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Ajax 请求超时与网络异常，（写open上面比较好，其他位置也不影响）</span></span><br><span class="line"><span class="comment">// 超时设置 （2秒）</span></span><br><span class="line">xhr.<span class="property">timeout</span> = <span class="number">2000</span>;</span><br><span class="line"><span class="comment">// 超时回调</span></span><br><span class="line">xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;网络超时，请稍后重试&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 网络异常回调</span></span><br><span class="line">xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;网络异常，请稍后重试&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 手动取消请求</span></span><br><span class="line">xhr.<span class="title function_">abort</span>() </span><br></pre></td></tr></table></figure><hr><h2 id="JQuery-Ajax-使用"><a href="#JQuery-Ajax-使用" class="headerlink" title="JQuery Ajax 使用"></a><strong>JQuery Ajax 使用</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送 get post 请求</span></span><br><span class="line"><span class="comment">// 接收四个参数：</span></span><br><span class="line"><span class="comment">// 1.url 请求 HTML 页面的 URL 地址</span></span><br><span class="line"><span class="comment">// 2.data(可选) 发送至服务器的 key/value 数据</span></span><br><span class="line"><span class="comment">// 3.callback(可选) 回调函数，只有当请求成功才执行!</span></span><br><span class="line"><span class="comment">// 4.type(可选) 服务器返回的数据格式，包括 xml/html/json/text 等</span></span><br><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8000/jquery-server&#x27;</span>, &#123;&#125;, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;, <span class="string">&#x27;json&#x27;</span>)</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:8000/jquery-server&#x27;</span>, &#123;<span class="attr">a</span>:<span class="number">100</span>, <span class="attr">b</span>:<span class="number">200</span>&#125;, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;, <span class="string">&#x27;json&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ajax 通用</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="comment">// 请求方法</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:8000/jquery-server&#x27;</span>, <span class="comment">// 请求地址</span></span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;, <span class="comment">// 携带参数</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>, <span class="comment">// 响应体类型设置</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">3000</span>, <span class="comment">// 超时时间</span></span><br><span class="line">    <span class="attr">headers</span>: &#123; <span class="comment">// 请求头信息</span></span><br><span class="line">        <span class="attr">token</span>: <span class="string">&#x27;xxx&#x27;</span>    </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123; <span class="comment">// 成功后执行的回调</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123; <span class="comment">// 失败时执行的回调，（超时也会走这个）</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params">data</span>) &#123; <span class="comment">// 请求完成后调用的回调 (无论是否成功)</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="axios-使用"><a href="#axios-使用" class="headerlink" title="axios 使用"></a><strong>axios 使用</strong></h2><p>文档：<a href="http://www.axios-js.com/zh-cn/">axios</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get post 请求（注意：delete 与 get 一样没有请求体 ）</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8000/axios-server&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123; <span class="comment">//url参数</span></span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">headers</span>:&#123; <span class="comment">//请求头信息</span></span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>()</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:8000/axios-server&#x27;</span>, </span><br><span class="line">    &#123;  <span class="comment">// data 请求体</span></span><br><span class="line">        <span class="attr">a</span>: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="comment">// config 配置</span></span><br><span class="line">        <span class="attr">params</span>: &#123; <span class="comment">//url参数</span></span><br><span class="line">            <span class="attr">id</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">headers</span>:&#123; <span class="comment">//请求头信息</span></span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>()</span><br><span class="line">    </span><br><span class="line"><span class="comment">// axios 写法</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;...&#125;).<span class="title function_">then</span>()</span><br></pre></td></tr></table></figure><hr><h2 id="fetch-语法"><a href="#fetch-语法" class="headerlink" title="fetch 语法"></a><strong>fetch 语法</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:8000/fetch-server&#x27;</span>,&#123;</span><br><span class="line">    <span class="comment">//请求方法</span></span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="comment">//请求头</span></span><br><span class="line">    <span class="attr">headers</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;hanser&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//请求体</span></span><br><span class="line">    <span class="attr">body</span>: <span class="string">&#x27;name=admin&amp;pd=admin&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">Response</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Response</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Response</span>.<span class="title function_">text</span>() <span class="comment">// 或者使用 Response.json()</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">Response</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Response</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="jsonp-的使用"><a href="#jsonp-的使用" class="headerlink" title="jsonp 的使用"></a><strong>jsonp 的使用</strong></h2><p>JSONP(JSON with Padding)，是一个非官方的跨域解决方案，只支持get 请求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原理： script 标签的src 属性来发送请求，返回一个函数的调用的js代码，不能直接返回数据（浏览器不认识）。</span></span><br><span class="line"><span class="comment">// 不是 XMLHttpRequest 和 fetch 请求</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原生jsonp使用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params">data</span>) &#123; <span class="comment">// 准备一个handle的回调函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)       </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 创建 script 标签发送请求</span></span><br><span class="line"> <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line"><span class="comment">//2 设置标签的src属性</span></span><br><span class="line">script.<span class="property">src</span> = <span class="string">&#x27;http://localhost:8000/check-username&#x27;</span></span><br><span class="line"><span class="comment">//3 将script插入文档中</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后端返回的是一个 js 代码（调用 handle 函数）</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&quot;/articles&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;xxx&#x27;</span>&#125;)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">`handle(<span class="subst">$&#123;data&#125;</span>)`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// JQuery 的 jsonp 使用</span></span><br><span class="line"><span class="comment">// 1.使用 getJSON 方法，必须携带callback参数（固定写法），后端可以req接收这个函数名</span></span><br><span class="line">$.<span class="title function_">getJSON</span>(<span class="string">&#x27;xxx?callback=?&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 2.使用 ajax 写法：见前端知识记录中的记录</span></span><br></pre></td></tr></table></figure><p>补充跨域CORS：就是服务端设置请求头，来允许哪些可以访问资源，还有是否支持自定义请求头、请求响应方法等。</p><p>资料：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">CORS</a></p><hr><h1 id="Promise-补充"><a href="#Promise-补充" class="headerlink" title="Promise 补充"></a><strong>Promise 补充</strong></h1><p>参考：<a href="https://www.bilibili.com/video/BV1GA411x7z1/?spm_id_from=333.880.my_history.page.click&vd_source=324ad3605faa1f1927a8c7fa74b35296">尚硅谷Web前端Promise教程从入门到精通</a></p><h2 id="Promise-api"><a href="#Promise-api" class="headerlink" title="Promise api"></a><strong>Promise api</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Promise.resolve() */</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">521</span>);</span><br><span class="line"><span class="comment">//如果传入的参数为 非Promise类型的对象, 则返回的结果为成功promise对象</span></span><br><span class="line"><span class="comment">//如果传入的参数为 Promise 对象, 则参数的结果决定了 resolve 的结果</span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// resolve(&#x27;OK&#x27;);</span></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">// console.log(p2);</span></span><br><span class="line">p2.<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Promise.reject() */</span></span><br><span class="line"><span class="comment">// 返回一个失败的 promise 对象</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">521</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;iloveyou&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">// 都是失败的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Promise.all 方法 */</span></span><br><span class="line"><span class="comment">// 返回一个新的 promise，只有所有的 promise 都成功才成功，只要有一个失败了就直接失败</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Success&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Oh Yeah&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Promise.race方法 */</span></span><br><span class="line"><span class="comment">// 返回一个新的 promise，第一个完成的 promise 的结果状态就是最终的结果状态</span></span><br><span class="line"><span class="keyword">const</span> pRace = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3])</span><br><span class="line"><span class="comment">// 谁先完成就输出谁(不管是成功还是失败)</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Success&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Oh Yeah&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><hr><h2 id="Promise-的几个问题"><a href="#Promise-的几个问题" class="headerlink" title="Promise 的几个问题"></a><strong>Promise 的几个问题</strong></h2><p><strong>1.如何改变 promise 的状态？</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//resolve(1) // promise变为resolved成功状态</span></span><br><span class="line">  <span class="comment">//reject(2) // promise变为rejected失败状态</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;出错了&#x27;</span>) <span class="comment">// 抛出异常，promise变为rejected失败状态，reason为抛出的error</span></span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">value</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reason&#x27;</span>,reason)&#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// reason Error:出错了</span></span><br></pre></td></tr></table></figure><p><strong>2.一个 promise 指定多个成功/失败回调函数，都会调用吗？</strong></p><p>​    当 promise 改变为对应状态时都会调用</p><p><strong>3.改变 Promise 状态和指定回调函数谁先谁后？</strong></p><ul><li>都有可能, 正常情况下是先指定回调再改变状态, 但也可以先改状态再指定回调</li><li>如何先改状态再指定回调?</li></ul><p>​       在执行器中直接调用 resolve()/reject(）</p><p>​       延迟更长时间才调用 then()</p><ul><li>什么时候才能得到数据？</li></ul><p>​       如果先指定的回调, 那当状态发生改变时, 回调函数就会调用, 得到数据</p><p>​       如果先改变的状态, 那当指定回调时, 回调函数就会调用, 得到数据</p><p><strong>4.Promise then方法的返回结果特点</strong></p><p>​    如果返回的是另一个新promise，此promise的结果就会成为新promise的结果</p><p>​    如果返回的是非promise的任意值，新promise变为resolved，value为返回的值</p><p>​    如果抛出异常，新promise变为rejected，reason为抛出的异常</p><p><strong>5.异常穿透</strong></p><p>​    当使用 Promise 的 then 链式调用时, 可以在最后指定失败的回调</p><p>​    前面任何操作出了异常, 都会传到最后失败的回调中处理</p><p><strong>6.中断 promise 链</strong></p><p>​    当使用promise的then链式调用时，在中间中断，不再调用后面的回调函数，办法：在回调函数中返回一个pending状态的promise对象</p><hr><h2 id="补充-axios-all-使用"><a href="#补充-axios-all-使用" class="headerlink" title="补充 axios.all 使用"></a><strong>补充 axios.all 使用</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUserAccount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserPermissions</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345/permissions&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">axios.<span class="title function_">all</span>([<span class="title function_">getUserAccount</span>(), <span class="title function_">getUserPermissions</span>()])</span><br><span class="line">.<span class="title function_">then</span>(</span><br><span class="line">    axios.<span class="title function_">spread</span>(<span class="keyword">function</span> (<span class="params">acct, perms</span>) &#123;</span><br><span class="line">    <span class="comment">// 两个请求现在都执行完成</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2022/09/12/TypeScript/"/>
      <url>/2022/09/12/TypeScript/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>TypeScript 基础</p><hr><h1 id="安装-TypeScript"><a href="#安装-TypeScript" class="headerlink" title="安装 TypeScript"></a><strong>安装 TypeScript</strong></h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript <span class="comment">// 安装</span></span><br><span class="line">tsc -V <span class="comment">// 检查版本号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：如果 ts 文件中只有 js 语法，html 引入改 ts 文件不会报错且可以执行</span></span><br></pre></td></tr></table></figure><hr><h1 id="TypeScript中的基本类型"><a href="#TypeScript中的基本类型" class="headerlink" title="TypeScript中的基本类型"></a><strong>TypeScript中的基本类型</strong></h1><h2 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a><strong>类型声明</strong></h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">let</span> 变量: 类型;</span><br><span class="line"><span class="keyword">let</span> 变量: 类型 = 值;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">参数: 类型, 参数: 类型</span>): 类型&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="自动类型判断"><a href="#自动类型判断" class="headerlink" title="自动类型判断"></a><strong>自动类型判断</strong></h2><ul><li>TS拥有自动的类型判断机制</li><li>当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型</li><li>所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如：let a = 1; 则 a 的类型为 number</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// a = &#x27;hello world&#x27; 报错</span></span><br></pre></td></tr></table></figure><hr><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a><strong>类型</strong></h2><table><thead><tr><th><strong>类型</strong></th><th><strong>例子</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>number</td><td>1、-1、1.1</td><td>任意数字</td></tr><tr><td>string</td><td>‘hi’、”hi”、<code>hi</code></td><td>任意字符串</td></tr><tr><td>boolean</td><td>true、false</td><td>布尔值true或false</td></tr><tr><td>字面量</td><td>其本身</td><td>限制变量的值就是该字面量的值</td></tr><tr><td>any</td><td>*</td><td>任意类型</td></tr><tr><td>unknown</td><td>*</td><td>类型安全的any</td></tr><tr><td>void</td><td>空值（undefined）</td><td>没有值（或undefined）</td></tr><tr><td>never</td><td>没有值</td><td>不能是任何值</td></tr><tr><td>object</td><td>{ name: ‘孙悟空’ }</td><td>任意的JS对象</td></tr><tr><td>array</td><td>[1,2,3]</td><td>任意JS数组</td></tr><tr><td>tuple</td><td>[4,5]</td><td>元素，TS新增类型，固定长度数组</td></tr><tr><td>enum</td><td>enum{A,B}</td><td>枚举，TS中新增类型</td></tr></tbody></table><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* number、string、boolean */</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">bool</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 字面量 （配合 | 使用）*/</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span> | <span class="string">&quot;女&quot;</span>;</span><br><span class="line">sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* any */</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">val</span>: <span class="built_in">any</span>;</span><br><span class="line"><span class="comment">/* 等同于（默认就是 any）</span></span><br><span class="line"><span class="comment">let val  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* unknown 类型安全的any */</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">e</span>: <span class="built_in">unknown</span>;</span><br><span class="line">e = <span class="number">1</span>;</span><br><span class="line">e = <span class="literal">true</span>;</span><br><span class="line">e = <span class="string">&quot;字符串&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* unknown 与 any 的区别 */</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">z</span>: <span class="built_in">any</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: <span class="built_in">unknown</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="built_in">string</span>;</span><br><span class="line">z = <span class="number">1</span>;</span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line">c = z; <span class="comment">// any 可以赋值，影响了其他变量（不推荐 any ）</span></span><br><span class="line"><span class="comment">/* 赋值 unknown 问题 */</span></span><br><span class="line"><span class="comment">// c = x  报错：不能将类型“unknown”分配给类型“string”</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&quot;string&quot;</span>) c = x;</span><br><span class="line"><span class="comment">// 类型断言（ 告诉编辑器 x 就是字符串）</span></span><br><span class="line">c = x <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line">c = &lt;<span class="built_in">string</span>&gt;x;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* void */</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">unusable</span>: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* never */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params"><span class="attr">message</span>: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* object */</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="built_in">object</span>;</span><br><span class="line">obj = &#123;&#125;;</span><br><span class="line">obj = [];</span><br><span class="line">obj = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="comment">// 用来指定对象中可以包含哪些属性</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">o</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line">o = &#123; <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span> &#125;;</span><br><span class="line"><span class="comment">// 必须要有 name 属性，其他任意属性（ propName 写成其他都行 ）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">ob</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125;;</span><br><span class="line">ob = &#123;<span class="attr">name</span>: <span class="string">&#x27;xxx&#x27;</span>, <span class="attr">x</span>: <span class="string">&#x27;xxx&#x27;</span>&#125;</span><br><span class="line"><span class="comment">// 限制函数格式</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fun</span>: <span class="function">(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"><span class="comment">// 剩余参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">info</span>(<span class="params"><span class="attr">x</span>: <span class="built_in">string</span>, ...<span class="attr">args</span>: <span class="built_in">string</span>[]</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可选参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">string</span>, <span class="attr">b</span>?: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数重载: 函数名相同, 而形参不同的多个函数 */</span></span><br><span class="line"><span class="comment">// 重载函数声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"><span class="attr">x</span>: <span class="built_in">string</span>, <span class="attr">y</span>: <span class="built_in">string</span></span>): <span class="built_in">string</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"><span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span></span><br><span class="line"><span class="comment">// 定义函数实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"><span class="attr">x</span>: <span class="built_in">string</span> | <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="literal">undefined</span> &#123;</span><br><span class="line">  <span class="comment">// 在实现上我们要注意严格判断两个参数的类型是否相等，而不能简单的写一个 x + y</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;string&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> y === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;number&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> y === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>))</span><br><span class="line"><span class="comment">// console.log(add(1, &#x27;a&#x27;)) // error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Array */</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* tuple 元组固定长度的数组 */</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">arr1 = [<span class="string">&quot;xxx&quot;</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* enum 枚举*/</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Gender</span> &#123;</span><br><span class="line">  <span class="title class_">Male</span> = <span class="string">&quot;男&quot;</span>, <span class="comment">// 不写默认为 0</span></span><br><span class="line">  <span class="title class_">Female</span> = <span class="string">&quot;女&quot;</span>, <span class="comment">// 不写默认为 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">i</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">gender</span>: <span class="title class_">Gender</span> &#125;;</span><br><span class="line">i = &#123; <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span>, <span class="attr">gender</span>: <span class="title class_">Gender</span>.<span class="property">Male</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &amp; 的作用，表示且，都要满足 */</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125; &amp; &#123; <span class="attr">age</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line">n = &#123; <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 类型的别名 （当什么比较长时，可以起别名）*/</span></span><br><span class="line"><span class="keyword">type</span> myType = <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">j</span>: myType;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">k</span>: myType;</span><br></pre></td></tr></table></figure><hr><h1 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a><strong>编译选项</strong></h1><h2 id="编译命令"><a href="#编译命令" class="headerlink" title="编译命令"></a><strong>编译命令</strong></h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tsc 文件.<span class="property">ts</span> <span class="comment">// 编译</span></span><br><span class="line"><span class="comment">// 如果编译报错 exports is not defined，因为编译后的产物为 commonjs 规范故报错</span></span><br><span class="line"><span class="comment">// 解决：修改 tsconfing.json 文件，&quot;module&quot;: &quot;commonjs&quot; 注释</span></span><br><span class="line"><span class="comment">// 直接运行 tsc xxx.ts 会无效，因为该 tsc 命令没有与 tsconfing.json 关联</span></span><br><span class="line"><span class="comment">// 可以运行 tsc -w || tsc --project tsconfig.json 解决，其他更多参数参考官方文档</span></span><br><span class="line"><span class="comment">// 直接 tsc 就可以，不需要文件名，当然必须要有 tsconfig.json 文件 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 单独 ts 文件有重复声明的报错等，可以使用闭包(()=&gt;&#123; &#125;)()、export default &#123;&#125; 解决</span></span><br></pre></td></tr></table></figure><hr><h2 id="tsconfing-json-文件"><a href="#tsconfing-json-文件" class="headerlink" title="tsconfing.json 文件"></a><strong>tsconfing.json 文件</strong></h2><h3 id="include"><a href="#include" class="headerlink" title="include"></a><strong>include</strong></h3><ul><li>定义希望被编译文件所在的目录</li><li>默认值：[“**/*”]</li></ul><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ** 代表任意路径、 * 代表任意文件</span></span><br><span class="line"><span class="attr">&quot;include&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;src/**/*&quot;</span><span class="punctuation">,</span> <span class="string">&quot;tests/**/*&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>上述示例中，所有src目录和tests目录下的文件都会被编译</p><hr><h3 id="exclude"><a href="#exclude" class="headerlink" title="exclude"></a><strong>exclude</strong></h3><ul><li>定义需要排除在外的目录</li><li>默认值：[“node_modules”, “bower_components”, “jspm_packages”]</li></ul><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/hello/**/*&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>上述示例中，src下hello目录下的文件都不会被编译</p><hr><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a><strong>extends</strong></h3><ul><li>定义被继承的配置文件</li></ul><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./configs/base&quot;</span></span><br></pre></td></tr></table></figure><p>上述示例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息</p><hr><h3 id="files"><a href="#files" class="headerlink" title="files"></a><strong>files</strong></h3><ul><li>指定被编译文件的列表，<strong>只有需要编译的文件少时才会用到</strong></li></ul><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;core.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;sys.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;types.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;scanner.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;parser.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;utilities.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;binder.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;checker.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;tsc.ts&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>列表中的文件都会被TS编译器所编译</li></ul><hr><h3 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions"></a><strong>compilerOptions</strong></h3><ul><li>编译选项是配置文件中非常重要也比较复杂的配置选项</li><li>在compilerOptions中包含多个子选项，用来完成对编译的配置</li></ul><p><strong>target</strong></p><ul><li>设置ts代码编译的目标版本</li><li>可选值：ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES6&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>lib</strong></p><ul><li>指定代码运行时所包含的库（宿主环境）</li><li>可选值：ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ……</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 如果是一个空数组的话，就表示什么库都不使用，没有相应提示（一般不需要动）</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ES6&quot;</span><span class="punctuation">,</span> <span class="string">&quot;DOM&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>module</strong></p><ul><li>设置编译后代码使用的模块化系统</li><li>可选值：CommonJS、UMD、AMD、System、ES2020、ESNext、None</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CommonJS&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>outDir</strong></p><ul><li>编译后文件的所在目录</li><li>默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>outFile</strong></p><ul><li>将所有的文件编译为一个js文件</li><li>默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/app.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>rootDir</strong></p><ul><li>指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>allowJs</strong></p><ul><li>是否对js文件编译</li></ul><p><strong>checkJs</strong></p><ul><li>是否对js文件进行检查</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;checkJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>removeComments</strong></p><ul><li>是否删除注释</li><li>默认值：false</li></ul><p><strong>noEmit</strong></p><ul><li>不对代码进行编译</li><li>默认值：false</li></ul><p><strong>sourceMap</strong></p><ul><li>是否生成sourceMap</li><li>默认值：false</li></ul><p><strong>严格检查</strong></p><ul><li>strict：启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查</li><li>alwaysStrict：总是以严格模式对代码进行编译</li><li>noImplicitAny：禁止隐式的any类型</li><li>noImplicitThis：禁止类型不明确的this</li><li>strictBindCallApply：严格检查bind、call和apply的参数列表</li><li>strictFunctionTypes：严格检查函数的类型</li><li>strictNullChecks：严格的空值检查</li><li>strictPropertyInitialization：严格检查属性是否初始化</li></ul><p><strong>额外检查</strong></p><ul><li>noFallthroughCasesInSwitch：检查switch语句包含正确的break</li><li>noImplicitReturns：检查函数没有隐式的返回值</li><li>noUnusedLocals：检查未使用的局部变量</li><li>noUnusedParameters：检查未使用的参数</li></ul><p><strong>高级</strong></p><ul><li>allowUnreachableCode：检查不可达代码，可选值：true 忽略不可达代码、false 不可达代码将引起错误</li><li>noEmitOnError：有错误的情况下不进行编译，默认值：false</li></ul><hr><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a><strong>面向对象</strong></h1><h2 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a><strong>定义类</strong></h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名 &#123;</span><br><span class="line">    属性名: 类型;</span><br><span class="line">    <span class="comment">// 注：在TS中只能有一个构造器方法！</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">参数: 类型</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.属性名 = 参数;</span><br><span class="line">    &#125;</span><br><span class="line">    方法名() &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态属性，也称为类属性。使用静态属性无需创建实例，通过类即可直接使用</span></span><br><span class="line">    <span class="keyword">static</span> 属性名: 类型 = 属性值</span><br><span class="line">    <span class="comment">// 静态方法使用static开头</span></span><br><span class="line">    <span class="keyword">static</span> 方法名() &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>; <span class="comment">// 此处申明属性</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">18</span> <span class="comment">// 这里也可以直接赋值（同样与 constructor 里面一样，只是无法使用变量）</span></span><br><span class="line">    </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="variable constant_">PI</span> = <span class="number">3.1415926</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">sum</span>(<span class="params"><span class="attr">num1</span>: <span class="built_in">number</span>, <span class="attr">num2</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="title function_">sayHello</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">PI</span>, <span class="title class_">Person</span>.<span class="title function_">sum</span>(<span class="number">123</span>, <span class="number">456</span>));</span><br></pre></td></tr></table></figure><hr><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a><strong>类的继承</strong></h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子类继承父类时，必须调用父类的构造方法（如果子类中也定义了构造方法则会重写该方法）</span></span><br><span class="line"><span class="comment">// 字如果有 constructor 则必须调用 super 否则会报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">num</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span> = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`父类中的fn方法！`</span>,  <span class="variable language_">this</span>.<span class="property">num</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">num</span>: <span class="built_in">number</span>, <span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(num);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">fn</span>() <span class="comment">// 调用父类的方法</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`字类中的fn方法！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a><strong>抽象类</strong></h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类（abstract class）是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例</span></span><br><span class="line"><span class="comment">// 使用abstract开头的方法叫做抽象方法，</span></span><br><span class="line"><span class="comment">// 抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现;</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">run</span>(): <span class="built_in">void</span>;</span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;动物在叫~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animals</span>&#123;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;狗在跑~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a><strong>封装</strong></h2><p>对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装</p><p>默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在 TS 中可以对属性的权限进行设置</p><ul><li><p>静态属性（static）</p></li><li><ul><li>声明为 static 的属性或方法不再属于实例，而是属于类的属性；</li></ul></li><li><p>只读属性（readonly）：</p></li><li><ul><li>如果在声明属性时添加一个 readonly，则属性便成了只读属性无法修改</li></ul></li><li><p>TS中属性具有三种修饰符：</p></li><li><ul><li>public（默认值）可以在类、子类和对象中修改</li><li>protected 可以在类、子类中修改</li><li>private 可以在类中修改</li></ul></li></ul><p><strong>示例：</strong></p><p><strong>public：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 public 直接将属性定义在构造函数中</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>, <span class="keyword">public</span> <span class="attr">age</span>: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>; <span class="comment">// 写或什么都不写都是public</span></span><br><span class="line">    <span class="keyword">public</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// 可以在类中修改</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">//子类中可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 可以通过对象修改</span></span><br></pre></td></tr></table></figure><p><strong>protected：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// 可以修改</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">//子类中可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 不能修改</span></span><br></pre></td></tr></table></figure><p><strong>private：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// 可以修改</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">//子类中不能修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 不能修改</span></span><br></pre></td></tr></table></figure><p><strong>属性存取器</strong></p><p>对于一些不希望被任意修改的属性，可以将其设置为 private</p><p>直接将其设置为 private 将导致无法再通过对象修改其中的属性</p><p>我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器</p><p>读取属性的方法叫做 setter 方法，设置属性的方法叫做 getter 方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">_name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>);</span><br><span class="line"><span class="comment">// 实际通过调用getter方法读取name属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>);</span><br><span class="line"><span class="comment">// 实际通过调用setter方法修改name属性 </span></span><br><span class="line">p1.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>;</span><br></pre></td></tr></table></figure><hr><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a><strong>接口</strong></h1><p>接口的作用类似于抽象类，不同点在于：接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法；</p><p>接口主要负责定义一个类的结构，接口可以去限制一个对象的接口：对象只有包含接口中定义的所有属性和方法时才能匹配接口；</p><p>同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性；</p><p>注：接口可以重复申明，之后的会合并之前申明的；</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">   <span class="title function_">sayHello</span>():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大家好，我是&#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接口补充</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性修饰</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">number</span> <span class="comment">// 只读属性</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> <span class="comment">// 默认必须</span></span><br><span class="line">  <span class="attr">sex</span>?: <span class="built_in">string</span> <span class="comment">// 可选属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口可以描述函数类型(参数的类型与返回的类型)</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SearchFunc</span> &#123;</span><br><span class="line">  (<span class="attr">source</span>: <span class="built_in">string</span>, <span class="attr">subString</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">mySearch</span>: <span class="title class_">SearchFunc</span> = <span class="keyword">function</span>(<span class="params"><span class="attr">source</span>: <span class="built_in">string</span>, <span class="attr">sub</span>: <span class="built_in">string</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> source.<span class="title function_">search</span>(sub) &gt; -<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class 使用多个 interface</span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="title function_">fn1</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">  <span class="title function_">fn2</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> A, B &#123;</span><br><span class="line">  <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn1&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn2&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口继承接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">LightableAlarm</span> <span class="keyword">extends</span> <span class="title class_">Alarm</span>, <span class="title class_">Light</span> &#123;&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a><strong>泛型</strong></h1><p>泛型（Generic）：定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定）；此时泛型便能够发挥作用；</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"><span class="attr">arg</span>: <span class="built_in">any</span></span>): <span class="built_in">any</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上例中，test函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的；</span></span><br><span class="line"><span class="comment">// 由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的：</span></span><br><span class="line"><span class="comment">// 首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> test&lt;T&gt;(<span class="attr">arg</span>: T): T&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型；</span></span><br><span class="line"><span class="comment">// 所以泛型其实很好理解，就表示某个类型；</span></span><br><span class="line"><span class="comment">// 那么如何使用上边的函数呢？</span></span><br><span class="line"><span class="title function_">test</span>(<span class="number">10</span>) <span class="comment">// 直接使用</span></span><br><span class="line">test&lt;<span class="built_in">number</span>&gt;(<span class="number">10</span>) <span class="comment">// 指定类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以同时指定多个泛型，泛型间使用逗号隔开</span></span><br><span class="line"><span class="keyword">function</span> test&lt;T, K&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: K): K&#123;</span><br><span class="line">  <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">test&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">10</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类中同样可以使用泛型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>&lt;T&gt;&#123;</span><br><span class="line">  <span class="attr">prop</span>: T;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">prop</span>: T</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">prop</span> = prop;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 除此之外，也可以对泛型的范围进行约束</span></span><br><span class="line"><span class="comment">// 使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInter</span>&#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> test&lt;T <span class="keyword">extends</span> <span class="title class_">MyInter</span>&gt;(<span class="attr">arg</span>: T): <span class="built_in">number</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IbaseCRUD</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">data</span>: T[]</span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params"><span class="attr">t</span>: T</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  <span class="attr">getById</span>: <span class="function">(<span class="params"><span class="attr">id</span>: <span class="built_in">number</span></span>) =&gt;</span> T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>?: <span class="built_in">number</span> <span class="comment">//id主键自增</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> <span class="comment">//姓名</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span> <span class="comment">//年龄</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserCRUD</span> <span class="keyword">implements</span> <span class="title class_">IbaseCRUD</span>&lt;<span class="title class_">User</span>&gt; &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="title class_">User</span>[] = []</span><br><span class="line"></span><br><span class="line">  <span class="title function_">add</span>(<span class="attr">user</span>: <span class="title class_">User</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    user = &#123; ...user, <span class="attr">id</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>() &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">push</span>(user)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;保存user&#x27;</span>, user.<span class="property">id</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getById</span>(<span class="attr">id</span>: <span class="built_in">number</span>): <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> === id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userCRUD = <span class="keyword">new</span> <span class="title class_">UserCRUD</span>()</span><br><span class="line">userCRUD.<span class="title function_">add</span>(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;tom&#x27;</span>, <span class="number">12</span>))</span><br><span class="line">userCRUD.<span class="title function_">add</span>(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;tom2&#x27;</span>, <span class="number">13</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userCRUD.<span class="property">data</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a><strong>声明文件</strong></h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。</span></span><br><span class="line"><span class="comment">声明语句: 如果需要ts对新的语法进行检查, 需要要加载了对应的类型说明代码</span></span><br><span class="line"><span class="comment">declare var jQuery: (selector: string) =&gt; any;</span></span><br><span class="line"><span class="comment">声明文件: 把声明语句放到一个单独的文件（jQuery.d.ts）中, ts会自动解析到项目中所有声明文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// declare var 并没有真的定义一个变量，只是定义了全局变量 jQuery 的类型，</span></span><br><span class="line"><span class="comment">// 仅仅会用于编译时的检查，在编译结果中会被删除。</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> <span class="attr">jQuery</span>: <span class="function">(<span class="params"><span class="attr">selector</span>: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">any</span></span><br><span class="line"><span class="title function_">jQuery</span>(<span class="string">&#x27;#foo&#x27;</span>) </span><br></pre></td></tr></table></figure><hr><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a><strong>内置对象</strong></h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1. ECMAScript 的内置对象 */</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="title class_">Boolean</span> = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="title class_">Number</span> = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: <span class="title class_">String</span> = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="title class_">Date</span> = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="keyword">let</span> <span class="attr">r</span>: <span class="title class_">RegExp</span> = <span class="regexp">/^1/</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">e</span>: <span class="title class_">Error</span> = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error message&#x27;</span>)</span><br><span class="line">b = <span class="literal">true</span></span><br><span class="line"><span class="comment">// let bb: boolean = new Boolean(2)  // error</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">div</span>: <span class="title class_">HTMLElement</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="attr">divs</span>: <span class="title class_">NodeList</span> = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">MouseEvent</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">dir</span>(event.<span class="property">target</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="attr">fragment</span>: <span class="title class_">DocumentFragment</span> = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>()</span><br></pre></td></tr></table></figure><hr><h1 id="Vue3-对-TS-支持"><a href="#Vue3-对-TS-支持" class="headerlink" title="Vue3 对 TS 支持"></a><strong>Vue3 对 TS 支持</strong></h1><p>参考：<a href="https://cn.vuejs.org/guide/typescript/composition-api.html">TypeScript 与组合式 API</a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** defineProps 与 ts */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  <span class="attr">name</span>?: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">status</span>?: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> props = defineProps&lt;<span class="title class_">Props</span>&gt;()</span><br><span class="line"><span class="comment">// 注意：不支持</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Props</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./Props&#x27;</span></span><br><span class="line">defineProps&lt;<span class="title class_">Props</span>&gt;()</span><br><span class="line"><span class="comment">// 设置默认值</span></span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">withDefaults</span>(defineProps&lt;&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">title</span>?: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">num</span>: <span class="built_in">number</span>[]</span><br><span class="line">&#125;&gt;(), &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;测试标题&#x27;</span>,</span><br><span class="line">  <span class="attr">num</span>: <span class="function">() =&gt;</span> [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** emits 标注类型 */</span></span><br><span class="line"><span class="keyword">const</span> emit = defineEmits&lt;&#123;</span><br><span class="line">  (<span class="attr">e</span>: <span class="string">&#x27;change&#x27;</span>, <span class="attr">id</span>: <span class="built_in">number</span>): <span class="title function_">void</span></span><br><span class="line">  (<span class="attr">e</span>: <span class="string">&#x27;update&#x27;</span>, <span class="attr">value</span>: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">&#125;&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">/** ref */</span></span><br><span class="line"><span class="keyword">const</span> year = ref&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;(<span class="string">&#x27;2020&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** reactive */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">year</span>?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">book</span>: <span class="title class_">Book</span> = <span class="title function_">reactive</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;Vue 3 指引&#x27;</span> &#125;)</span><br><span class="line"><span class="comment">// 不推荐使用 reactive() 的泛型参数，因为处理了深层次 ref 解包的返回值与泛型参数的类型不同。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** computed */</span></span><br><span class="line"><span class="keyword">const</span> double = computed&lt;<span class="built_in">number</span>&gt;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 若返回值不是 number 类型则会报错</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 事件处理函数 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleChange</span>(<span class="params"><span class="attr">event</span>: <span class="title class_">Event</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>((event.<span class="property">target</span> <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span>).<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="TypeScript-补充"><a href="#TypeScript-补充" class="headerlink" title="TypeScript 补充"></a><strong>TypeScript 补充</strong></h1><ul><li><p>严格模式下 null 不能赋予 void 类型，非严格模式下 undefined 和 null 是所有类型的子类型</p></li><li><p>any 与 unknown 区别</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// unknown 是不能调用属性和方法；而 any 类型可以</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="built_in">unknown</span> = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: (): <span class="function"><span class="params">number</span> =&gt;</span> <span class="number">2</span> &#125;;</span><br><span class="line"><span class="comment">// 会报错 “obj”的类型为“未知”。</span></span><br><span class="line">obj.<span class="property">b</span>;</span><br><span class="line">obj.<span class="title function_">ccc</span>();</span><br></pre></td></tr></table></figure><ul><li>object 、Object 、{} 区别</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.Object 是该类型是所有 Object 类的实例的类型，原型链的顶端是 Object</span></span><br><span class="line"><span class="comment">2.object 是所有的引用类型，原始类型不支持</span></span><br><span class="line"><span class="comment">3.&#123;&#125; 是与 Object 一样</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 注意：直接使用Object、object、&#123;&#125; 是无法直接访问属性</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">object</span> = &#123;<span class="attr">b</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">b</span>) <span class="comment">// 类型“object”上不存在属性“b”。</span></span><br><span class="line"><span class="comment">// 解决：使用 自动类型推导 、指定对象中可以包含哪些属性、 接口interface</span></span><br></pre></td></tr></table></figure><ul><li>interface</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 重名时会合并，interface 和 type 中可以用分号或逗号、class 中只能用分号</span></span><br><span class="line"><span class="comment">2. 随意key </span></span><br><span class="line"><span class="comment">interface Person &#123;</span></span><br><span class="line"><span class="comment">    [propName: string]: any; // 这里要写成 any，不然下面的会报错</span></span><br><span class="line"><span class="comment">    b?:string,</span></span><br><span class="line"><span class="comment">    a:string,</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">3. 接口定义函数</span></span><br><span class="line"><span class="comment">interface Fn &#123;</span></span><br><span class="line"><span class="comment">    (name: string): number[]</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">const fn = ()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>数组类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定义二维数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">number</span>[][] = [[<span class="number">1</span>], [<span class="number">2</span>]]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: []&lt;<span class="title class_">Array</span>&gt;&lt;<span class="built_in">number</span>&gt; = [[<span class="number">1</span>], [<span class="number">2</span>]]</span><br><span class="line"><span class="comment">// 2. 定义 arguments</span></span><br><span class="line"><span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">a</span>:<span class="title class_">IArguments</span> = <span class="variable language_">arguments</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函数类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 函数定义 this （必须是函数的第一个参数）</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Obj</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">fn</span>: <span class="function">(<span class="params"><span class="attr">this</span>: <span class="title class_">Obj</span></span>) =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="title class_">Obj</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">  <span class="title function_">fn</span>(<span class="attr">this</span>: <span class="title class_">Obj</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">fn</span>())</span><br></pre></td></tr></table></figure><ul><li>类型断言</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="variable language_">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">a</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>内置对象</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">el1</span>: <span class="title class_">HTMLDivElement</span> | <span class="literal">null</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">el2</span>: <span class="title class_">NodeList</span> = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">el3</span>: <span class="title class_">NodeListOf</span>&lt;<span class="title class_">HTMLDivElement</span>&gt; = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">el4</span>: <span class="title class_">NodeListOf</span>&lt;<span class="title class_">HTMLDivElement</span> | <span class="title class_">Element</span>&gt; = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;div&quot;</span>); </span><br><span class="line"><span class="keyword">let</span> <span class="attr">loc</span>: <span class="title class_">Storage</span> = <span class="variable language_">localStorage</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">lo</span>: <span class="title class_">Location</span> = location;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">co</span>:<span class="built_in">string</span> = <span class="variable language_">document</span>.<span class="property">cookie</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">P</span>: <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> <span class="title function_">v</span>(<span class="number">1</span>)); <span class="comment">// 泛型申明返回值</span></span><br></pre></td></tr></table></figure><ul><li>class</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. static 里面的 this 只能调用加了 static 的方法与属性</span></span><br></pre></td></tr></table></figure><ul><li>元组</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元组的长度是固定的，但可以调用 push 等方法改变度。</span></span><br><span class="line"><span class="comment">// 直接使用索引值修改元组中的元素是不允许的。</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: [<span class="built_in">number</span>, <span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="comment">// 使用 readonly 修饰符，可以不让更改</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: <span class="keyword">readonly</span> [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: <span class="keyword">readonly</span> [<span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>?: <span class="built_in">string</span>] = [<span class="number">1</span>, <span class="string">&quot;2&quot;</span>];</span><br></pre></td></tr></table></figure><ul><li>枚举类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const枚举，let 和 var 都是不允许的声明只能使用 const</span></span><br><span class="line"><span class="comment">// const 声明的枚举会被编译成常量，避免在额外生成的代码上的开销和额外的非直接的对枚举成员的访问</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Types</span> &#123;</span><br><span class="line">   <span class="title class_">No</span> = <span class="string">&quot;No&quot;</span>,</span><br><span class="line">   <span class="title class_">Yes</span> = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反向映射</span></span><br><span class="line"><span class="comment">// 它包含了正向映射（ name -&gt; value）和反向映射（ value -&gt; name）</span></span><br><span class="line"><span class="comment">// 要注意的是 不会为字符串枚举成员生成反向映射。</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Enum</span> &#123;</span><br><span class="line">   fall</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">Enum</span>.<span class="property">fall</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//0</span></span><br><span class="line"><span class="keyword">let</span> nameOfA = <span class="title class_">Enum</span>[a]; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameOfA); <span class="comment">// fall</span></span><br></pre></td></tr></table></figure><ul><li>tsconfig.json配置文件 [参考](<a href="https://blog.csdn.net/qq1195566313/article/details/122525099?ops_request_misc=&amp;request_id=753a1ffce1c644998f2ead56f2043744&amp;biz_id=&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~koosearch~default-5-122525099-null-null.268%5Ev1%5Econtrol&amp;utm_term=typescript">https://blog.csdn.net/qq1195566313/article/details/122525099?ops_request_misc=&amp;request_id=753a1ffce1c644998f2ead56f2043744&amp;biz_id=&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~koosearch~default-5-122525099-null-null.268^v1^control&amp;utm_term=typescript</a> 15&amp;spm=1018.2226.3001.4450)</li><li>namespace 的使用</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">a</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">const</span> a1 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">b</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> a2 = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">a1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">b</span>.<span class="property">a2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 别名</span></span><br><span class="line"><span class="keyword">import</span> B = a.<span class="property">b</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(B.<span class="property">a2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 抽离命名空间</span></span><br><span class="line"><span class="comment">export namespace V &#123;</span></span><br><span class="line"><span class="comment">    export const a = 1</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">import &#123; V &#125; from &#x27;../observer/index&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名空间有多个时会合并（类似于 interface ）</span></span><br></pre></td></tr></table></figure><ul><li>三斜线指令：在编译过程中要引入的额外的文件、三斜线指令仅可最顶端</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* index1.ts */</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> a = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* index2.ts */</span></span><br><span class="line"><span class="comment">///&lt;reference path=&quot;./index1.ts&quot; /&gt;</span></span><br><span class="line"> <span class="keyword">namespace</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> b = <span class="string">&#x27;b&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：outFile 需要开启，并且 module 为 AMD</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明文件导入，使用了 @types/node/index.d.ts 里面声明的名字（ node_modules 下）</span></span><br><span class="line"><span class="comment">///&lt;reference types=&quot;node&quot; /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>声明文件（没有声明文件就会报错）</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> 声明全局变量</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> 声明全局方法</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">class</span> 声明全局类</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">enum</span> 声明全局枚举类型</span><br><span class="line"><span class="keyword">declare</span> namespace 声明（含有子属性的）全局对象</span><br><span class="line"><span class="keyword">interface</span> 和 type 声明全局类型</span><br><span class="line">/// &lt;reference /&gt; 三斜线指令</span><br><span class="line"></span><br><span class="line">// 声明文件手写参考 express.d.ts （ 最好统一放在 typings文件夹下 ）</span><br><span class="line">declare module &#x27;express&#x27; &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Router</span> &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="attr">path</span>: <span class="built_in">string</span>, <span class="attr">cb</span>: <span class="function">(<span class="params"><span class="attr">req</span>: <span class="built_in">any</span>, <span class="attr">res</span>: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">App</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="title function_">use</span>(<span class="attr">path</span>: <span class="built_in">string</span>, <span class="attr">router</span>: <span class="built_in">any</span>): <span class="built_in">void</span></span><br><span class="line">        <span class="title function_">listen</span>(<span class="attr">port</span>: <span class="built_in">number</span>, <span class="attr">cb</span>?: <span class="function">() =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Express</span> &#123;</span><br><span class="line">        (): <span class="title class_">App</span></span><br><span class="line">        <span class="title class_">Router</span>(): <span class="title class_">Router</span></span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">express</span>: <span class="title class_">Express</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> express</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>type 泛型工具 <a href="https://juejin.cn/post/7018805943710253086#heading-75">参考</a></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vite</title>
      <link href="/2022/09/12/Vite/"/>
      <url>/2022/09/12/Vite/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>vite 的笔记</p><hr><h1 id="Vite介绍"><a href="#Vite介绍" class="headerlink" title="Vite介绍"></a><strong>Vite介绍</strong></h1><p><strong>构建工具</strong></p><ol><li><p>市面上主流的构建工具有哪些:</p><ul><li>webpack</li><li>vite</li><li>parcel</li><li>esbuild</li><li>rollup</li><li>grunt</li><li>gulp</li></ul></li><li><p>什么是构建工具</p><p>浏览器他只认识html、css、js文件，当项目出现其他文件需要手动编译，而构建工具会自动编译。</p></li></ol><p><strong>vite相较于webpack的优势</strong></p><ol><li><p>构建速度快</p><p>webpack支持多种模块化, 开始必须要统一模块化代码, 意味着需要将所有的依赖全部读一遍</p><p>vite的上手难度更低, webpack的配置是非常多的, loader, plugin。</p><p>vite是基于es modules的，webpack更多的关注兼容性, 而vite关注浏览器端的开发体验。</p></li></ol><p><strong>webpack 不能改的原因</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack支持多种模块，这一段代码最终会到浏览器里去运行</span></span><br><span class="line"><span class="keyword">const</span> lodash = <span class="built_in">require</span>(<span class="string">&quot;lodash&quot;</span>); <span class="comment">// commonjs 规范</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>; <span class="comment">// es6 module</span></span><br><span class="line"><span class="comment">// webpack支持多种模块化，所有的依赖全部读一遍编译，如：上面的变成下面的</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">modules</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">webpack_require</span>(<span class="params"></span></span><br><span class="line"><span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="comment">// 入口是index.js</span></span><br><span class="line">    <span class="comment">// 通过webpack的配置文件得来的: webpack.config.js ./src/index.js</span></span><br><span class="line">    modules[entry](webpack_require);</span><br><span class="line">&#125;, (&#123;</span><br><span class="line">    <span class="string">&quot;./src/index.js&quot;</span>: <span class="function">(<span class="params">webpack_require</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> lodash = <span class="title function_">webpack_require</span>(<span class="string">&quot;lodash&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> <span class="title class_">Vue</span> = <span class="title function_">webpack_require</span>(<span class="string">&quot;vue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><hr><h1 id="vite-简介"><a href="#vite-简介" class="headerlink" title="vite 简介"></a><strong>vite 简介</strong></h1><ol><li><p><strong>模块引入</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>;  <span class="comment">// 直接引入文件，而不使用相对路径或绝对路径</span></span><br><span class="line"><span class="comment">// 浏览器不支持这种引入（如果实现会导致，包里import其他的，会无穷无尽）</span></span><br><span class="line"><span class="comment">// 构建工具支持（不加后缀）：找寻依赖的过程是自当前目录依次向上查找的过程, </span></span><br><span class="line"><span class="comment">// 直到搜寻到根目录或者搜寻到对应依赖为止</span></span><br></pre></td></tr></table></figure></li><li><p><strong>依赖预构建</strong></p><p>首先vite会找到对应的依赖, 然后调用esbuild(对js语法进行处理的一个库), 将其他规范的代码转换成esmodule规范, 然后放到当前目录下的node_modules/.vite/deps, 同时对esmodule规范的各个模块进行统一集成</p><p>解决的3个问题：</p><ol><li>不同的第三方包会有不同的导出格式(这个是vite没法约束人家的事情)</li><li>对路径的处理上可以直接使用.vite/deps, 方便路径重写</li><li>叫做网络多包传输的性能问题(也是原生esmodule规范不敢支持node_modules的原因之一), 有了依赖预构建以后无论他有多少的额外export 和import, vite都会尽可能的将他们进行集成最后只生成一个或者几个模块</li></ol></li><li><p><strong>vite脚手架和vite区别</strong></p><p>yarn create vite如vue cli</p><p>vite对应 webpack</p></li></ol><hr><h1 id="vite-项目体验"><a href="#vite-项目体验" class="headerlink" title="vite 项目体验"></a><strong>vite 项目体验</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yarn init -y <span class="comment">// 初始化一个项目，生成package.json文件</span></span><br><span class="line"><span class="comment">// 不加 y 就需要自己手动配置</span></span><br><span class="line">yarn add vite -D</span><br><span class="line"><span class="comment">// package.json 创建script，如：</span></span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;vite&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><hr><h1 id="vite-环境变量"><a href="#vite-环境变量" class="headerlink" title="vite 环境变量"></a><strong>vite 环境变量</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineConfig, loadEnv&#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"><span class="comment">// dotenv会自动读取.env文件, 并解析这个文件中的对应环境变量 并将其注入到process对象下</span></span><br><span class="line"><span class="comment">// 但是vite考虑到和其他配置的一些冲突问题, 他不会直接注入到process对象下，使用loadEnv解决</span></span><br><span class="line"><span class="keyword">import</span> viteBaseConfig <span class="keyword">from</span> <span class="string">&quot;./vite.base.config&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> viteDevConfig <span class="keyword">from</span> <span class="string">&quot;./vite.dev.config&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> viteProdConfig <span class="keyword">from</span> <span class="string">&quot;./vite.prod.config&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 策略模式</span></span><br><span class="line"><span class="keyword">const</span> envResolver = &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;生产环境&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> (&#123; ...viteBaseConfig, ...viteProdConfig &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;serve&quot;</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开发环境&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>  (&#123; ...viteBaseConfig, ...viteProdConfig &#125;) <span class="comment">// 新配置里是可能会被配置envDir .envA</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(<span class="function">(<span class="params">&#123; command, mode &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 是build 还是serve主要取决于我们敲的命令是开启开发环境还是生产环境</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第二个参数不是必须要使用process.cwd()，当前node 工作目录</span></span><br><span class="line">    <span class="comment">// 第三个参数，文件名如：.env （.env是默认值）</span></span><br><span class="line">    <span class="keyword">const</span> env = <span class="title function_">loadEnv</span>(mode, process.<span class="title function_">cwd</span>(), <span class="string">&quot;.env&quot;</span>);</span><br><span class="line">    <span class="comment">// env 就可以访问到环境变量的值了，服务端就可以解决访问环境变量的值</span></span><br><span class="line">    <span class="keyword">return</span> envResolver[command]();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他配置 vite.prod.config 与 vite.dev.config</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 环境变量命令</span></span><br><span class="line"><span class="comment">// 使用mode指定环境</span></span><br><span class="line">yarn dev --mode development（vite --mode test）</span><br><span class="line"><span class="comment">// .env 公共环境 .env.development 开发环境 .env.production 生产环境</span></span><br><span class="line"><span class="comment">// 先读取.env 其后就是对应的环境文件，相同的后覆盖前面的</span></span><br><span class="line"><span class="comment">// 使用 import.meta.env</span></span><br><span class="line"><span class="comment">// 必须使用VITE_开头，使用envPrefix配置，更改这个前缀</span></span><br></pre></td></tr></table></figure><hr><h1 id="vite原理"><a href="#vite原理" class="headerlink" title="vite原理"></a><strong>vite原理</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mkdir vite-dev-server <span class="comment">// 创建 vite 项目文件夹</span></span><br><span class="line"><span class="comment">// vite是怎么让浏览器可以识别.vue文件的，</span></span><br><span class="line"><span class="comment">// 将vue文件转化为js文件，返回给浏览器识别</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vite 对 css 的处理 （如引入一个 index.css 文件）</span></span><br><span class="line"><span class="comment">// 1. vite在读取到main.js中引用到了index.css</span></span><br><span class="line"><span class="comment">// 2. 直接去使用fs模块去读取index.css中文件内容</span></span><br><span class="line"><span class="comment">// 3. 直接创建一个style标签, 将index.css中文件内容直接copy进style标签里</span></span><br><span class="line"><span class="comment">// 4. 将style标签插入到index.html的head中</span></span><br><span class="line"><span class="comment">// 5. 将该css文件中的内容直接替换为js脚本(方便热更新或者css模块化), 同时设置Content-Type为js 从而让浏览器以JS脚本的形式来执行该css后缀的文件</span></span><br><span class="line"><span class="comment">// 注意：不是直接请求那个css文件</span></span><br></pre></td></tr></table></figure><hr><h1 id="css-module"><a href="#css-module" class="headerlink" title="css module"></a><strong>css module</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. module.css (module是一种约定, 表示需要开启css模块化)</span><br><span class="line">2. 他会将你的所有类名进行一定规则的替换（将footer 替换成 _footer_i22st_1）</span><br><span class="line">3. 同时创建一个映射对象&#123; footer: &quot;_footer_i22st_1&quot; &#125;</span><br><span class="line">4. 将替换过后的内容塞进style标签里然后放入到head标签中 (能够读到index.html的文件内容)</span><br><span class="line">5. 将componentA.module.css内容进行全部抹除, 替换成JS脚本</span><br><span class="line">5. 将创建的映射对象在脚本中进行默认导出</span><br></pre></td></tr></table></figure><hr><h1 id="css-其他配置"><a href="#css-其他配置" class="headerlink" title="css 其他配置"></a><strong>css 其他配置</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite配置 preprocessorOptions（配置预处理器）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// sourceMap：文件之间的索引，开启后样式会直接找到源文件，</span></span><br><span class="line"><span class="comment">// 未开启将不会产生正确的错误位置信息 如果设置了sourceMap, 他就会有一个索引文件map</span></span><br><span class="line"><span class="comment">// sourceMap解决的问题极其的微小, 但是他的实现过程非常的复杂</span></span><br></pre></td></tr></table></figure><hr><h1 id="postcss"><a href="#postcss" class="headerlink" title="postcss"></a><strong>postcss</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用postcss</span></span><br><span class="line">yarn add postcss-cli postcss -D <span class="comment">// 安装依赖</span></span><br><span class="line"><span class="comment">// postcss-cli让脚手架我们可以输入命令，安装postcss</span></span><br><span class="line">postcss.<span class="property">config</span>.<span class="property">js</span> <span class="comment">// 书写描述文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// css代码 --&gt; postcss ---&gt; less --&gt; 再次对未来的高级css语法进行降级 --&gt; 前缀补全 --&gt; 浏览器客户端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 postcss 预设，包含一系列的插件（如：语法降级、编译模板等）</span></span><br><span class="line"><span class="comment">// 目前来说 less和sass等一系列预处理器的postcss插件已经停止维护了less插件</span></span><br><span class="line"><span class="comment">// 用less和sass编译完了, 然后你把编译结果给postcss，新的说法: postcss是后处理器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接单独js文件 postcss.config.js</span></span><br><span class="line"><span class="keyword">const</span> postcssPresetEnv = <span class="built_in">require</span>(<span class="string">&quot;postcss-preset-env&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>); <span class="comment">// 做路径处理的</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="title function_">postcssPresetEnv</span>(&#123;</span><br><span class="line">            <span class="attr">importFrom</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./variable.css&quot;</span>), </span><br><span class="line">            <span class="comment">// 就好比你现在让postcss去知道 有一些全局变量他需要记下来</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="vite加载静态资源"><a href="#vite加载静态资源" class="headerlink" title="vite加载静态资源"></a><strong>vite加载静态资源</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sylasPicUrl <span class="keyword">from</span> <span class="string">&quot;sylas.png&quot;</span>; <span class="comment">// 图片引入</span></span><br><span class="line"><span class="keyword">import</span> sylasPicUrl <span class="keyword">from</span> <span class="string">&quot;/sylas.png?raw&quot;</span>; <span class="comment">// 图片引入（Buffer），默认是url</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// json 文件引入</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;alice&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">&quot;a.josn&quot;</span>; <span class="comment">// json引入，默认引入所以，并且打印是自动解析了json</span></span><br><span class="line"><span class="keyword">import</span> &#123;name&#125; <span class="keyword">from</span> <span class="string">&quot;a.josn&quot;</span>; <span class="comment">// json可以直接按需引入（摇树优化）</span></span><br></pre></td></tr></table></figure><hr><h1 id="直接使用svg"><a href="#直接使用svg" class="headerlink" title="直接使用svg"></a><strong>直接使用svg</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite 可以直接使用svg</span></span><br><span class="line"><span class="keyword">import</span> svgRaw <span class="keyword">from</span> <span class="string">&quot;./assets/svgs/fullScreen.svg?raw&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = svgRaw;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> svgElement = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;svg&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">svgElement.<span class="property">onmouseenter</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">fill</span> = <span class="string">&quot;red&quot;</span>; <span class="comment">// 修改颜色</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="vite-插件"><a href="#vite-插件" class="headerlink" title="vite 插件"></a><strong>vite 插件</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插件的定义</span></span><br><span class="line"><span class="comment">// vite会在生命周期的不同阶段中去调用不同的插件以达到不同的目的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插件的使用</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ViteAliases</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vite-aliases&quot;</span>; <span class="comment">// vite别名生成</span></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title class_">ViteAliases</span>() <span class="comment">// 一般是个函数调用，其中可以有配置对象</span></span><br><span class="line">], </span><br></pre></td></tr></table></figure><p><strong>插件原理</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如：手写Vite-aliases其实就是抢在vite执行配置文件之前去改写配置文件</span></span><br><span class="line"><span class="comment">// 通过vite.config.js 返回出去的配置对象以及我们在插件的config生命周期中返回的对象都不是最终的一个配置对象</span></span><br><span class="line"><span class="comment">// vite会把这几个配置对象进行一个merge合并 &#123;...defaultConfig, ...specifyConfig&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vite 的生命周期 https://cn.vitejs.dev/guide/api-plugin.html#vite-specific-hooks</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------</span></span><br><span class="line"><span class="comment">// viteAliases.js</span></span><br><span class="line"><span class="comment">// vite的插件必须返回给vite一个配置对象</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">diffDirAndFile</span>(<span class="params">dirFilesArr = [], basePath = <span class="string">&quot;&quot;</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = &#123;</span><br><span class="line">        <span class="attr">dirs</span>: [],</span><br><span class="line">        <span class="attr">files</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">    dirFilesArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 我直接用异步的方式去写的</span></span><br><span class="line">        <span class="keyword">const</span> currentFileStat = fs.<span class="title function_">statSync</span>(path.<span class="title function_">resolve</span>(__dirname, basePath + <span class="string">&quot;/&quot;</span> + name));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;current file stat&quot;</span>, name, currentFileStat.<span class="title function_">isDirectory</span>());</span><br><span class="line">        <span class="keyword">const</span> isDirectory = currentFileStat.<span class="title function_">isDirectory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isDirectory) &#123;</span><br><span class="line">            result.<span class="property">dirs</span>.<span class="title function_">push</span>(name);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.<span class="property">files</span>.<span class="title function_">push</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTotalSrcDir</span>(<span class="params">keyName</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = fs.<span class="title function_">readdirSync</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>));</span><br><span class="line">    <span class="keyword">const</span> diffResult = <span class="title function_">diffDirAndFile</span>(result, <span class="string">&quot;../src&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;diffResult&quot;</span>, diffResult);</span><br><span class="line">    <span class="keyword">const</span> resolveAliasesObj = &#123;&#125;; <span class="comment">// 放的就是一个一个的别名配置 @assets: xxx</span></span><br><span class="line">    diffResult.<span class="property">dirs</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">dirName</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> key = <span class="string">`<span class="subst">$&#123;keyName&#125;</span><span class="subst">$&#123;dirName&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">const</span> absPath = path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span> + <span class="string">&quot;/&quot;</span> + dirName);</span><br><span class="line">        resolveAliasesObj[key] = absPath;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resolveAliasesObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    keyName = <span class="string">&quot;@&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">&#125; = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="title function_">config</span>(<span class="params">config, env</span>) &#123;</span><br><span class="line">            <span class="comment">// 只是传给你 有没有执行配置文件: 没有</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;config&quot;</span>, config, env);</span><br><span class="line">            <span class="comment">// config: 目前的一个配置对象</span></span><br><span class="line">            <span class="comment">// production  development  serve build yarn dev yarn build </span></span><br><span class="line">            <span class="comment">// env: mode: string, command: string</span></span><br><span class="line">            <span class="comment">// config函数可以返回一个对象, 这个对象是部分的viteconfig配置【其实就是你想改的那一部分】</span></span><br><span class="line">            <span class="keyword">const</span> resolveAliasesObj = <span class="title function_">getTotalSrcDir</span>(keyName);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resolve&quot;</span>, resolveAliasesObj);</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="comment">// 在这我们要返回一个resolve出去, 将src目录下的所有文件夹进行别名控制</span></span><br><span class="line">                <span class="comment">// 读目录</span></span><br><span class="line">                <span class="attr">resolve</span>: &#123;</span><br><span class="line">                    <span class="attr">alias</span>: resolveAliasesObj</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用插件 vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyViteAliases</span> <span class="keyword">from</span> <span class="string">&quot;./plugins/ViteAliases&quot;</span>;</span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title class_">MyViteAliases</span>(),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>vite-plugin-html 插件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作用：改变 HTML 的 title ，控制整个 html 文件中内容</span></span><br><span class="line">webpack --&gt; webpack-html-plugin / clean-webpack-<span class="title function_">plugin</span> (<span class="attr">clean</span>: <span class="literal">true</span>)</span><br><span class="line"><span class="comment">// vite内置了非常多的插件，开发者不需要承担这么高的心智负担</span></span><br><span class="line"><span class="comment">// 如集成了 css-loader less-loader ts-loader 等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ejs在服务端会用的比较频繁 因为服务端可能经常会动态的去修改index.html的内容</span></span><br><span class="line">&lt;title&gt;</span><br><span class="line">    &lt;!-- ejs语法，类似于 vue 的插值语法 --&gt;</span><br><span class="line">    &lt;%= title %&gt;  </span><br><span class="line">&lt;/title&gt;</span><br><span class="line"><span class="comment">// 手写 CreateHtmlPlugin.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 转换html的 </span></span><br><span class="line">    <span class="comment">// 将我们插件的一个执行时机提前 </span></span><br><span class="line">    <span class="attr">transformIndexHtml</span>: &#123;</span><br><span class="line">      <span class="attr">enforce</span>: <span class="string">&quot;pre&quot;</span>,</span><br><span class="line">      <span class="attr">transform</span>: <span class="function">(<span class="params">html, ctx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ctx 表示当前整个请求的一个执行期上下文: api /index.html  /user/userlist json  get post headers</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;html&quot;</span>, html);</span><br><span class="line">        <span class="keyword">return</span> html.<span class="title function_">replace</span>(<span class="regexp">/&lt;%= title %&gt;/g</span>, options.<span class="property">inject</span>.<span class="property">data</span>.<span class="property">title</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CreateHtmlPlugin</span> <span class="keyword">from</span> <span class="string">&quot;./plugins/CreateHtmlPlugin&quot;</span>;</span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">createHtmlPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">inject</span>: &#123;</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&quot;主页2&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>vite-plugin-mock插件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// 在 vite 中使用 mock</span><br><span class="line">yarn add vite-plugin-mock mockjs -D // 安装依赖</span><br><span class="line">// 使用 vite.config.js</span><br><span class="line">import &#123; viteMockServe &#125; from &quot;vite-plugin-mock&quot;; // 引用依赖</span><br><span class="line">plugins:[</span><br><span class="line">    viteMockServe()</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">// 根目录新建 mock文件夹</span><br><span class="line">// mock/index.js</span><br><span class="line">const mockJS = require(&quot;mockjs&quot;); // 用来生成假数据，并不是用来启动服务</span><br><span class="line"></span><br><span class="line">const userList = mockJS.mock(&#123;</span><br><span class="line">  &quot;data|100&quot;: [&#123;</span><br><span class="line">    name: &quot;@cname&quot;, // 表示生成不同的中文名</span><br><span class="line">    // ename: mockJS.Random.name(), // 生成不同的英文名</span><br><span class="line">    &quot;id|+1&quot;: 1, // </span><br><span class="line">    time: &quot;@time&quot;,</span><br><span class="line">    date: &quot;@date&quot;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">module.exports = [</span><br><span class="line">  &#123;</span><br><span class="line">    method: &quot;post&quot;,</span><br><span class="line">    url: &quot;/api/users&quot;,</span><br><span class="line">    response: (&#123; body &#125;) =&gt; &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        code: 200,</span><br><span class="line">        msg: &quot;success&quot;,</span><br><span class="line">        data: userList</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>vite-plugin-mock插件实现原理（手写）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="title function_">default</span> (options) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 做的最主要的事情就是拦截http请求</span></span><br><span class="line">  <span class="comment">// D当我们使用fetch或者axios去请求的</span></span><br><span class="line">  <span class="comment">// axios baseUrl // 请求地址 </span></span><br><span class="line">  <span class="comment">// 当打给本地的开发服务器的时候 viteserver服务器接管</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">configureServer</span>(<span class="params">server</span>) &#123;</span><br><span class="line">      <span class="comment">// 服务器的相关配置</span></span><br><span class="line">      <span class="comment">// req, 请求对象 --&gt; 用户发过来的请求, 请求头请求体 url cookie </span></span><br><span class="line">      <span class="comment">// res: 响应对象, - res.header</span></span><br><span class="line">      <span class="comment">// next: 是否交给下一个中间件, 调用next方法会将处理结果交给下一个中间件</span></span><br><span class="line">      <span class="keyword">const</span> mockStat = fs.<span class="title function_">statSync</span>(<span class="string">&quot;mock&quot;</span>);</span><br><span class="line">      <span class="keyword">const</span> isDirectory = mockStat.<span class="title function_">isDirectory</span>();</span><br><span class="line">      <span class="keyword">let</span> mockResult = [];</span><br><span class="line">      <span class="keyword">if</span> (isDirectory) &#123;</span><br><span class="line">        <span class="comment">// process.cwd() ---&gt; 获取你当前的执行根目录</span></span><br><span class="line">        mockResult = <span class="built_in">require</span>(path.<span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), <span class="string">&quot;mock/index.js&quot;</span>));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result&quot;</span>, mockResult);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      server.<span class="property">middlewares</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;req&quot;</span>, req.<span class="property">url</span>);</span><br><span class="line">        <span class="comment">// 看我们请求的地址在mockResult里有没有</span></span><br><span class="line">        <span class="keyword">const</span> matchItem = mockResult.<span class="title function_">find</span>(<span class="function"><span class="params">mockDescriptor</span> =&gt;</span> mockDescriptor.<span class="property">url</span> === req.<span class="property">url</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;matchItem&quot;</span>, matchItem);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (matchItem) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进来了&quot;</span>, );</span><br><span class="line">          <span class="keyword">const</span> responseData = matchItem.<span class="title function_">response</span>(req);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;responseData&quot;</span>, responseData);</span><br><span class="line">          <span class="comment">// 强制设置一下他的请求头的格式为json</span></span><br><span class="line">          res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">          res.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(responseData)); <span class="comment">// 设置请求头 异步的</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">next</span>(); <span class="comment">// 你不调用next 你又不响应 也会响应东西</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)  <span class="comment">// 插件 === middlewares </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="vite-与-TypeScript"><a href="#vite-与-TypeScript" class="headerlink" title="vite 与 TypeScript"></a><strong>vite 与 TypeScript</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vite 默认支持 TS</span></span><br><span class="line">vite-plugin-checker <span class="comment">// 安装插件，在开发时校验ts语法（直接浏览器弹框报错）</span></span><br><span class="line"><span class="keyword">import</span> checker <span class="keyword">from</span> <span class="string">&quot;vite-plugin-checker&quot;</span></span><br><span class="line"><span class="attr">plugins</span>:[</span><br><span class="line">    <span class="title function_">checker</span>(&#123;typescript : <span class="literal">true</span>&#125;)</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 根目录创建 ts.config.json 配置文件</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;skipLibCheck&quot;</span>: <span class="literal">false</span> , <span class="comment">// 是否跳过 node_modules 检查</span></span><br><span class="line">        <span class="string">&quot;module&quot;</span>: <span class="string">&quot;esNext&quot;</span> <span class="comment">// 需改默认转化成es3的配置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// package.json 文件中修改打包命令，TS语法错误将不能正常打包完成</span></span><br><span class="line"><span class="attr">script</span>:&#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;tsc --noEmit &amp;&amp; vite build&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三斜线文件 vite-env.d.ts 语法提示</span></span><br><span class="line"><span class="comment">/// &lt;reference types=&quot;vite/client&quot; /&gt;</span></span><br><span class="line">interface <span class="title class_">ImportMetaEnv</span> &#123;</span><br><span class="line">    readonly <span class="attr">VITE_PROXY_TARGET</span>: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="性能优化optimize"><a href="#性能优化optimize" class="headerlink" title="性能优化optimize"></a><strong>性能优化optimize</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分包策略</span></span><br><span class="line"><span class="comment">// 就是把一些不会常规更新的文件，进行单独打包（如：使用lodash的forEach）</span></span><br><span class="line"><span class="comment">// 浏览器缓存相同文件，文件名不变就不会重新请求（每次打包后端hash后缀不同）</span></span><br><span class="line"><span class="comment">// 使用相关方法后，生成的js文件就会有很长lodash的代码（每次文件名变化就会重新请求）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// gizp压缩</span></span><br><span class="line">yarn add vite-plugin-compression <span class="comment">// 安装插件</span></span><br><span class="line"><span class="comment">// 正常插件使用 一个函数即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态导入</span></span><br><span class="line"><span class="keyword">import</span>() <span class="comment">// es法语自带的，返回一个promise</span></span><br><span class="line"><span class="keyword">import</span>().<span class="title function_">then</span>() <span class="comment">// 一般在路由使用比较多</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CND 加速</span></span><br><span class="line"><span class="comment">// 将第三方的库使用cdn加载</span></span><br><span class="line">yarn add vite-plugin-cdn-<span class="keyword">import</span> <span class="comment">// 安装插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 跨域</span></span><br><span class="line"><span class="comment">// 后端处理：ngnix代理（与前端vite服务器一样原理）、配置身份标记（Access-Control-Allow-Origin）</span></span><br></pre></td></tr></table></figure><hr><h1 id="Vite-配置"><a href="#Vite-配置" class="headerlink" title="Vite 配置"></a><strong>Vite 配置</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">optimizeDeps</span>: &#123;</span><br><span class="line">    <span class="attr">exclude</span>: [], <span class="comment">// 将指定数组中的依赖不进行依赖预构建</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">envPrefix</span>: <span class="string">&quot;ENV_&quot;</span>, <span class="comment">// 配置vite注入客户端环境变量校验的env前缀</span></span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="comment">// 对css的行为进行配置</span></span><br><span class="line">    <span class="comment">// modules配置最终会丢给postcss modules</span></span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">      <span class="comment">// 是对css模块化的默认行为进行覆盖</span></span><br><span class="line">      <span class="attr">localsConvention</span>: <span class="string">&quot;camelCaseOnly&quot;</span>, <span class="comment">// 修改生成的配置对象的key的展示形式(驼峰还是中划线形式)</span></span><br><span class="line">      <span class="attr">scopeBehaviour</span>: <span class="string">&quot;local&quot;</span>, <span class="comment">// 配置当前的模块化行为是模块化还是全局化 (有hash就是开启了模块化的一个标志, 因为他可以保证产生不同的hash值来控制我们的样式类名不被覆盖)</span></span><br><span class="line">      <span class="comment">// generateScopedName: &quot;[name]_[local]_[hash:5]&quot; // https://github.com/webpack/loader-utils#interpolatename</span></span><br><span class="line">      <span class="comment">// generateScopedName: (name, filename, css) =&gt; &#123;</span></span><br><span class="line">      <span class="comment">// name -&gt; 代表的是你此刻css文件中的类名</span></span><br><span class="line">      <span class="comment">// filename -&gt; 是你当前css文件的绝对路径</span></span><br><span class="line">      <span class="comment">// css -&gt; 给的就是你当前样式</span></span><br><span class="line">      <span class="comment">//     console.log(&quot;name&quot;, name, &quot;filename&quot;, filename, &quot;css&quot;, css); // 这一行会输出在哪？？？ 输出在node</span></span><br><span class="line">      <span class="comment">// 配置成函数以后, 返回值就决定了他最终显示的类型</span></span><br><span class="line">      <span class="comment">//     return `$&#123;name&#125;_$&#123;Math.random().toString(36).substr(3, 8) &#125;`;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      <span class="attr">hashPrefix</span>: <span class="string">&quot;hello&quot;</span>, <span class="comment">// 生成hash会根据你的类名 + 一些其他的字符串(文件名 + 他内部随机生成一个字符串)去进行生成, 如果你想要你生成hash更加的独特一点, 你可以配置hashPrefix, 你配置的这个字符串会参与到最终的hash生成, （hash: 只要你的字符串有一个字不一样, 那么生成的hash就完全不一样, 但是只要你的字符串完全一样, 生成的hash就会一样）</span></span><br><span class="line">      <span class="attr">globalModulePaths</span>: [<span class="string">&quot;./componentB.module.css&quot;</span>], <span class="comment">// 代表你不想参与到css模块化的路径</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">preprocessorOptions</span>: &#123;</span><br><span class="line">      <span class="comment">// key + config key代表预处理器的名</span></span><br><span class="line">      <span class="attr">less</span>: &#123;</span><br><span class="line">        <span class="comment">// 整个的配置对象都会最终给到less的执行参数（全局参数）中去</span></span><br><span class="line">        <span class="comment">// 在webpack里就给less-loader去配置就好了</span></span><br><span class="line">        <span class="attr">math</span>: <span class="string">&quot;always&quot;</span>,</span><br><span class="line">        <span class="attr">globalVars</span>: &#123;</span><br><span class="line">          <span class="comment">// 全局变量</span></span><br><span class="line">          <span class="attr">mainColor</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devSourcemap</span>: <span class="literal">true</span>, <span class="comment">// 开启css的sourceMap（文件索引）</span></span><br><span class="line">    <span class="attr">postcss</span>: &#123;&#125;, <span class="comment">// 配置postcss相关</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./src&quot;</span>), <span class="comment">// 设置别名, 以后我们在其他组件中可以使用@来代替src这个目录</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">minify</span>: <span class="literal">false</span>, <span class="comment">// 设置后打包js会没有压缩，禁用最小化混淆</span></span><br><span class="line">    <span class="comment">// 构建生产包时的一些配置策略</span></span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="comment">// 配置rollup的一些构建策略</span></span><br><span class="line">      <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">// 控制输出</span></span><br><span class="line">        <span class="comment">// 在rollup里面, hash代表将你的文件名和文件内容进行组合计算得来的结果</span></span><br><span class="line">        <span class="attr">assetFileNames</span>: <span class="string">&quot;[hash].[name].[ext]&quot;</span>,</span><br><span class="line">        <span class="title function_">manualChunks</span>(<span class="params">id</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (id.<span class="title function_">includes</span>(<span class="string">&quot;node_modules&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> id</span><br><span class="line">              .<span class="title function_">toString</span>()</span><br><span class="line">              .<span class="title function_">split</span>(<span class="string">&quot;node_modules/&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">              .<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">              .<span class="title function_">toString</span>();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">assetsInlineLimit</span>: <span class="number">4096000</span>, <span class="comment">// 4000kb</span></span><br><span class="line">    <span class="attr">outDir</span>: <span class="string">&quot;dist&quot;</span>, <span class="comment">// 配置输出目录</span></span><br><span class="line">    <span class="attr">assetsDir</span>: <span class="string">&quot;static&quot;</span>, <span class="comment">// 配置输出目录中的静态资源目录</span></span><br><span class="line">    <span class="attr">emptyOutDir</span>: <span class="literal">true</span>, <span class="comment">// 清除输出目录中的所有文件，默认为true</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Vite </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端文件流</title>
      <link href="/2022/09/12/%E5%89%8D%E7%AB%AF%E6%96%87%E4%BB%B6%E6%B5%81/"/>
      <url>/2022/09/12/%E5%89%8D%E7%AB%AF%E6%96%87%E4%BB%B6%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文记录 JavaScript 中的文件流，持续更新中……</p><hr><h1 id="使用Blob下载文件"><a href="#使用Blob下载文件" class="headerlink" title="使用Blob下载文件"></a><strong>使用Blob下载文件</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟下载请求</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">download</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">`http://localhost:2000/download`</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span>,</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 如果接口请求填写了 responseType: &#x27;blob&#x27;，可以不需要new blob</span></span><br><span class="line">        <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([result.<span class="property">data</span>], &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;image/jpeg&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">        <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        a.<span class="property">download</span> = <span class="string">`1.png`</span>;</span><br><span class="line">        a.<span class="property">href</span> = url;</span><br><span class="line">        a.<span class="title function_">click</span>()</span><br><span class="line"></span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下载函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">downloadFile</span> = <span class="keyword">async</span> (<span class="params">params, fileName</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 我们使用axios设置接口返回类型 responseType: &quot;blob&quot;, 所以这里从后端返回的是blob。</span></span><br><span class="line">  <span class="keyword">const</span> results = <span class="keyword">await</span> <span class="title function_">download</span>(params);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  a.<span class="property">download</span> = fileName + <span class="string">&quot;.xlsx&quot;</span>;</span><br><span class="line">  <span class="comment">// 生成blob url。这里可以使用Blob对象或者File对象</span></span><br><span class="line">  a.<span class="property">href</span> = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(results);</span><br><span class="line">  a.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a);</span><br><span class="line">  a.<span class="title function_">click</span>();</span><br><span class="line">  <span class="comment">// 释放内存</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(a.<span class="property">href</span>);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(a);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="File"><a href="#File" class="headerlink" title="File"></a><strong>File</strong></h1><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader">MDN文档</a> <a href="https://juejin.cn/post/6975129989901451301#heading-2">重学JS | 玩转File API （掘金）</a></p><p>FileReader 对象允许 Web 应用程序异步读取存储在用户计算机上的文件，支持读取 File 或 Blob 对象指定要读取的文件或数据，是一种异步文件读取机制。</p><h2 id="FileReader-常用-api"><a href="#FileReader-常用-api" class="headerlink" title="FileReader 常用 api"></a><strong>FileReader 常用 api</strong></h2><p><strong>方法</strong></p><ol><li>readAsText(file,encoding)：以纯文本的形式读取文件</li><li>readAsDataURL(file)：读取文件并将文件以数据URI的格式保存到result</li><li>readAsBinaryString(file)：读取文件并将一个字符串保存在result属性中，字符串中的每个字符表示一字节</li><li>readAsArrayBuffer(file)：读取文件并将一个包含文件内容的ArrayBuffer保存到result属性中</li></ol><p><strong>事件</strong></p><ol><li>progress：表示又读取了数据，50ms左右触发一次</li><li>error：发生了错误触发</li><li>load：已经读完了整个文件触发</li><li>abort：中断读取过程</li><li>loadend：整个过程结束，load、error、abort事件触发后触发的事件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>() <span class="comment">// 创建一个 fileReader 对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> file = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>) <span class="comment">// 获取节点</span></span></span><br><span class="line"><span class="language-javascript">file.<span class="property">onchange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> fileType = <span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>]; <span class="comment">// 获取上传的文件</span></span></span><br><span class="line"><span class="language-javascript">    fileReader.<span class="title function_">readAsDataURL</span>(<span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>]); <span class="comment">// base64 方式读取</span></span></span><br><span class="line"><span class="language-javascript">    fileReader.<span class="property">onload</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123; <span class="comment">// 读取操作成功完成时调用</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> result = e.<span class="property">target</span>.<span class="property">result</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// 上传文件转的地址</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// ----------------------</span><br><span class="line">// 其他补充</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;file&#x27;</span> <span class="attr">onchange</span>=<span class="string">&quot;fileChange(this)&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;output&#x27;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fileChange</span>(<span class="params">target</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 得到第一个上传的文件对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> file = target.<span class="property">files</span>[<span class="number">0</span>]，</span></span><br><span class="line"><span class="language-javascript">          output = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;output&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">          type = <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(<span class="regexp">/image/</span>.<span class="title function_">test</span>(file.<span class="property">type</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">          type = <span class="string">&#x27;image&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          reader.<span class="title function_">readerAsDataURL</span>(file)</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          type = <span class="string">&#x27;text&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          reader.<span class="title function_">readAsText</span>(file)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 文件读取进度</span></span></span><br><span class="line"><span class="language-javascript">        reader.<span class="property">onprogress</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span>(e.<span class="property">lengthComputable</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前读取进度为&#x27;</span>:e.<span class="property">loaded</span>+<span class="string">&#x27;/&#x27;</span>+e.<span class="property">total</span>)</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 文件读取错误</span></span></span><br><span class="line"><span class="language-javascript">        reader.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 1: 未找到文件 2：安全性错误 3：读取中断 4：文件不可读 5:编码错误</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">var</span> errCode = reader.<span class="property">error</span>.<span class="property">code</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 文件读取完成</span></span></span><br><span class="line"><span class="language-javascript">        reader.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// reader.result: 读取的文件</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">var</span> html = type===<span class="string">&#x27;image&#x27;</span>?<span class="string">`&lt;img  src=&#x27;<span class="subst">$&#123;reader.result&#125;</span>&#x27;&gt;`</span>:reader.<span class="property">result</span></span></span><br><span class="line"><span class="language-javascript">          output.<span class="property">innerHtml</span> = html</span></span><br><span class="line"><span class="language-javascript">        &#125;   </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 整个流程结束</span></span></span><br><span class="line"><span class="language-javascript">        reader.<span class="property">onloadend</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="URL-createObjectURL-方法"><a href="#URL-createObjectURL-方法" class="headerlink" title="URL.createObjectURL()方法"></a><strong>URL.createObjectURL()方法</strong></h2><p>接收一个参数表示指定的 File 对象或 Blob 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;inp&quot;</span>);</span><br><span class="line">file.<span class="property">onchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(<span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>])</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除 url</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(url)</span><br></pre></td></tr></table></figure><hr><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a><strong>文件上传</strong></h1><p><strong>单张图片上传</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一般隐藏 input 自定义样式，其他div点击调用 input.click() 即可</span></span><br><span class="line"><span class="comment">// &lt;input type=&quot;file&quot; accept=&quot;image/*&quot;&gt;  表示上传任意图片格式</span></span><br><span class="line"><span class="comment">// 1.使用 FORM-DATA</span></span><br><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file); <span class="comment">// 此处的 file 是input中拿到的</span></span><br><span class="line"><span class="comment">// 2.使用 fileReader 的 url （比较少用）</span></span><br></pre></td></tr></table></figure><p><strong>一次多张图片上传</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;uploadBox clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card button&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;uploadInp&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;div class=&quot;card&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;img src=&quot;images/1.png&quot; alt=&quot;&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;div class=&quot;progress&quot;&gt;</span></span><br><span class="line"><span class="comment">                &lt;div class=&quot;line&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">            &lt;/div&gt;</span></span><br><span class="line"><span class="comment">            &lt;div class=&quot;mark&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        &lt;/div&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//请求封装</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">postRequest</span>(<span class="params">url, data, config</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                config = config || &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> axios.<span class="title function_">post</span>(<span class="string">`xxx<span class="subst">$&#123;url&#125;</span>`</span>, data, config).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> response.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//文件读取</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">fileReader</span>(<span class="params">file</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>;</span></span><br><span class="line"><span class="language-javascript">                    reader.<span class="title function_">readAsDataURL</span>(file);</span></span><br><span class="line"><span class="language-javascript">                    reader.<span class="property">onload</span> = <span class="function"><span class="params">ev</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">resolve</span>(ev.<span class="property">target</span>.<span class="property">result</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取 DOM</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> uploadBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.uploadBox&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">                button = uploadBox.<span class="title function_">querySelector</span>(<span class="string">&#x27;.button&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">                uploadInp = uploadBox.<span class="title function_">querySelector</span>(<span class="string">&#x27;#uploadInp&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 调用input上传文件</span></span></span><br><span class="line"><span class="language-javascript">            button.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                uploadInp.<span class="title function_">click</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            uploadInp.<span class="property">onchange</span> = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> self = <span class="variable language_">this</span>,</span></span><br><span class="line"><span class="language-javascript">                    files = <span class="title class_">Array</span>.<span class="title function_">from</span>(self.<span class="property">files</span>);  <span class="comment">// 获取上传文件列表，伪数组转化为数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (files.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 构建上传列表</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> uploadList = [];</span></span><br><span class="line"><span class="language-javascript">                files.<span class="title function_">forEach</span>(<span class="function">(<span class="params">file, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    uploadList[index] = &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">file</span>: file,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">base64</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">card</span>: <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// BASE64 和动态创建 Card</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> base64List = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(files.<span class="title function_">map</span>(<span class="function"><span class="params">file</span> =&gt;</span> <span class="title function_">fileReader</span>(file))),</span></span><br><span class="line"><span class="language-javascript">                    frag = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();  <span class="comment">// 创建文档碎片</span></span></span><br><span class="line"><span class="language-javascript">                base64List.<span class="title function_">forEach</span>(<span class="function">(<span class="params">base64, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> card = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    card.<span class="property">className</span> = <span class="string">&#x27;card&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    card.<span class="property">innerHTML</span> = <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                        &lt;img src=&quot;<span class="subst">$&#123;base64&#125;</span>&quot; alt=&quot;&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                        &lt;div class=&quot;progress&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                            &lt;div class=&quot;line&quot;&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                        &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                        &lt;div class=&quot;mark&quot;&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                    `</span>;</span></span><br><span class="line"><span class="language-javascript">                    frag.<span class="title function_">appendChild</span>(card);  <span class="comment">// 防止多次真实DOM 插入 card</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//完善上传列表</span></span></span><br><span class="line"><span class="language-javascript">                    uploadList[index].<span class="property">base64</span> = base64;</span></span><br><span class="line"><span class="language-javascript">                    uploadList[index].<span class="property">card</span> = card;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                uploadBox.<span class="title function_">appendChild</span>(frag);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 按照上传列表，批量上传图片 &amp;&amp; 监听进度</span></span></span><br><span class="line"><span class="language-javascript">                uploadList.<span class="title function_">forEach</span>(<span class="keyword">async</span> item =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        file,</span></span><br><span class="line"><span class="language-javascript">                        base64,</span></span><br><span class="line"><span class="language-javascript">                        card</span></span><br><span class="line"><span class="language-javascript">                    &#125; = item;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">chunk</span>: <span class="built_in">encodeURIComponent</span>(base64),</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">filename</span>: file.<span class="property">name</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                        config = &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span></span></span><br><span class="line"><span class="language-javascript">                            &#125;,</span></span><br><span class="line"><span class="language-javascript">                            <span class="comment">// 上传进度检测</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="title function_">onUploadProgress</span>(<span class="params">ev</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="comment">// ev.loaded &amp;&amp; ev.total</span></span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">let</span> ratio = ev.<span class="property">loaded</span> / ev.<span class="property">total</span> * <span class="number">100</span> + <span class="string">&#x27;%&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                                card.<span class="title function_">querySelector</span>(<span class="string">&#x27;.line&#x27;</span>).<span class="property">style</span>.<span class="property">width</span> = ratio;</span></span><br><span class="line"><span class="language-javascript">                            &#125;</span></span><br><span class="line"><span class="language-javascript">                        &#125;;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> response = <span class="keyword">await</span> <span class="title function_">postRequest</span>(<span class="string">&#x27;/upload&#x27;</span>, <span class="title class_">Qs</span>.<span class="title function_">stringify</span>(data), config);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (response.<span class="property">code</span> === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 上传成功</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">await</span> <span class="title function_">delay</span>();</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">let</span> progress = card.<span class="title function_">querySelector</span>(<span class="string">&#x27;.progress&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">                            mark = card.<span class="title function_">querySelector</span>(<span class="string">&#x27;.mark&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                        card.<span class="title function_">removeChild</span>(progress);</span></span><br><span class="line"><span class="language-javascript">                        card.<span class="title function_">removeChild</span>(mark);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;)();</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>拖拽上传</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;div class=&quot;uploadBox&quot; contenteditable&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">// 必须添加 contenteditable 可编辑属性</span></span><br><span class="line"><span class="keyword">let</span> uploadBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.uploadBox&#x27;</span>);</span><br><span class="line">uploadBox.<span class="property">ondrop</span> = <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span><br><span class="line">    ev.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="comment">// 获取拖拽放置到盒子中的文件</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ev.<span class="property">dataTransfer</span>.<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他事件</span></span><br><span class="line">uploadBox.<span class="property">ondragenter</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    uploadBox.<span class="property">innerHTML</span> = <span class="string">&#x27;请释放鼠标&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span></span><br><span class="line">uploadBox.<span class="property">ondragover</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    uploadBox.<span class="property">innerHTML</span> = <span class="string">&#x27;一直触发hover&#x27;</span> + ++num;</span><br><span class="line">&#125;;</span><br><span class="line">uploadBox.<span class="property">ondragleave</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    uploadBox.<span class="property">innerHTML</span> = <span class="string">&#x27;请将文件拖拽到此区域&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p><strong>补充</strong></p><p>参考：<a href="https://juejin.cn/post/7046313942938812424">掘金</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.字符编码</span></span><br><span class="line"><span class="comment">// 两者区别为：encodeURI的编码范围没有小一点（有点符号不会被编码）</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;abc/:&#x27;</span></span><br><span class="line"><span class="built_in">encodeURI</span>(str); <span class="comment">// 编码成 abc/:</span></span><br><span class="line"><span class="built_in">decodeURI</span>() <span class="comment">// 解码</span></span><br><span class="line"><span class="built_in">encodeURIComponent</span>(str); <span class="comment">// abc%2F%3A</span></span><br><span class="line"><span class="built_in">decodeURIComponent</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 位、字节、字的概念</span></span><br><span class="line"><span class="comment">// 位表示计算机中的0和1、一字节为8位、字可能为2字节或者4字节、8字节</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ASCII、unicode、GB2312/GBK都是是字符集，定义每个字符对应的数字。</span></span><br><span class="line"><span class="comment">// UTF-8、UTF-16等是unicode字符集的编码格式，定义“字符对应的数字”如何以二进制的方式存储。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// js 中的 File类</span></span><br><span class="line"><span class="keyword">let</span> file = <span class="keyword">new</span> <span class="title class_">File</span>(array, name,options)</span><br><span class="line"><span class="comment">// array：由ArrayBuffer, ArrayBufferView, Blob, DOMString 等对象构成,</span></span><br><span class="line"><span class="comment">// 如果是数组每一个元素对应着文件中一行的内容</span></span><br><span class="line"><span class="comment">// name: 文件名</span></span><br><span class="line"><span class="comment">// options：设置一些属性，type属性、lastModified</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 前端知识记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3</title>
      <link href="/2022/08/14/vue3/"/>
      <url>/2022/08/14/vue3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>vue3的学习记录</p><hr><h1 id="vue3新的特性"><a href="#vue3新的特性" class="headerlink" title="vue3新的特性"></a><strong>vue3新的特性</strong></h1><blockquote><p>Composition API（组合API）</p><ul><li>setup配置</li><li>ref与reactive</li><li>watch与watchEffect</li><li>provide与inject</li><li>……</li></ul></blockquote><blockquote><ol><li>新的内置组件</li></ol><ul><li>Fragment</li><li>Teleport</li><li>Suspense</li></ul><ol start="2"><li>其他改变</li></ol><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为 v-on 的修饰符</li><li>……</li></ul></blockquote><hr><h1 id="vite"><a href="#vite" class="headerlink" title="vite"></a><strong>vite</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">## 不需要全局安装</span><br><span class="line">## 创建工程</span><br><span class="line">yarn create vite</span><br><span class="line">## 安装依赖</span><br><span class="line">yarn</span><br><span class="line">## 运行</span><br><span class="line">yarn dev</span><br></pre></td></tr></table></figure><p>参考：<a href="https://juejin.cn/post/7030992475271495711">vue3保姆级教程</a></p><hr><h1 id="vue3-cli项目分析"><a href="#vue3-cli项目分析" class="headerlink" title="vue3-cli项目分析"></a><strong>vue3-cli项目分析</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js 分析</span></span><br><span class="line"><span class="comment">// 没有了 Vue 的构造函数，只是createApp的工厂函数，可以直接调用</span></span><br><span class="line"><span class="comment">// 创建应用实例对象——app(类似于之前Vue2中的vm，但app比vm更“轻”)</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他文件</span></span><br><span class="line"><span class="comment">// Vue3组件中的模板结构可以没有根标签</span></span><br></pre></td></tr></table></figure><hr><h1 id="setup函数"><a href="#setup函数" class="headerlink" title="setup函数"></a><strong>setup函数</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 理解：Vue3.0中一个新的配置项，值为一个函数。</span></span><br><span class="line"><span class="comment">2. setup是所有Composition API 表演的舞台。</span></span><br><span class="line"><span class="comment">4. 组件中所用到的：数据、方法等等，均要配置在setup中。</span></span><br><span class="line"><span class="comment">5. setup函数的两种返回值：</span></span><br><span class="line"><span class="comment">   1. 若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</span></span><br><span class="line"><span class="comment">   2. 若返回一个渲染函数：则可以自定义渲染内容。</span></span><br><span class="line"><span class="comment">6. 注意：</span></span><br><span class="line"><span class="comment">   1. 尽量不要与Vue2.x配置混用</span></span><br><span class="line"><span class="comment">      Vue2.x配置（data、methos、computed...）中 可以访问到 setup中的属性、方法。</span></span><br><span class="line"><span class="comment">      但在setup中 不能访问到 Vue2.x配置（data、methos、computed...）。</span></span><br><span class="line"><span class="comment">      如果有重名, setup优先。</span></span><br><span class="line"><span class="comment">   2. setup不能是一个async函数，因为返回值不再是return的对象, 而是promise,</span></span><br><span class="line"><span class="comment">    模板看不到return对象中的属性。</span></span><br><span class="line"><span class="comment">   （后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>，<span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>，<span class="attr">a</span>: <span class="number">200</span> --&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>性别：&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>a的值是：&#123;&#123;a&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sayHello&quot;</span>&gt;</span>说话(Vue3所配置的——sayHello)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sayWelcome&quot;</span>&gt;</span>说话(Vue2所配置的——sayWelcome)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test1&quot;</span>&gt;</span>测试一下在Vue2的配置中去读取Vue3中的数据、方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test2&quot;</span>&gt;</span>测试一下在Vue3的setup配置中去读取Vue2中的数据、方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="comment">// import &#123;h&#125; from &#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">a</span>:<span class="number">100</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="title function_">sayWelcome</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">alert</span>(<span class="string">&#x27;欢迎学习vue3&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="title function_">test1</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">sex</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>) <span class="comment">// 可以访问到 setup 返回的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">sayHello</span>) <span class="comment">// 可以访问到 setup 返回的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 此处只是测试一下setup，暂时不考虑响应式的问题。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//  setup 不能使用 async</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// 数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">let</span> name = <span class="string">&#x27;张三&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">let</span> a = <span class="number">200</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">//方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">alert</span>(<span class="string">`我叫<span class="subst">$&#123;name&#125;</span>`</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">// 张三</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sayHello)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">sex</span>) <span class="comment">// 打印不到数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">sayWelcome</span>) <span class="comment">// 打印不到数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">//返回一个对象（常用）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    name,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    sayHello,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    test2,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    a</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// 返回一个函数（渲染函数），需要引入 h函数，使用后template的模板将失效</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// return ()=&gt; h(&#x27;h1&#x27;,&#x27;尚硅谷&#x27;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a><strong>ref函数</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- 作用: 定义一个响应式的数据</span></span><br><span class="line"><span class="comment">- 语法: const xxx = ref(initValue)</span></span><br><span class="line"><span class="comment">  - 创建一个包含响应式数据的 引用对象（reference对象，简称ref对象）。</span></span><br><span class="line"><span class="comment">  - JS中操作数据： xxx.value</span></span><br><span class="line"><span class="comment">  - 模板中读取数据: 不需要.value，直接：&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">- 备注：</span></span><br><span class="line"><span class="comment">  - 接收的数据可以是：基本类型、也可以是对象类型。</span></span><br><span class="line"><span class="comment">  - 基本类型的数据：响应式依然是靠 Object.defineProperty() 的 get 与 set 完成的。</span></span><br><span class="line"><span class="comment">  - 对象类型的数据：内部 “ 求助 ” 了Vue3.0中的一个新函数 reactive 函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>工作种类：&#123;&#123;job.type&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeInfo&quot;</span>&gt;</span>修改人的信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// 数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">let</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;张三&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">let</span> job = <span class="title function_">ref</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">type</span>:<span class="string">&#x27;前端工程师&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// 方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">function</span> <span class="title function_">changeInfo</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    name.<span class="property">value</span> = <span class="string">&#x27;李四&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    job.<span class="property">value</span>.<span class="property">type</span> = <span class="string">&#x27;UI设计师&#x27;</span> <span class="comment">// 不需要job.value.type.value</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// 返回一个对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    name,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    job,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    changeInfo</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="reactive函数"><a href="#reactive函数" class="headerlink" title="reactive函数"></a><strong>reactive函数</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- 作用: 定义一个对象类型的响应式数据（基本类型不要用它，要用 ref 函数）</span></span><br><span class="line"><span class="comment">- 语法：const 代理对象= reactive(源对象) 接收一个对象（或数组），</span></span><br><span class="line"><span class="comment">        返回一个代理对象 Proxy 的实例对象，简称proxy对象</span></span><br><span class="line"><span class="comment">- reactive定义的响应式数据是“深层次的”。</span></span><br><span class="line"><span class="comment">- 内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一个人的信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;person.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>工作种类：&#123;&#123;person.job.type&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeInfo&quot;</span>&gt;</span>修改人的信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">//数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">job</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>:<span class="string">&#x27;前端工程师&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">hobby</span>:[<span class="string">&#x27;抽烟&#x27;</span>,<span class="string">&#x27;喝酒&#x27;</span>,<span class="string">&#x27;烫头&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// 方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">function</span> <span class="title function_">changeInfo</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    person.<span class="property">name</span> = <span class="string">&#x27;李四&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    person.<span class="property">job</span>.<span class="property">type</span> = <span class="string">&#x27;UI设计师&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    person.<span class="property">hobby</span>[<span class="number">0</span>] = <span class="string">&#x27;学习&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">//返回一个对象（常用）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    person,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    changeInfo</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="Vue3-0中的响应式原理"><a href="#Vue3-0中的响应式原理" class="headerlink" title="Vue3.0中的响应式原理"></a><strong>Vue3.0中的响应式原理</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- 实现原理: </span></span><br><span class="line"><span class="comment">  - 通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</span></span><br><span class="line"><span class="comment">  - 通过Reflect（反射）:  对源对象的属性进行操作。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span><br><span class="line">       <span class="comment">// 拦截读取属性值</span></span><br><span class="line">          <span class="title function_">get</span> (target, prop) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, prop)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// 拦截设置属性值或添加新属性</span></span><br><span class="line">          <span class="title function_">set</span> (target, prop, value) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, prop, value)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// 拦截删除属性</span></span><br><span class="line">          <span class="title function_">deleteProperty</span> (target, prop) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, prop)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      proxy.<span class="property">name</span> = <span class="string">&#x27;tom&#x27;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue2 的数据 需要 $set 和 $delete</span></span><br><span class="line"></span><br><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="comment">//源数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="keyword">let</span> person = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">age</span>:<span class="number">18</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="comment">//模拟Vue2中实现响应式，使用//#region //#endregion和可以关闭烦人的自动展开</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="comment">//#region </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="comment">/* let p = &#123;&#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">         Object.defineProperty(p,&#x27;name&#x27;,&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            configurable:true,</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            get()&#123; //有人读取name时调用</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">               return person.name</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            set(value)&#123; //有人修改name时调用</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">               console.log(&#x27;有人修改了name属性，我发现了，我要去更新界面！&#x27;)</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">               person.name = value</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">         &#125;)</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">         Object.defineProperty(p,&#x27;age&#x27;,&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            get()&#123; //有人读取age时调用</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">               return person.age</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            set(value)&#123; //有人修改age时调用</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">               console.log(&#x27;有人修改了age属性，我发现了，我要去更新界面！&#x27;)</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">               person.age = value</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">         &#125;) */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="comment">//#endregion</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="comment">//模拟Vue3中实现响应式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="comment">//#region </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person,&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//有人读取p的某个属性时调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">get</span>(<span class="params">target,propName</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人读取了p身上的<span class="subst">$&#123;propName&#125;</span>属性`</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,propName)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//有人修改p的某个属性、或给p追加某个属性时调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">set</span>(<span class="params">target,propName,value</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人修改了p身上的<span class="subst">$&#123;propName&#125;</span>属性，我要去更新界面了！`</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,propName,value)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//有人删除p的某个属性时调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">deleteProperty</span>(<span class="params">target,propName</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人删除了p身上的<span class="subst">$&#123;propName&#125;</span>属性，我要去更新界面了！`</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target,propName)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="comment">//#endregion</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="keyword">let</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="comment">//通过Object.defineProperty去操作</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="comment">//#region </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="comment">/* try &#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            Object.defineProperty(obj,&#x27;c&#x27;,&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">               get()&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                  return 3</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">               &#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            Object.defineProperty(obj,&#x27;c&#x27;,&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">               get()&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">                  return 4</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">               &#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">         &#125; catch (error) &#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            console.log(error)</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">         &#125; */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="comment">//#endregion</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="comment">//通过Reflect.defineProperty去操作</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="comment">//#region </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="comment">/* const x1 = Reflect.defineProperty(obj,&#x27;c&#x27;,&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            get()&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">               return 3</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">         &#125;)</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">         console.log(x1)</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">         </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">         const x2 = Reflect.defineProperty(obj,&#x27;c&#x27;,&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            get()&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">               return 4</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">         &#125;) </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">         if(x2)&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            console.log(&#x27;某某某操作成功了！&#x27;)</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">         &#125;else&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            console.log(&#x27;某某某操作失败了！&#x27;)</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">         &#125; */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="comment">//#endregion</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="comment">// console.log(&#x27;@@@&#x27;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="setup-的参数"><a href="#setup-的参数" class="headerlink" title="setup 的参数"></a><strong>setup 的参数</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">setup执行的时机：</span></span><br><span class="line"><span class="comment">  在beforeCreate之前执行一次，this是undefined。</span></span><br><span class="line"><span class="comment">setup的参数：</span></span><br><span class="line"><span class="comment">  1.props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</span></span><br><span class="line"><span class="comment">  2.context：上下文对象</span></span><br><span class="line"><span class="comment">    attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 this.$attrs。</span></span><br><span class="line"><span class="comment">    slots: 收到的插槽内容, 相当于 this.$slots。</span></span><br><span class="line"><span class="comment">    emit: 分发自定义事件的函数, 相当于 this.$emit。</span></span><br><span class="line"><span class="comment">注意：props和emits不接受会有警告</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> @<span class="attr">hello</span>=<span class="string">&quot;showHelloMsg&quot;</span> <span class="attr">msg</span>=<span class="string">&quot;你好啊&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">slotName</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">span</span>&gt;</span>具名插槽<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">Demo</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">import</span> <span class="title class_">Demo</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Demo&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>:&#123;<span class="title class_">Demo</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">function</span> <span class="title function_">showHelloMsg</span>(<span class="params">value</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">alert</span>(<span class="string">`你好啊，你触发了hello事件，我收到的参数是:<span class="subst">$&#123;value&#125;</span>！`</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    showHelloMsg</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">h1</span>&gt;</span>一个人的信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;person.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：&#123;&#123;person.age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test&quot;</span>&gt;</span>测试触发一下Demo组件的Hello事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>:[<span class="string">&#x27;msg&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">emits</span>:[<span class="string">&#x27;hello&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params">props,context</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// console.log(&#x27;---setup---&#x27;,props)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// console.log(&#x27;---setup---&#x27;,context)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// console.log(&#x27;---setup---&#x27;,context.attrs) //相当与Vue2中的$attrs</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// console.log(&#x27;---setup---&#x27;,context.emit) //触发自定义事件的。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---setup---&#x27;</span>,context.<span class="property">slots</span>) <span class="comment">//插槽，使用新的api v-slot,slot=&quot;&quot;打印没有名字</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">//数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">age</span>:<span class="number">18</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">//方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    context.<span class="title function_">emit</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">666</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">//返回一个对象（常用）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    person,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    test</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="computed-计算属性"><a href="#computed-计算属性" class="headerlink" title="computed 计算属性"></a><strong>computed 计算属性</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 计算属性——简写</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 计算属性——完整</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> nameArr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            person.<span class="property">firstName</span> = nameArr[<span class="number">0</span>]</span><br><span class="line">            person.<span class="property">lastName</span> = nameArr[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="watch函数"><a href="#watch函数" class="headerlink" title="watch函数"></a><strong>watch函数</strong></h1><p>与Vue2.x中watch配置功能一致，两个小“坑”：</p><ol><li><p>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</p></li><li><p>监视reactive定义的响应式数据中对象时：deep配置有效。</p></li><li><p>watch 监听对象的某个具体的值时，可以获取到oldVlaue。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;你好啊&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line"> <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line"> <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line"> <span class="attr">job</span>:&#123;</span><br><span class="line">  <span class="attr">j1</span>:&#123;</span><br><span class="line">   <span class="attr">salary</span>:<span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况一：监视ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：监视多个ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>([sum,msg],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// newValue与oldValue获取的也是数组形式</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 情况三：监视reactive定义的响应式数据</span></span><br><span class="line"><span class="comment">  若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span></span><br><span class="line"><span class="comment">  若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">watch</span>(person,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 任意的person里面的数据变化了，就会执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">false</span>&#125;) <span class="comment">//此处的deep配置不再奏效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况四：监视reactive所定义的一个响应式数据中的某个属性</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">name</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的name变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class="line"><span class="title function_">watch</span>([<span class="function">()=&gt;</span>person.<span class="property">name</span>,<span class="function">()=&gt;</span>person.<span class="property">name</span>],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的name或age变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;) <span class="comment">//此处由于监视的是reactive定义的对象中的某个属性，所以deep配置有效</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：如果使用ref定义对象，watch需要写xxx.value，</span></span><br><span class="line"><span class="comment">// 因为watch监听的是一个Proxy对象或者是ref对象，如不能使用ref定义字符串，不可具体值xxx.value</span></span><br></pre></td></tr></table></figure><hr><h1 id="watchEffect函数"><a href="#watchEffect函数" class="headerlink" title="watchEffect函数"></a><strong>watchEffect函数</strong></h1><ol><li>watch的套路是：既要指明监视的属性，也要指明监视的回调。</li><li>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</li><li>watchEffect有点像computed：<ul><li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x1 = sum.<span class="property">value</span></span><br><span class="line">    <span class="keyword">const</span> x2 = person.<span class="property">age</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h1 id="vue3-的生命周期"><a href="#vue3-的生命周期" class="headerlink" title="vue3 的生命周期"></a><strong>vue3 的生命周期</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：</span></span><br><span class="line"><span class="comment">/* beforeDestroy改名为 beforeUnmount</span></span><br><span class="line"><span class="comment">destroyed改名为 unmounted */</span></span><br><span class="line"><span class="comment">// -----------</span></span><br><span class="line"><span class="comment">// Composition API 形式的生命周期钩子</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">beforeCreate===&gt;setup()</span></span><br><span class="line"><span class="comment">created=======&gt;setup()</span></span><br><span class="line"><span class="comment">beforeMount ===&gt;onBeforeMount</span></span><br><span class="line"><span class="comment">mounted=======&gt;onMounted</span></span><br><span class="line"><span class="comment">beforeUpdate===&gt;onBeforeUpdate</span></span><br><span class="line"><span class="comment">updated =======&gt;onUpdated</span></span><br><span class="line"><span class="comment">beforeUnmount ==&gt;onBeforeUnmount</span></span><br><span class="line"><span class="comment">unmounted =====&gt;onUnmounted</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：同时配置项和composition Api 都写得话，先执行setup里面的</span></span><br></pre></td></tr></table></figure><hr><h1 id="自定义Hook"><a href="#自定义Hook" class="headerlink" title="自定义Hook"></a><strong>自定义Hook</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hook，本质是一个函数，把setup函数中使用的Composition API进行了封装。类似于vue2.x中的mixin。</span></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="comment">// 在/src/hooks/usePoint.js 定义 获取鼠标点的hook</span></span><br><span class="line"><span class="keyword">import</span> &#123;reactive,onMounted,onBeforeUnmount&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">   <span class="comment">//实现鼠标“打点”相关的数据</span></span><br><span class="line">   <span class="keyword">let</span> point = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">x</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="attr">y</span>:<span class="number">0</span></span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="comment">//实现鼠标“打点”相关的方法</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">savePoint</span>(<span class="params">event</span>)&#123;</span><br><span class="line">      point.<span class="property">x</span> = event.<span class="property">pageX</span></span><br><span class="line">      point.<span class="property">y</span> = event.<span class="property">pageY</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">pageX</span>,event.<span class="property">pageY</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//实现鼠标“打点”相关的生命周期钩子</span></span><br><span class="line">   <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,savePoint)</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="title function_">onBeforeUnmount</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>,savePoint)</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="keyword">return</span> point</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 组件中使用</span></span><br><span class="line"><span class="keyword">import</span> usePoint <span class="keyword">from</span> <span class="string">&#x27;../hooks/usePoint&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span><br><span class="line"> <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> point = <span class="title function_">usePoint</span>()</span><br><span class="line">    <span class="keyword">return</span> point</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a><strong>toRef</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</span></span><br><span class="line"><span class="comment">语法：const name = toRef(person,&#x27;name&#x27;)</span></span><br><span class="line"><span class="comment">应用: 要将响应式对象中的某个属性单独提供给外部使用时。</span></span><br><span class="line"><span class="comment">扩展：toRefs 与 toRef功能一致，但可以批量创建多个 ref 对象，语法：toRefs(person)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;person&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>薪资：&#123;&#123;job.j1.salary&#125;&#125;K<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;name+=&#x27;~&#x27;&quot;</span>&gt;</span>修改姓名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;job.j1.salary++&quot;</span>&gt;</span>涨薪<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">import</span> &#123;ref,reactive,toRef,toRefs&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">//数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">age</span>:<span class="number">18</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">job</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">j1</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">salary</span>:<span class="number">20</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    person,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// name:toRef(person,&#x27;name&#x27;),</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// salary:toRef(person.job.j1,&#x27;salary&#x27;),</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">toRefs</span>(person)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：直接return &#123;name: person.name&#125; 不是响应式，如下</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> b = obj.<span class="property">a</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>) <span class="comment">// 1</span></span><br><span class="line">obj.<span class="property">a</span> = <span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// b还是1，并没有修改</span></span><br><span class="line"><span class="comment">// 直接 name:Ref(person.name)，会导致修改了新的ref对象name，不修改原person数据</span></span><br></pre></td></tr></table></figure><hr><h1 id="shallowReactive-与-shallowRef"><a href="#shallowReactive-与-shallowRef" class="headerlink" title="shallowReactive 与 shallowRef"></a><strong>shallowReactive 与 shallowRef</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</span></span><br><span class="line"><span class="comment">shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</span></span><br><span class="line"><span class="comment">什么时候使用?</span></span><br><span class="line"><span class="comment">如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</span></span><br><span class="line"><span class="comment">如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>当前的x.y值是：&#123;&#123;x.y&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;x=&#123;y:888&#125;&quot;</span>&gt;</span>点我替换x<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;x.y++&quot;</span>&gt;</span>点我x.y++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"> &lt;hr&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;person&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>薪资：&#123;&#123;job.j1.salary&#125;&#125;K<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;name+=&#x27;~&#x27;&quot;</span>&gt;</span>修改姓名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;job.j1.salary++&quot;</span>&gt;</span>涨薪<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">import</span> &#123;ref,reactive,toRef,toRefs,shallowReactive,shallowRef&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">//数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">let</span> person = <span class="title function_">shallowReactive</span>(&#123; <span class="comment">//只考虑第一层数据的响应式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">age</span>:<span class="number">18</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">job</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">j1</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">salary</span>:<span class="number">20</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">let</span> x = <span class="title function_">shallowRef</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="attr">y</span>:<span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    x,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    person,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">toRefs</span>(person)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="readonly-与-shallowReadonly"><a href="#readonly-与-shallowReadonly" class="headerlink" title="readonly 与 shallowReadonly"></a><strong>readonly 与 shallowReadonly</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">readonly: 让一个响应式数据变为只读的（深只读）。</span></span><br><span class="line"><span class="comment">shallowReadonly：让一个响应式数据变为只读的（浅只读）。</span></span><br><span class="line"><span class="comment">应用场景: 不希望数据被修改时。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">import</span> &#123;ref,reactive,toRefs,readonly,shallowReadonly&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="comment">//数据</span></span><br><span class="line">   <span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">   <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">job</span>:&#123;</span><br><span class="line">     <span class="attr">j1</span>:&#123;</span><br><span class="line">      <span class="attr">salary</span>:<span class="number">20</span></span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   person = <span class="title function_">readonly</span>(person)</span><br><span class="line">   <span class="comment">// person = shallowReadonly(person)</span></span><br><span class="line">   <span class="comment">// sum = readonly(sum)</span></span><br><span class="line">   <span class="comment">// sum = shallowReadonly(sum)</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">    sum,</span><br><span class="line">    ...<span class="title function_">toRefs</span>(person)</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="toRaw-与-markRaw"><a href="#toRaw-与-markRaw" class="headerlink" title="toRaw 与 markRaw"></a><strong>toRaw 与 markRaw</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">toRaw：</span></span><br><span class="line"><span class="comment">  作用：将一个由reactive生成的响应式对象转为普通对象。</span></span><br><span class="line"><span class="comment">  使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</span></span><br><span class="line"><span class="comment">markRaw：</span></span><br><span class="line"><span class="comment">  作用：标记一个对象，使其永远不会再成为响应式对象。</span></span><br><span class="line"><span class="comment">  应用场景：有些值不应被设置为响应式的，例如复杂的第三方类库等。</span></span><br><span class="line"><span class="comment">            当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">import</span> &#123;ref,reactive,toRefs,toRaw,markRaw&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">   <span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">job</span>:&#123;</span><br><span class="line">     <span class="attr">j1</span>:&#123;</span><br><span class="line">      <span class="attr">salary</span>:<span class="number">20</span></span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// </span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">showRawPerson</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> p = <span class="title function_">toRaw</span>(person) <span class="comment">// 变回不是响应式</span></span><br><span class="line">    p.<span class="property">age</span>++</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 添加一个不是响应式的属性</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">addCar</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">let</span> car = &#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="number">40</span>&#125;</span><br><span class="line">     person.<span class="property">car</span> = <span class="title function_">markRaw</span>(car)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">    sum,</span><br><span class="line">    person,</span><br><span class="line">    ...<span class="title function_">toRefs</span>(person),</span><br><span class="line">    addCar,</span><br><span class="line">    showRawPerson</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a><strong>customRef</strong></h1><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现防抖效果：</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;keyword&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> &#123;ref, customRef&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&#x27;Demo&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//自定义一个myRef</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">function</span> <span class="title function_">myRef</span>(<span class="params">value, delay</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">let</span> timer</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//通过customRef去实现自定义</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">return</span> <span class="title function_">customRef</span>(<span class="function">(<span class="params">track, trigger</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="title function_">track</span>() <span class="comment">//告诉Vue这个value值是需要被“追踪”的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="keyword">return</span> value</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="built_in">clearTimeout</span>(timer)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                                value = newValue</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                                <span class="title function_">trigger</span>() <span class="comment">//告诉Vue去更新界面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            &#125;, delay)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">let</span> keyword = <span class="title function_">myRef</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="number">500</span>) <span class="comment">//使用程序员自定义的ref</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                keyword</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="provide-与-inject"><a href="#provide-与-inject" class="headerlink" title="provide 与 inject"></a><strong>provide 与 inject</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 作用：实现祖与后代组件间通信</span></span><br><span class="line"><span class="comment">套路：父组件有一个 provide 选项来提供数据，后代组件有一个 inject 选项来开始使用这些数据 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 祖组件中：</span></span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">let</span> car = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;car&#x27;</span>,car)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后代组件中：</span></span><br><span class="line"><span class="title function_">setup</span>(<span class="params">props,context</span>)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">const</span> car = <span class="title function_">inject</span>(<span class="string">&#x27;car&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="响应式数据的判断"><a href="#响应式数据的判断" class="headerlink" title="响应式数据的判断"></a><strong>响应式数据的判断</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">isRef: 检查一个值是否为一个 ref 对象</span><br><span class="line">isReactive: 检查一个对象是否是由 reactive 创建的响应式代理</span><br><span class="line">isReadonly: 检查一个对象是否是由 readonly 创建的只读代理</span><br><span class="line">isProxy: 检查一个对象是否是由 reactive 或者 readonly 方法创建的代理</span><br></pre></td></tr></table></figure><hr><h1 id="新的组件"><a href="#新的组件" class="headerlink" title="新的组件"></a><strong>新的组件</strong></h1><p><strong>1.Fragment</strong></p><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><p><strong>2.Teleport</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Teleport 是一种能够将我们的组件html结构移动到指定位置的技术。</span></span><br><span class="line"><span class="comment">// to可以是 html、body或者是css选择器</span></span><br><span class="line">&lt;teleport to=<span class="string">&quot;移动位置&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dialog&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是一个弹窗<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = false&quot;</span>&gt;</span>关闭弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/teleport&gt;</span><br></pre></td></tr></table></figure><p><strong>3.Suspense （目前好像在试用阶段）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步引入组件</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./components/Child.vue&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Suspense包裹组件，并配置好 default 与 fallback</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是App组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 需要展示的放在default里面 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Child</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 展位 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:fallback</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>加载中.....<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Suspense后setup可以返回一个promise（即为 async 函数）</span></span><br></pre></td></tr></table></figure><hr><h1 id="其他改变"><a href="#其他改变" class="headerlink" title="其他改变"></a><strong>其他改变</strong></h1><p><strong>1.全局API的转移</strong></p><table><thead><tr><th><strong>2.x 全局 API（Vue）</strong></th><th><strong>3.x 实例 API (app)</strong></th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong>移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table><p><strong>2.其他</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// <span class="number">1</span><span class="selector-class">.data</span>选项应始终被声明为一个函数。</span><br><span class="line"></span><br><span class="line">// ------------------------</span><br><span class="line"></span><br><span class="line">// 过度类名的更改：</span><br><span class="line">// Vue2<span class="selector-class">.x</span>写法</span><br><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Vue3<span class="selector-class">.x</span>写法</span><br><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ------------------</span><br><span class="line">// 移除keyCode作为 v-on 的修饰符，同时也不再支持config<span class="selector-class">.keyCodes</span></span><br><span class="line"></span><br><span class="line">// 移除v-on<span class="selector-class">.native</span>修饰符</span><br><span class="line">&lt;my-component</span><br><span class="line">  v-on:close=<span class="string">&quot;handleComponentEvent&quot;</span></span><br><span class="line">  v-on:click=<span class="string">&quot;handleNativeClickEvent&quot;</span></span><br><span class="line">/&gt;</span><br><span class="line">// 子组件中声明自定义事件（ 不声明则为原生事件）</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    emits: [<span class="string">&#x27;close&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">// 移除 过滤器（<span class="attribute">filter</span>）</span><br></pre></td></tr></table></figure><hr><h1 id="pinia"><a href="#pinia" class="headerlink" title="pinia"></a><strong>pinia</strong></h1><p>参考：<a href="https://juejin.cn/post/7112691686085492767">掘金pinia</a></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h2><ul><li>Vue2和Vue3都支持，这让我们同时使用Vue2和Vue3的小伙伴都能很快上手。</li><li>pinia中只有state、getter、action，抛弃了Vuex中的Mutation，Vuex中mutation一直都不太受小伙伴们的待见，pinia直接抛弃它了，这无疑减少了我们工作量。</li><li>pinia中action支持同步和异步。</li><li>良好的Typescript支持，毕竟我们Vue3都推荐使用TS来编写，这个时候使用pinia就非常合适了。</li><li>无需再创建各个模块嵌套了，Vuex中如果数据过多，我们通常分模块来进行管理，稍显麻烦，而pinia中每个store都是独立的，互相不影响。</li><li>体积非常小，只有1KB左右。</li><li>pinia支持插件来扩展自身功能。</li><li>支持服务端渲染。</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a><strong>使用</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建项目</span></span><br><span class="line">npm create vite@latest my-vite-app --template vue-ts</span><br><span class="line"><span class="comment">// 安装pinia</span></span><br><span class="line">yarn add pinia</span><br><span class="line">npm install pinia</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>; <span class="comment">// 引入createPinia</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>(); <span class="comment">// 创建pinia实例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(pinia); <span class="comment">// 使用pinia</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建store，/src/store/user.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="comment">// 1.定义并导出容器</span></span><br><span class="line"><span class="comment">// 参数1：容器的ID，必须唯一，将来Pinia会把所有的容器挂载到根容器，每个容器的名字就是这里的ID</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUsersStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;users&#x27;</span>, &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 类似与组件的data， 用来存储全局状态</span></span><br><span class="line"><span class="comment">   * 1.必须是函数：这样是为了在服务端渲染的时候避免交叉请求导致的数据状态污染（客户端其实无所谓）</span></span><br><span class="line"><span class="comment">   * 2.必须是箭头函数：为了更好的ts类型推导</span></span><br><span class="line"><span class="comment">   * 返回值：一个函数，调用该函数即可得到容器实例</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       <span class="attr">count</span>: <span class="number">100</span>,</span><br><span class="line">       <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">       <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 类似于组件的computed，用来封装计算属性，有【缓存】功能</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">// 每个函数接受一个可选参数：state状态对象</span></span><br><span class="line">    <span class="comment">// count10(state) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;count10()调用了&#x27;);// 具有缓存功能</span></span><br><span class="line">    <span class="comment">//   return state.count + 10</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// （不建议）如果不使用state而使用this，此时就不能对返回值类型做自动推导了，必须手动指定</span></span><br><span class="line">    <span class="title function_">count10</span>(): number &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> + <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 完全类比于Vue2组件中的methods（可以直接用this)，用来【封装业务逻辑】，修改state</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注意！！不能使用箭头函数定义actions！！一定要用普通函数！！！</span></span><br><span class="line"><span class="comment">     * why？因为箭头函数绑定了外部this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">changeState</span>(<span class="params">num: number</span>) &#123;</span><br><span class="line">      <span class="comment">// 可以直接使用this，像极了Vue2</span></span><br><span class="line">      <span class="comment">// this.count++</span></span><br><span class="line">      <span class="comment">// this.foo = &#x27;hello&#x27;</span></span><br><span class="line">      <span class="comment">// this.arr.push(4)</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 对于批量修改，建议使用patch做优化</span></span><br><span class="line">      <span class="variable language_">this</span>.$patch(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">        state.<span class="property">count</span> += num</span><br><span class="line">        state.<span class="property">foo</span> = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">        state.<span class="property">arr</span>.<span class="title function_">push</span>(<span class="number">4</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用store，/src/App.vue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; useUsersStore &#125; <span class="keyword">from</span> <span class="string">&quot;../src/store/user&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useUsersStore</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(store);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="comment">// 使用store，引入我们声明的useUsersStore 方法即可</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; mainStore.count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; mainStore.foo &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; mainStore.arr &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; mainStore.count10 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; mainStore.count10 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; mainStore.count10 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; foo &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleChangeState&quot;</span>&gt;</span>修改数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; useMainStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../store&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 【哪里使用写哪里】，此时要在HelloWorld组件中用，那就写这里。这很Composition API</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> mainStore = <span class="title function_">useMainStore</span>() </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 禁止！这样会丧失响应性，因为pinia在底层将state用reactive做了处理</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// const &#123; count, foo &#125; = mainStore</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 解决方案：将结构出的数据做ref响应式代理</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> &#123; count, foo &#125; = <span class="title function_">storeToRefs</span>(mainStore)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">handleChangeState</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// ==============数据修改的几种方式=============</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 方式一：直接修改</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// mainStore.count++</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 方式二：使用 $patch(对象) 批量修改，建议使用，底层做了性能优化</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// mainStore.$patch(&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//   count: mainStore.count + 1,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//   foo: &#x27;hello&#x27;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//   arr: [...mainStore.arr, 4] // 这就不优雅了，所以有了方式三</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 方式三：使用 $patch(回调函数)，这个更优雅，墙裂推荐！！！</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 回调函数中的state参数，就是Store定义时里面的state!</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// mainStore.$patch((state) =&gt; &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//   state.count++</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//   state.foo = &#x27;hello&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//   state.arr.push(4)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 方式四：逻辑较为复杂时，应封装到Store的actions中，并对外暴露接口</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  mainStore.<span class="title function_">changeState</span>(<span class="number">10</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="setup-语法糖"><a href="#setup-语法糖" class="headerlink" title="setup 语法糖"></a><strong>setup 语法糖</strong></h1><h2 id="setup-取名"><a href="#setup-取名" class="headerlink" title="setup 取名"></a><strong>setup 取名</strong></h2><p>参考：<a href="https://blog.csdn.net/m0_66051368/article/details/126281743">参考</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="comment">// 新增一个script标签，在这个script标签定义一个name属性（注意多个script使用时 lang的值要一致）</span></span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; <span class="attr">name</span>: <span class="string">&#x27;Layout&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二 </span></span><br><span class="line"><span class="comment">// 使用unplugin-vue-define-options插件</span></span><br><span class="line">yarn add unplugin-vue-define-options -D <span class="comment">// 安装</span></span><br><span class="line"><span class="comment">// vite.config.js （配置）</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="title class_">DefineOptions</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-define-options/vite&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>(), <span class="title class_">DefineOptions</span>()],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line">  <span class="title function_">defineOptions</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Layout&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三</span></span><br><span class="line"><span class="comment">// 使用 vite-plugin-vue-setup-extend 插件</span></span><br><span class="line">yarn add vite-plugin-vue-setup-extend -D <span class="comment">// 安装</span></span><br><span class="line"><span class="comment">// vite.config.js （配置）</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vueSetupExtend <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-vue-setup-extend&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>(), <span class="title function_">vueSetupExtend</span>()]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span> name=<span class="string">&quot;Layout&quot;</span>&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="defineProps-和defineEmits"><a href="#defineProps-和defineEmits" class="headerlink" title="defineProps()和defineEmits()"></a><strong>defineProps()和defineEmits()</strong></h2><p>使用的编译器宏不需要导入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// props 里面的属性，在模板中不需要添加props，在js中需要添加</span></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="title class_">String</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;change&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>])</span><br><span class="line"><span class="comment">// setup 代码</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="title function_">emit</span>(<span class="string">&#x27;change&#x27;</span>,<span class="string">&#x27;xxx&#x27;</span>) <span class="comment">// 使用</span></span><br></pre></td></tr></table></figure><h2 id="defineExpose"><a href="#defineExpose" class="headerlink" title="defineExpose"></a><strong>defineExpose</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 &lt;script setup&gt; 的组件是默认关闭的，setup 相当于是一个闭包，除了内部的 template模板，谁都不能访问内部的数据和方法。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  <span class="keyword">import</span> &#123; defineExpose &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">2</span></span><br><span class="line">  <span class="title function_">defineExpose</span>(&#123;</span><br><span class="line">    a</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="comment">// 通过 ref获取DOM 既可以拿到数据与方法</span></span><br></pre></td></tr></table></figure><h2 id="Ref-获取-DOM"><a href="#Ref-获取-DOM" class="headerlink" title="Ref 获取 DOM"></a><strong>Ref 获取 DOM</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取单独的一个DOM</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;myRef&quot;</span>&gt;</span>获取单个DOM元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> myRef = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">dir</span>(myRef.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量获取DOM（推荐）</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in 3&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:ref</span>=<span class="string">&quot;el =&gt; &#123; myRef[index] = el &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; item &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 存储 Dom 数组 myRef</span></span><br><span class="line"><span class="keyword">const</span> myRef = <span class="title function_">ref</span>([])</span><br><span class="line"><span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">dir</span>(myRef.<span class="property">value</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式 （不推荐）</span></span><br><span class="line"><span class="comment">// 注意：ref绑定时不能用push, 会在更新的时候造成bug, 元素会重复。</span></span><br><span class="line"><span class="comment">// 解决：如上的onBeforeUpdate重置下即可</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in 3&quot;</span> <span class="attr">:ref</span>=<span class="string">&quot;setRef&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; item &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> &#123; ref, onBeforeUpdate &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 存储dom数组</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> myRef = <span class="title function_">ref</span>([])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 确保在每次更新之前重置ref</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">onBeforeUpdate</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    myRef.<span class="property">value</span> = []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title function_">setRef</span> = (<span class="params">el</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    myRef.<span class="property">value</span>.<span class="title function_">push</span>(el);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">dir</span>(myRef.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="vue3-父子组件双向绑定"><a href="#vue3-父子组件双向绑定" class="headerlink" title="vue3 父子组件双向绑定"></a><strong>vue3 父子组件双向绑定</strong></h1><p>参考：<a href="https://juejin.cn/post/7056589377090093093">vue2与vue3 双向绑定的区别</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="comment">// vue3 中没有.sync修饰符，默认写法</span></span><br><span class="line">&lt;<span class="title class_">ChildComponent</span> v-model=<span class="string">&quot;msg&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 是以下的简写: --&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">:modelValue</span>=<span class="string">&quot;msg&quot;</span> @<span class="attr">update:modelValue</span>=<span class="string">&quot;meg = $event&quot;</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义绑定的名称</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">v-model:message</span>=<span class="string">&quot;meg&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 是以下的简写: --&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">:message</span>=<span class="string">&quot;meg&quot;</span> @<span class="attr">update:message</span>=<span class="string">&quot;message = $event&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件中的使用</span></span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">message</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> emits = <span class="title function_">defineEmits</span>([<span class="string">&#x27;update:message&#x27;</span>])</span><br><span class="line"><span class="title function_">emits</span>(<span class="string">&#x27;update:message&#x27;</span>,<span class="string">&#x27;新的值&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果绑定到input上，可以使用input事件</span></span><br><span class="line"><span class="comment">// 或者绑定一个克隆新的ref值，监听这个值来出发update</span></span><br></pre></td></tr></table></figure><h2 id="vue3-中css使用js中的变量"><a href="#vue3-中css使用js中的变量" class="headerlink" title="vue3 中css使用js中的变量"></a><strong>vue3 中css使用js中的变量</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> color = <span class="title function_">ref</span>(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-tag">div</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">color</span>: <span class="built_in">v-bind</span>(color)</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="获取-slots-和-attrs"><a href="#获取-slots-和-attrs" class="headerlink" title="获取 slots 和 attrs"></a><strong>获取 slots 和 attrs</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  <span class="keyword">import</span> &#123; useAttrs, useSlots &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> attrs = <span class="title function_">useAttrs</span>()</span><br><span class="line">  <span class="keyword">const</span> slots = <span class="title function_">useSlots</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="vue3-路由使用"><a href="#vue3-路由使用" class="headerlink" title="vue3 路由使用"></a><strong>vue3 路由使用</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRouter, useRoute &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line">    <span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">pushWithQuery</span>(<span class="params">query</span>) &#123;</span><br><span class="line">      router.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;search&#x27;</span>,</span><br><span class="line">        <span class="attr">query</span>: &#123;</span><br><span class="line">          ...route.<span class="property">query</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// route 对象是一个响应式对象，它的任何属性都可以被监听，</span></span><br><span class="line"><span class="comment">// 但你应该避免监听整个 route 对象。在大多数情况下，你应该直接监听你期望改变的参数。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useRoute &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line">    <span class="keyword">const</span> userData = <span class="title function_">ref</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当参数更改时获取用户信息</span></span><br><span class="line">    <span class="title function_">watch</span>(</span><br><span class="line">      <span class="function">() =&gt;</span> route.<span class="property">params</span>.<span class="property">id</span>,</span><br><span class="line">      <span class="keyword">async</span> newId =&gt; &#123;</span><br><span class="line">        userData.<span class="property">value</span> = <span class="keyword">await</span> <span class="title function_">fetchUser</span>(newId)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请注意，在模板中我们仍然可以访问 $router 和 $route，所以不需要在 setup 中返回 router 或 route。</span></span><br></pre></td></tr></table></figure><h2 id="setup-里面的导航守卫"><a href="#setup-里面的导航守卫" class="headerlink" title="setup 里面的导航守卫"></a><strong>setup 里面的导航守卫</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onBeforeRouteLeave, onBeforeRouteUpdate &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 与 beforeRouteLeave 相同，无法访问 this</span></span><br><span class="line">    <span class="title function_">onBeforeRouteLeave</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> answer = <span class="variable language_">window</span>.<span class="title function_">confirm</span>(</span><br><span class="line">        <span class="string">&#x27;Do you really want to leave? you have unsaved changes!&#x27;</span></span><br><span class="line">      )</span><br><span class="line">      <span class="comment">// 取消导航并停留在同一页面上</span></span><br><span class="line">      <span class="keyword">if</span> (!answer) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> userData = <span class="title function_">ref</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 与 beforeRouteUpdate 相同，无法访问 `this`</span></span><br><span class="line">    <span class="title function_">onBeforeRouteUpdate</span>(<span class="title function_">async</span> (to, <span class="keyword">from</span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">//仅当 id 更改时才获取用户，例如仅 query 或 hash 值已更改</span></span><br><span class="line">      <span class="keyword">if</span> (to.<span class="property">params</span>.<span class="property">id</span> !== <span class="keyword">from</span>.<span class="property">params</span>.<span class="property">id</span>) &#123;</span><br><span class="line">        userData.<span class="property">value</span> = <span class="keyword">await</span> <span class="title function_">fetchUser</span>(to.<span class="property">params</span>.<span class="property">id</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Vue-Router-4-补充"><a href="#Vue-Router-4-补充" class="headerlink" title="Vue Router 4 补充"></a><strong>Vue Router 4 补充</strong></h1><p>参考：<a href="https://juejin.cn/post/7031822082329542664">掘金</a></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a><strong>基本使用</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. vue Router 的模式配置</span></span><br><span class="line"><span class="comment">// hash模式使用 createWebHashHistory方法， history模式使用 createWebHistory方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Layout</span> <span class="keyword">from</span> <span class="string">&#x27;@/layout/index.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/home/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">children</span>: [&#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  routes,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// main.js中使用</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a><strong>动态路由匹配</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由匹配</span></span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/courseinfo/:title&#x27;</span>, <span class="attr">component</span>: xxx &#125;</span><br><span class="line"><span class="comment">// 捕获所有路由或 404 Not found 路由</span></span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/:pathMatch(.*)*&#x27;</span>, <span class="attr">component</span>: xxx &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 匹配语法 &quot;/:paramkey(正则表达式)正则表达式量词&quot;</span></span><br><span class="line"><span class="comment">(正则表达式) 支持完成的正则字面量，表示paramkey的匹配规则</span></span><br><span class="line"><span class="comment">正则表达式量词 用来规定 匹配多少个 / 斜线之间的内容</span></span><br><span class="line"><span class="comment">如：&#123; path: &quot;/:paramkey(\\w*)?&quot; &#125;</span></span><br><span class="line"><span class="comment">可以匹配 0个 或 一个 / 斜线之后的内容，斜线之间的参数值只能够用字母数字下划线构成</span></span><br><span class="line"><span class="comment">匹配： [/, /a, /bc]  不匹配： [/a/b, /a/b/c]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 注意：使用\w等预定义符，最好加上\ 确保转义反斜杠</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由注意的点</span></span><br><span class="line"><span class="comment">/* 1.获取参数的方式 $route.params.title 只能在模板中使用或</span></span><br><span class="line"><span class="comment">useRoute().params.title必须在setup中调用</span></span><br><span class="line"><span class="comment">因为 setup 中不能使用this，所以 $route 只能在模板中使用。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.响应参数变化: 使用带有参数的路由时需要注意的是，</span></span><br><span class="line"><span class="comment">当用户从 /courseinfo/javascript 导航到 /courseinfo/python 时，相同的组件实例将被重复使用。</span></span><br><span class="line"><span class="comment">因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。</span></span><br><span class="line"><span class="comment">不过，这也意味着组件的生命周期钩子不会被调用。解决方法：watch监听</span></span><br><span class="line"><span class="comment">$route 对象上的任意属性，在这个场景中，就是$route.params；或者使用导航守卫 beforeRouteUpdate。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除了*（星标或通配符）路由， 同样path与params不能搭配 */</span></span><br></pre></td></tr></table></figure><hr><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a><strong>路由守卫</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 全局守卫 */</span></span><br><span class="line"><span class="comment">// beforeEach  afterEach</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 返回 false 以取消导航</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 路由独享的守卫 */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/loginsuccess&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;LoginSuccess&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">LoginSuccess</span>,</span><br><span class="line">    <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----登录成功页面的路由独享的守卫&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 组件内路由守卫 */</span></span><br><span class="line"><span class="comment">// beforeRouteEnter  beforeRouteUpdate  beforeRouteLeave  不能访问this，通过 vm 访问组件实例</span></span><br><span class="line"><span class="comment">// setup中的守卫 onBeforeRouteUpdate 和 onBeforeRouteLeave两个，没有对应的beforeRouteEnter</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：忽略 mixins 中的导航守卫</span></span><br></pre></td></tr></table></figure><hr><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a><strong>动态路由</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增路由</span></span><br><span class="line">router.<span class="title function_">addRoute</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/xxx&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: xxx,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 移除路由</span></span><br><span class="line">router.<span class="title function_">removeRoute</span>(<span class="string">&#x27;xxx&#x27;</span>); <span class="comment">// 通过 name 删除</span></span><br><span class="line">router.<span class="title function_">addRoute</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/bbb&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;xxx&#x27;</span>, <span class="attr">component</span>: bbb &#125;) <span class="comment">// 名字重复时自动覆盖</span></span><br></pre></td></tr></table></figure><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a><strong>其他</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// resolve 返回路由地址的标准化版本。还包括一个包含任何现有 base 的 href 属性。</span></span><br><span class="line"><span class="comment">// 使用 resolve 新窗口打开</span></span><br><span class="line"><span class="keyword">const</span> &#123;href&#125; = <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">resolve</span>(&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;/xxx&quot;</span>,</span><br><span class="line">  <span class="attr">query</span>:&#123; <span class="attr">id</span>:xx &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(href, <span class="string">&#x27;_blank&#x27;</span>);<span class="comment">//打开新的窗口</span></span><br></pre></td></tr></table></figure><hr><h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a><strong>插槽</strong></h1><p>参考：<a href="https://blog.csdn.net/weixin_44790314/article/details/112572222">CSDN</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有默认插槽时,组件的标签才可以被当作插槽的模板来使用,这样我们就可以把 v-slot 直接用在组件上,</span></span><br><span class="line"><span class="comment">不然必须放在template标签内 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">自定义组件</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; slotProps.user.firstName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">自定义组件</span>&gt;</span></span><br><span class="line"></span><br><span class="line">缩写语法：</span><br><span class="line"><span class="tag">&lt;<span class="name">自定义组件</span> <span class="attr">v-slot</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; slotProps.user.firstName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">自定义组件</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态插槽名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">自定义标签</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:</span>[<span class="attr">slotName</span>]&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">自定义标签</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意：如果希望使用缩写，则必须带参数，也就是默认插槽的缩写和这个插槽缩写不能够连用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">自定义标签</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 会报错 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">defalut</span>=<span class="string">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">自定义标签</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a><strong>全局组件</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;MyComponent&#x27;</span>, <span class="title class_">MyComponent</span>)</span><br><span class="line"><span class="comment">// app.component() 方法可以被链式调用：</span></span><br><span class="line">app</span><br><span class="line">  .<span class="title function_">component</span>(<span class="string">&#x27;ComponentA&#x27;</span>, <span class="title class_">ComponentA</span>)</span><br><span class="line">  .<span class="title function_">component</span>(<span class="string">&#x27;ComponentB&#x27;</span>, <span class="title class_">ComponentB</span>)</span><br><span class="line">  .<span class="title function_">component</span>(<span class="string">&#x27;ComponentC&#x27;</span>, <span class="title class_">ComponentC</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a><strong>自定义指令</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="comment">// 在模板中启用 v-focus</span></span><br><span class="line"><span class="keyword">const</span> vFocus = &#123;</span><br><span class="line">    <span class="attr">mounted</span>: <span class="function">(<span class="params">el</span>) =&gt;</span> el.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-focus</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有&lt;script setup&gt;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="regexp">/.../</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">directives</span>: &#123;</span><br><span class="line">    <span class="comment">// 在模板中启用 v-focus</span></span><br><span class="line">    <span class="attr">focus</span>: &#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义指令全局注册</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使 v-focus 在所有组件中都可用</span></span><br><span class="line">app.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h1 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a><strong>自定义插件</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用插件</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line">app.<span class="title function_">use</span>(myPlugin, &#123;</span><br><span class="line">  <span class="comment">/* 可选的选项 */</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myPlugin = &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">app, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 配置此应用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="defineComponent"><a href="#defineComponent" class="headerlink" title="defineComponent"></a><strong>defineComponent</strong></h1><p>defineComponent 本身的功能很简单，但是最主要的功能是为了 ts 下的类型推到。</p><p>类似于vite里面的defineConfing</p><hr><h1 id="mitt"><a href="#mitt" class="headerlink" title="mitt"></a><strong>mitt</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">yarn add mitt  <span class="comment">// 安装依赖</span></span><br><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&#x27;mitt&#x27;</span></span><br><span class="line"><span class="keyword">const</span> emitter = <span class="title function_">mitt</span>()</span><br><span class="line">emitter.<span class="title function_">on</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>, e) ) <span class="comment">// 绑定事件</span></span><br><span class="line">emitter.<span class="title function_">emit</span>(<span class="string">&#x27;foo&#x27;</span>, &#123; <span class="attr">a</span>: <span class="string">&#x27;b&#x27;</span> &#125;) <span class="comment">// 触发事件</span></span><br><span class="line">emitter.<span class="property">all</span>.<span class="title function_">clear</span>() <span class="comment">// 清空所有事件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onFoo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">emitter.<span class="title function_">on</span>(<span class="string">&#x27;foo&#x27;</span>, onFoo)</span><br><span class="line">emitter.<span class="title function_">off</span>(<span class="string">&#x27;foo&#x27;</span>, onFoo) <span class="comment">// 删除给定类型的事件处理程序（需要传递两个参数）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般使用方式 mitt.ts，其他 vue 文件引用这个模块</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;mitt&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;mitt&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">mitt</span>()</span><br></pre></td></tr></table></figure><hr><h1 id="vue3-补充"><a href="#vue3-补充" class="headerlink" title="vue3 补充"></a><strong>vue3 补充</strong></h1><h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a><strong>项目构建</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用官方的脚手架搭建 npm init vue@latest</span></span><br><span class="line"><span class="comment">// 使用 vite 搭建 npm create vite@latest</span></span><br><span class="line"><span class="comment">// 脚手架的配置会比 vite 全</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目中 ts 识别不了 vue 文件、在声明文件 env.d.ts vite-env.d.ts 中添加</span></span><br><span class="line"><span class="comment">// 或者开启插件 TypeScript Vue Plugin (Volar)</span></span><br><span class="line">declare <span class="variable language_">module</span> <span class="string">&#x27;*.vue&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> type &#123; <span class="title class_">DefineComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">component</span>: <span class="title class_">DefineComponent</span>&lt;&#123;&#125;, &#123;&#125;, any&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> component</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="语法补充"><a href="#语法补充" class="headerlink" title="语法补充"></a><strong>语法补充</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1. 事件名称使用变量</span></span><br><span class="line"><span class="comment">&lt;template&gt;</span></span><br><span class="line"><span class="comment">    &lt;button @[event]=&quot;submit&quot; type=&quot;submit&quot;&gt;submit&lt;/button&gt;</span></span><br><span class="line"><span class="comment">&lt;/template&gt;</span></span><br><span class="line"><span class="comment"> &lt;script setup lang=&quot;ts&quot;&gt;</span></span><br><span class="line"><span class="comment"> const event = &#x27;click&#x27;</span></span><br><span class="line"><span class="comment"> const submit = () =&gt; &#123;&#125;</span></span><br><span class="line"><span class="comment"> &lt;/script&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 2. v-memo 需要传入一个固定长度的依赖值数组进行比较。</span></span><br><span class="line"><span class="comment">如果数组里的每个值都与最后一次的渲染相同那么整个子树的更新将被跳过。</span></span><br><span class="line"><span class="comment">如：当组件重新渲染，如果 valueA 和 valueB 都保持不变，这个 div 及其子项的所有更新都将被跳过</span></span><br><span class="line"><span class="comment">&lt;div v-memo=&quot;[valueA, valueB]&quot;&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;/div&gt;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">与 v-for 使用，确保两者都绑定在同一个元素上。v-memo 不能用在 v-for 内部。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* key 使用 index 或者不填写时，使用 v-for 逆向添加删除时，input 值会存在问题（无 v-model），</span></span><br><span class="line"><span class="comment">   vue3 与 vue2 都会存在。</span></span><br><span class="line"><span class="comment">   另外：当 input 有 v-model 绑定了值时，会正常显示，每个 input 都有不同的绑定。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ref 类型的两种方式</span></span><br><span class="line"><span class="comment">import type &#123; Ref &#125; from &quot;vue&quot;</span></span><br><span class="line"><span class="comment">const data = ref&lt;&#123; name: string &#125;&gt;(&#123;name: &#x27;xxx&#x27;&#125;)</span></span><br><span class="line"><span class="comment">const data: Ref&lt;&#123; name: string &#125;&gt; = ref(&#123; name: &#x27;xxx&#x27; &#125;)</span></span><br><span class="line"><span class="comment">// 其他</span></span><br><span class="line"><span class="comment">shallowRef 是浅层次的响应式，只支持到 value，</span></span><br><span class="line"><span class="comment">另外 ref 和 shallowRef 不能同时使用，ref 会影响 shallowRef 的变化，造成视图更新。</span></span><br><span class="line"><span class="comment">ref 更新视图会调用 triggerRef 函数，triggerRef() 需要提供 &quot;ref&quot; 的自变量。</span></span><br><span class="line"><span class="comment">shallowReactive 与 reactive 同时使用也会有上面的问题</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* toref 可以解构 ref 里面的对象</span></span><br><span class="line"><span class="comment">const obj = ref(&#123; name: &#x27;John&#x27;, age: 25 &#125;);</span></span><br><span class="line"><span class="comment">const nameRef = toRef(obj.value, &#x27;name&#x27;);</span></span><br><span class="line"><span class="comment">const ageRef = toRef(obj.value, &#x27;age&#x27;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">vue3 Proxy 是保证 this 指向问题</span></span><br><span class="line"><span class="comment">参考：https://juejin.cn/post/7222460499493011515</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* computed 使用函数简写时候，是不能修改值的，为 readonly */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* watch 监听某个具体值要写一个函数返回，ref、reactive 都是如此，</span></span><br><span class="line"><span class="comment">直接监听 reactive 是没有旧值，具体到某个属性是有返回旧值，</span></span><br><span class="line"><span class="comment">第三个参数 flush，&#x27;pre&#x27; | &#x27;post&#x27; | &#x27;sync&#x27; // 默认：&#x27;pre&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h2 id="vue-样式-BEM"><a href="#vue-样式-BEM" class="headerlink" title="vue 样式 BEM"></a><strong>vue 样式 BEM</strong></h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BEM 架构是一种 css 架构，是block、element、modifier的缩写，</span></span><br><span class="line"><span class="comment">// 分别为块层、元素层、修饰符层，element UI 也使用的是这种架构</span></span><br><span class="line"><span class="comment">// 参考：https://juejin.cn/post/7102980936232337445?searchId=20230801141609F99C0AAEFFE49B662D21</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$block-sel</span>: <span class="string">&quot;-&quot;</span> !default;</span><br><span class="line"><span class="variable">$element-sel</span>: <span class="string">&quot;__&quot;</span> !default;</span><br><span class="line"><span class="variable">$modifier-sel</span>: <span class="string">&quot;--&quot;</span> !default;</span><br><span class="line"><span class="variable">$namespace</span>:<span class="string">&#x27;xm&#x27;</span> !default;</span><br><span class="line"><span class="keyword">@mixin</span> bfc &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//混入</span></span><br><span class="line"><span class="keyword">@mixin</span> b(<span class="variable">$block</span>) &#123;</span><br><span class="line">   <span class="variable">$B</span>: <span class="variable">$namespace</span> + <span class="variable">$block-sel</span> + <span class="variable">$block</span>; <span class="comment">//变量</span></span><br><span class="line">   .#&#123;<span class="variable">$B</span>&#125;&#123; <span class="comment">//插值语法#&#123;&#125;</span></span><br><span class="line">     <span class="keyword">@content</span>; <span class="comment">//内容替换</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">@mixin</span> flex &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">@mixin</span> e(<span class="variable">$element</span>) &#123;</span><br><span class="line">    <span class="variable">$selector</span>:&amp;;</span><br><span class="line">    <span class="keyword">@at-root</span> &#123;</span><br><span class="line">        #&#123;<span class="variable">$selector</span> + <span class="variable">$element-sel</span> + <span class="variable">$element</span>&#125; &#123;</span><br><span class="line">            <span class="keyword">@content</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">@mixin</span> m(<span class="variable">$modifier</span>) &#123;</span><br><span class="line">    <span class="variable">$selector</span>:&amp;;</span><br><span class="line">    <span class="keyword">@at-root</span> &#123;</span><br><span class="line">        #&#123;<span class="variable">$selector</span> + <span class="variable">$modifier-sel</span> + <span class="variable">$modifier</span>&#125; &#123;</span><br><span class="line">            <span class="keyword">@content</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">@include</span> b(<span class="string">&#x27;wraps&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">@include</span> bfc;</span><br><span class="line">    <span class="keyword">@include</span> flex;</span><br><span class="line">    <span class="keyword">@include</span> e(right)&#123;</span><br><span class="line">        <span class="attribute">flex</span>:<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="组件语法补充"><a href="#组件语法补充" class="headerlink" title="组件语法补充"></a><strong>组件语法补充</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">// ref 获取组件 DOM 定义类型</span><br><span class="line">&lt;Menu ref=&quot;refMenu&quot;&gt;&lt;/Menu&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import MenuCom from &#x27;../xxxxxxx.vue&#x27;</span><br><span class="line">// 注意这儿的typeof里面放的是组件名字 (MenuCom) 不是 ref 的名字 ref 的名字对应开头的变量名 (refMenu)</span><br><span class="line">const refMenu = ref&lt;InstanceType&lt;typeof MenuCom&gt;&gt;()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">// 动态组件警告，使用 markRaw、shallowRef</span><br><span class="line">const isCom = shallowRef(A)</span><br><span class="line">const tab = reactive&lt;Com[]&gt;([&#123;</span><br><span class="line">    name: &quot;A组件&quot;,</span><br><span class="line">    comName: markRaw(A)</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    name: &quot;B组件&quot;,</span><br><span class="line">    comName: markRaw(B)</span><br><span class="line">&#125;])</span><br><span class="line"></span><br><span class="line">// gsap 数字滚动</span><br><span class="line">&lt;div&gt;&#123;&#123; num.tweenedNumber.toFixed(0) &#125;&#125;&lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; reactive, watch &#125; from &#x27;vue&#x27;</span><br><span class="line">import gsap from &#x27;gsap&#x27;</span><br><span class="line">const num = reactive(&#123;</span><br><span class="line">    tweenedNumber: 0,</span><br><span class="line">    current:0</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">watch(()=&gt;num.current, (newVal) =&gt; &#123;</span><br><span class="line">    gsap.to(num, &#123;</span><br><span class="line">        duration: 1,</span><br><span class="line">        tweenedNumber: newVal</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line"> Provide / Inject 设置不能修改</span><br><span class="line">import &#123; inject, provide, ref, readonly &#125; from &#x27;vue&#x27;</span><br><span class="line">import type &#123; Ref &#125; from &quot;vue&quot;</span><br><span class="line">provide(&#x27;flag&#x27;, readonly(flag)) // 父组件</span><br><span class="line">const flag = inject&lt;Ref&lt;number&gt;&gt;(&#x27;flag&#x27;, ref(1)) // 子组件，设置类型与默认值</span><br><span class="line"></span><br><span class="line">// mitt 补充</span><br><span class="line">import mitt from &#x27;mitt&#x27;</span><br><span class="line">const emitter = mitt()</span><br><span class="line">emitter.on(&#x27;*&#x27;, (type, e) =&gt; console.log(type, e) ) // 监听所有事件</span><br><span class="line">emitter.all.clear() // 清除所有事件</span><br></pre></td></tr></table></figure><hr><h2 id="vue3-tsx-语法"><a href="#vue3-tsx-语法" class="headerlink" title="vue3 tsx 语法"></a><strong>vue3 tsx 语法</strong></h2><p>参考：<a href="https://xiaoman.blog.csdn.net/article/details/123172735">小满 csdn</a> <a href="https://cn.vuejs.org/guide/extras/render-function.html">vue3 文档</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式 1 直接返回一个渲染函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">renderDom</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> renderDom</span><br><span class="line"><span class="comment">// 方式 2 使用 defineComponent vue3 的 setup </span></span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">()=&gt;</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 方式 3 使用 defineComponent 的 vue2 写法</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="指令补充"><a href="#指令补充" class="headerlink" title="指令补充"></a><strong>指令补充</strong></h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v-model 自定义修饰符</span></span><br><span class="line">&lt;<span class="title class_">Child</span> v-model.<span class="property">is</span>:title=<span class="string">&quot;xxx&quot;</span>&gt;&lt;<span class="regexp">/Chlid&gt; /</span>/ 父组件</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123;</span><br><span class="line">    <span class="attr">title</span>?: <span class="built_in">string</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">titleModifiers</span>?: &#123;</span><br><span class="line">        <span class="attr">is</span>: <span class="built_in">boolean</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> propData = defineProps&lt;<span class="title class_">Props</span>&gt;()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">close</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(propData.<span class="property">titleModifiers</span>.<span class="property">is</span>);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Vue3-定义全局函数和变量"><a href="#Vue3-定义全局函数和变量" class="headerlink" title="Vue3 定义全局函数和变量"></a><strong>Vue3 定义全局函数和变量</strong></h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mian.ts ，添加全局属性或函数</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$http</span> = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line"><span class="comment">// template 里面可以直接使用，setup 里面的两种使用方式</span></span><br><span class="line"><span class="comment">// 1.第一种方式</span></span><br><span class="line"><span class="keyword">import</span> &#123; getCurrentInstance, <span class="title class_">ComponentInternalInstance</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> &#123; appContext &#125; = &lt;<span class="title class_">ComponentInternalInstance</span>&gt;<span class="title function_">getCurrentInstance</span>()</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(appContext.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$env</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 2.第二种方式</span></span><br><span class="line"> （推荐）</span><br><span class="line"><span class="keyword">import</span> &#123;ref,reactive,getCurrentInstance&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">getCurrentInstance</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(app?.<span class="property">proxy</span>?.<span class="property">$filters</span>.<span class="title function_">format</span>(<span class="string">&#x27;js&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意报错声明文件</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 声明要扩充@vue/runtime-core包的声明.</span></span><br><span class="line"><span class="comment">// 这里扩充&quot;ComponentCustomProperties&quot;接口, 因为他是vue3中实例的属性的类型.</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;vue&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Vue3-插件补充"><a href="#Vue3-插件补充" class="headerlink" title="Vue3 插件补充"></a><strong>Vue3 插件补充</strong></h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;loading&quot;</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">    </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> isShow = <span class="title function_">ref</span>(<span class="literal">false</span>)<span class="comment">//定位loading 的开关</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//对外暴露 当前组件的属性和方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">defineExpose</span>(&#123;isShow&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createVNode, render, <span class="title class_">VNode</span>, <span class="title class_">App</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Loading</span> <span class="keyword">from</span> <span class="string">&#x27;./index.vue&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">install</span>(<span class="params"><span class="attr">app</span>: <span class="title class_">App</span></span>) &#123;</span><br><span class="line">        <span class="comment">//createVNode vue提供的底层方法 可以给我们组件创建一个虚拟DOM 也就是Vnode</span></span><br><span class="line">        <span class="keyword">const</span> <span class="attr">vnode</span>: <span class="title class_">VNode</span> = <span class="title function_">createVNode</span>(<span class="title class_">Loading</span>)</span><br><span class="line">        <span class="comment">//render 把我们的Vnode 生成真实DOM 并且挂载到指定节点</span></span><br><span class="line">        <span class="title function_">render</span>(vnode, <span class="variable language_">document</span>.<span class="property">body</span>)</span><br><span class="line">        <span class="comment">// Vue 提供的全局配置 可以自定义</span></span><br><span class="line">        app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$loading</span> = &#123;</span><br><span class="line">            <span class="attr">isShow</span>: <span class="function">() =&gt;</span> vnode.<span class="property">component</span>?.<span class="property">exposed</span>?.<span class="property">isShow</span>,</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写声明文件放置报错 和 智能提示</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;@vue/runtime-core&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">        <span class="attr">$loading</span>: &#123;<span class="attr">isShow</span>: <span class="built_in">boolean</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="vue3-样式补充"><a href="#vue3-样式补充" class="headerlink" title="vue3 样式补充"></a><strong>vue3 样式补充</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">// :deep()</span><br><span class="line">// 使用后，会改变属性选择器的位置，</span><br><span class="line">// 如：.a .b 、.a :deep(.b) --&gt;  .a .b[data-v-xxx] 、.a[data-v-xxx] .b</span><br><span class="line"></span><br><span class="line">// 插槽选择器，在组件里面写上，也就是放 slot 的组件，不写就是默认是父的 </span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"> :slotted(.a) &#123;</span><br><span class="line">    color:red</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">// 全局选择器</span><br><span class="line">// 加入全局样式通常都是新建一个 style 标签 不加 scoped 现在有更优雅的解决方案</span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">:global(div)&#123;</span><br><span class="line">    color:red</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">// 动态 CSS</span><br><span class="line"> 对象需要添加引号</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">const red = ref(&#123; color:&#x27;pink&#x27; &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.div &#123;</span><br><span class="line">    color: v-bind(&#x27;red.color&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">// css module</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div :class=&quot;$style.red&quot;&gt;</span><br><span class="line">        dws</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;style module&gt;</span><br><span class="line">.red &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">// 自定义名称，与组合式 API 使用</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div :class=&quot;[zs.red,zs.border]&quot;&gt;</span><br><span class="line">        小满是个弟弟</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; useCssModule &#125; from &#x27;vue&#x27;</span><br><span class="line">const css = useCssModule(&#x27;zs&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;style module=&quot;zs&quot;&gt;</span><br><span class="line">.red &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.border&#123;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="Vue3集成Tailwind-CSS"><a href="#Vue3集成Tailwind-CSS" class="headerlink" title="Vue3集成Tailwind CSS"></a><strong>Vue3集成Tailwind CSS</strong></h2><p>参考：<a href="https://xiaoman.blog.csdn.net/article/details/124951311">csdn</a> <a href="https://www.tailwindcss.cn/">tailwindcss</a></p><hr><h2 id="Vue3集成-unocss原子化"><a href="#Vue3集成-unocss原子化" class="headerlink" title="Vue3集成 unocss原子化"></a><strong>Vue3集成 unocss原子化</strong></h2><p>参考：<a href="https://xiaoman.blog.csdn.net/article/details/125650172">csdn</a></p><hr><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a><strong>环境变量</strong></h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 注意：不能使用动态的后缀，会在生产环境无效</span></span><br><span class="line"><span class="keyword">let</span> xxx = <span class="string">&#x27;BASE.URL&#x27;</span></span><br><span class="line"><span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>[xxx]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.vite.config.ts 里面使用环境变量的值</span></span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath, <span class="variable constant_">URL</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;node:url&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig, loadEnv &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vueJsx <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue-jsx&#x27;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="title function_">default</span> (&#123;mode&#125;:<span class="built_in">any</span>) =&gt; &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">loadEnv</span>(mode,process.<span class="title function_">cwd</span>()))</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="title function_">vue</span>(), <span class="title function_">vueJsx</span>()],</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">      <span class="attr">alias</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;@&#x27;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./src&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><hr><h2 id="pinia-持久化插件"><a href="#pinia-持久化插件" class="headerlink" title="pinia 持久化插件"></a><strong>pinia 持久化插件</strong></h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $subscribe 只要有state 的变化就会走这个函数</span></span><br><span class="line"><span class="title class_">TestStore</span>.$subscribe(<span class="function">(<span class="params">args,state</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(args,state);</span><br><span class="line">   </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 如果你的组件卸载之后还想继续调用请设置第二个参数</span></span><br><span class="line"><span class="title class_">TestStore</span>.$subscribe(<span class="function">(<span class="params">args,state</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(args,state);</span><br><span class="line">   </span><br><span class="line">&#125;,&#123;</span><br><span class="line">  <span class="attr">detached</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// ... 其他参数和 watch 类似</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 订阅 Actions的调用，只要有 actions 被调用就会走这个函数</span></span><br><span class="line"><span class="title class_">Test</span>.$onAction(<span class="function">(<span class="params">args</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">   </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 第二个参数组件卸载之后还想继续调用</span></span><br><span class="line"><span class="title class_">Test</span>.$onAction(<span class="function">(<span class="params">args</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">   </span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// pinia 持久化插件</span></span><br><span class="line"><span class="comment">// 地址：https://prazdevs.github.io/pinia-plugin-persistedstate/zh/</span></span><br><span class="line"><span class="comment">// yarn add pinia-plugin-persistedstate</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> piniaPluginPersistedstate <span class="keyword">from</span> <span class="string">&#x27;pinia-plugin-persistedstate&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line">pinia.<span class="title function_">use</span>(piniaPluginPersistedstate)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">someState</span>: <span class="string">&#x27;你好 pinia&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">persist</span>: <span class="literal">true</span>, <span class="comment">// 此处配置即可，另外也支持 setup 写法</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="router-补充"><a href="#router-补充" class="headerlink" title="router 补充"></a><strong>router 补充</strong></h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名视图</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory, <span class="title class_">RouteRecordRaw</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="attr">components</span>: &#123;</span><br><span class="line">            <span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/layout/menu.vue&#x27;</span>),</span><br><span class="line">            <span class="attr">header</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/layout/header.vue&#x27;</span>),</span><br><span class="line">            <span class="attr">content</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/layout/content.vue&#x27;</span>),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重定向-别名</span></span><br><span class="line"><span class="comment">// 1. 字符串写法</span></span><br><span class="line"><span class="attr">redirect</span>:<span class="string">&#x27;/user1&#x27;</span>,</span><br><span class="line"><span class="comment">// 2. 对象形式配置</span></span><br><span class="line"><span class="attr">redirect</span>: &#123; <span class="attr">path</span>: <span class="string">&#x27;/user1&#x27;</span> &#125;,</span><br><span class="line"><span class="comment">// 3. 函数模式（可以传参）</span></span><br><span class="line"><span class="attr">redirect</span>: <span class="function">(<span class="params">to</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/user1&#x27;</span>,</span><br><span class="line">        <span class="attr">query</span>: to.<span class="property">query</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 别名 alias</span></span><br><span class="line"><span class="attr">alias</span>:[<span class="string">&quot;/root&quot;</span>,<span class="string">&quot;/root2&quot;</span>,<span class="string">&quot;/root3&quot;</span>],</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端可视化</title>
      <link href="/2022/07/12/%E5%89%8D%E7%AB%AF%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2022/07/12/%E5%89%8D%E7%AB%AF%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="# 前言"></a># 前言</h1><p>本文记录所学的一点可视化知识</p><hr><h1 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a><strong>数据可视化</strong></h1><p><img src="https://pic.imgdb.cn/item/62d1017ff54cd3f937f0fcdc.png"></p><ul><li><p>Skia 是 Chrome 和 Android 的底层 2D 绘图引擎，Skia 采用 C++ 编程，由于它位于浏览器的更底层，所以我们平常接触较少。</p></li><li><p>OpenGL（Open Graphics Library）是2D、3D图形渲染库，它可以绘制从简单的2D图形到复杂的3D景象。OpenGL 常用于 CAD、VR、数据可视化和游戏等众多领域。</p></li><li><p>Chrome 使用 Skia 作为绘图引擎，向上层开放了 canvas、svg、WebGL、HTML 等绘图能力。</p></li></ul><hr><h1 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a><strong>canvas</strong></h1><p>标签只是图形容器，相当于一个画布，canvas 元素本身是没有绘图能力的。所有的绘制工作必须在 JavaScript 内部完成，相当于使用画笔在画布上画画。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 注意：必须指定宽高---canvas标签默认宽度与高度 300 * 150</span><br><span class="line">// canvas标签的w|h务必通过canvas标签属性width|height设置</span><br><span class="line">// 切记不能通过样式去设置画布的宽度与高度这样canvas的坐标体系会出现问题</span><br><span class="line">&lt;canvas id=&quot;charts&quot; width=&quot;800&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure><h2 id="getContext"><a href="#getContext" class="headerlink" title="getContext()"></a><strong>getContext()</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 getContext() 获取 canvas 的上下文环境，目前 getContext() 的参数只有 2d，暂时还不支持 3d</span></span><br><span class="line"><span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;charts&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="绘制线段"><a href="#绘制线段" class="headerlink" title="绘制线段"></a><strong>绘制线段</strong></h2><ul><li>moveTo(x, y)：把路径移动到画布中的指定点，不创建线条</li><li>lineTo(x, y)：添加一个新点，然后在画布中创建从该点到最后指定点的线条</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//canvas标签任何操作务必通过JS完成</span><br><span class="line">//通过JS当中&quot;笔&quot;去完成</span><br><span class="line">let canvas = document.querySelector(&#x27;canvas&#x27;);</span><br><span class="line">//获取画布的笔【上下文】</span><br><span class="line">let ctx = canvas.getContext(&#x27;2d&#x27;);</span><br><span class="line">//绘制线段:绘制线段的起点的设置</span><br><span class="line">ctx.moveTo(100,100);</span><br><span class="line">//其他点的设置：可以有多个</span><br><span class="line">ctx.lineTo(100,200);</span><br><span class="line">ctx.lineTo(200,100);</span><br><span class="line">//设置图形的填充的颜色</span><br><span class="line">ctx.fillStyle = &quot;red&quot;;</span><br><span class="line">ctx.fill();</span><br><span class="line">//设置线段的颜色与宽度</span><br><span class="line">ctx.strokeStyle = &quot;purple&quot;;</span><br><span class="line">ctx.lineWidth=&quot;20&quot;</span><br><span class="line">//可以设置起点与最终的结束点连接在一起</span><br><span class="line">ctx.closePath();</span><br><span class="line">//stroke方法绘制线段</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><h2 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a><strong>绘制矩形</strong></h2><ul><li>fillRect(x, y, width, height) 绘制填充颜色的矩形</li><li>strokeRect(x, y, width, height) 绘制线条的矩形</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取DOM节点</span></span><br><span class="line"><span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line"><span class="comment">//获取上下文</span></span><br><span class="line"><span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"><span class="comment">//绘制矩形第一种方式:参数为x、y、w、h</span></span><br><span class="line"><span class="comment">//这种的矩形没有办法设置填充颜色</span></span><br><span class="line">ctx.<span class="title function_">strokeRect</span>(<span class="number">100</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line"><span class="comment">//第二种方式绘制矩形</span></span><br><span class="line"><span class="comment">//填充颜色可以替换</span></span><br><span class="line"><span class="comment">//绘制图形之前设置填充颜色</span></span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;skyblue&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">fill</span>();</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">300</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">200</span>);</span><br></pre></td></tr></table></figure><h2 id="绘制圆形"><a href="#绘制圆形" class="headerlink" title="绘制圆形"></a><strong>绘制圆形</strong></h2><p>arc(x, y, radius, starAngle, endAngle, anticlockwise)</p><ul><li>x : 圆心的 x 坐标</li><li>y：圆心的 y 坐标</li><li>radius ： 半径</li><li>starAngle ：开始角度</li><li>endAngle：结束角度</li><li>anticlockwise ：是否逆时针（true）为逆时针，(false)为顺时针</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取DOM</span></span><br><span class="line"><span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line"><span class="comment">//获取上下文</span></span><br><span class="line"><span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"><span class="comment">//绘制圆形</span></span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line"><span class="comment">//绘制圆形的方法：x、y,r,起始弧度、结束的弧度,是否逆时针绘制</span></span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">100</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//设置填充颜色</span></span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">fill</span>();</span><br><span class="line"><span class="comment">//绘制圆形</span></span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制一个圆</span></span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">200</span>,<span class="number">200</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="literal">true</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h2 id="清除矩形与绘制文字"><a href="#清除矩形与绘制文字" class="headerlink" title="清除矩形与绘制文字"></a><strong>清除矩形与绘制文字</strong></h2><ul><li>fillText(text, x, y, maxWidth)</li><li>clearRect(x, y, width, height)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas width=<span class="string">&quot;600&quot;</span> height=<span class="string">&quot;400&quot;</span>&gt;&lt;/canvas&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取节点</span></span><br><span class="line"><span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line"><span class="comment">//获取上下文-笔</span></span><br><span class="line"><span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"><span class="comment">//绘制矩形</span></span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">100</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line"><span class="comment">//清除画布-整个画布被清除</span></span><br><span class="line"><span class="comment">//ctx.clearRect(0,0,600,400);</span></span><br><span class="line"><span class="comment">//清除部分画布</span></span><br><span class="line">ctx.<span class="title function_">clearRect</span>(<span class="number">100</span>,<span class="number">200</span>,<span class="number">50</span>,<span class="number">100</span>);</span><br><span class="line"><span class="comment">//设置文字大小</span></span><br><span class="line">ctx.<span class="property">font</span>=<span class="string">&quot;20px 微软雅黑&quot;</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> =<span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="comment">//绘制文字</span></span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&quot;数据可视化&quot;</span>,<span class="number">50</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h2 id="清除路径"><a href="#清除路径" class="headerlink" title="清除路径"></a><strong>清除路径</strong></h2><p>清除绘画的路径，多个图形就不会连接在一起</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">context.<span class="title function_">beginPath</span>()</span><br><span class="line">context.<span class="title function_">closePath</span>()</span><br></pre></td></tr></table></figure><hr><h1 id="svg"><a href="#svg" class="headerlink" title="svg"></a><strong>svg</strong></h1><p>SVG是一种基于XML的图像文件格式，它的英文全称为Scalable Vector Graphics，意思为可缩放的矢量图形。</p><h2 id="基本的SVG元素"><a href="#基本的SVG元素" class="headerlink" title="基本的SVG元素"></a><strong>基本的SVG元素</strong></h2><ul><li>  包裹并定义整个矢量图。标签之于矢量图就如同标签之于一个 web 页面。</li><li>  创建一条直线。</li><li>  创建折线。</li><li>  创建矩形。</li><li>  创建圆。</li><li>  创建圆和椭圆。</li><li>  创建多边形。</li><li>  通过指定点以及点和点之间的线来创建任意形状。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- svg双闭合标签：默认宽度与高度<span class="number">300</span> * <span class="number">150</span>  svg绘制图形务必在svg标签内部使用绘制图形 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- x1 y1第一个点的坐标  x2 y2 第二个点的坐标 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;100&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;100&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;200&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;200&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;100&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;200&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;200&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;100&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 绘制折线:可以多个点，多个点的时候，最好带有逗号 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">&quot;300 300, 50 100, 120 400,20,20&quot;</span> <span class="attr">fill-opacity</span>=<span class="string">&quot;0&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;cyan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">polyline</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 绘制矩形 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- fill属性：设置填充颜色的  fill-opacity设置填充颜色的透明度  stroke：线的颜色 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- x y 左上角点坐标 width 宽度 height 高度 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;400&quot;</span> <span class="attr">y</span>=<span class="string">&quot;400&quot;</span> <span class="attr">width</span>=<span class="string">&quot;150&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;pink&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 绘制圆形 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&#x27;370&#x27;</span> <span class="attr">cy</span>=<span class="string">&#x27;95&#x27;</span> <span class="attr">r</span>=<span class="string">&#x27;50&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;stroke:cyan; fill:none&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 绘制圆形|椭圆</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">       cx cy 圆心点坐标</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">       rx x轴半径</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">       ry y轴半径</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">  --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">ellipse</span> <span class="attr">cx</span>=<span class="string">&quot;500&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;500&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;100&quot;</span> <span class="attr">ry</span>=<span class="string">&quot;50&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:black;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ellipse</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 多边行 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">polygon</span> <span class="attr">points</span>=<span class="string">&quot;600 100, 300 400, 750 100&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;red&quot;</span> <span class="attr">fill-opacity</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 绘制任意图形</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">    M 移动到初始位置</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">    L 画线</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">    Z 将结束和开始点闭合</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">  --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-opacity</span>=<span class="string">&quot;0&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;skyblue&quot;</span> <span class="attr">d</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">  M 10  10</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">  L 20 400</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">  L 30 120</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">  L 40 66</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">  L 50 99</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">  L 60 120</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">  L 70 99</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">  Z</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="echarts"><a href="#echarts" class="headerlink" title="echarts"></a><strong>echarts</strong></h1><h2 id="多系列混合"><a href="#多系列混合" class="headerlink" title="多系列混合"></a><strong>多系列混合</strong></h2><p>一个echarts 实例 可以包含多个图标，再series中可以写上多个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">series</span>:[    </span><br><span class="line">     &#123; </span><br><span class="line">         <span class="attr">type</span>:<span class="string">&quot;bar&quot;</span>,  <span class="comment">//柱状图</span></span><br><span class="line">         <span class="attr">data</span>:[],</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="attr">type</span>:<span class="string">&#x27;line&#x27;</span>, <span class="comment">// 折线图</span></span><br><span class="line">         <span class="attr">data</span>:[]</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="attr">type</span>:<span class="string">&#x27;pie&#x27;</span>, <span class="comment">//饼图</span></span><br><span class="line">         <span class="comment">//饼图你可以显示文字，data写法如下</span></span><br><span class="line">         <span class="attr">data</span>:[&#123;<span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">value</span>:<span class="number">10</span>&#125;]</span><br><span class="line">     &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="新特性：dataset"><a href="#新特性：dataset" class="headerlink" title="新特性：dataset"></a><strong>新特性：dataset</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基于准备好的DOM初始化echarts实例</span></span><br><span class="line"><span class="keyword">let</span> dom = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="comment">//创建echarts实例</span></span><br><span class="line"><span class="keyword">let</span> mycharts = echarts.<span class="title function_">init</span>(dom);</span><br><span class="line"><span class="comment">//数据集</span></span><br><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">    [<span class="string">&quot;衣服&quot;</span>,<span class="number">10</span>,<span class="number">22</span>,<span class="string">&#x27;x&#x27;</span>,<span class="number">10</span>],</span><br><span class="line">    [<span class="string">&quot;直播&quot;</span>,<span class="number">12</span>,<span class="number">55</span>,<span class="string">&#x27;y&#x27;</span>,<span class="number">60</span>],</span><br><span class="line">    [<span class="string">&quot;游戏&quot;</span>,<span class="number">16</span>,<span class="number">44</span>,<span class="string">&#x27;z&#x27;</span>,<span class="number">50</span>],</span><br><span class="line">    [<span class="string">&quot;电影&quot;</span>,<span class="number">19</span>,<span class="number">32</span>,<span class="string">&#x27;t&#x27;</span>,<span class="number">70</span>],</span><br><span class="line">]</span><br><span class="line"><span class="comment">//指定图表的配置项与数据</span></span><br><span class="line">mycharts.<span class="title function_">setOption</span>(&#123;</span><br><span class="line">      <span class="comment">//设置字符集</span></span><br><span class="line">      <span class="attr">dataset</span>:&#123;</span><br><span class="line">         <span class="comment">//数据源</span></span><br><span class="line">         <span class="attr">source</span>:data</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//图表的标题</span></span><br><span class="line">      <span class="attr">title</span>:&#123;</span><br><span class="line">          <span class="comment">//主标题的设置</span></span><br><span class="line">         <span class="attr">text</span>:<span class="string">&#x27;数据可视化&#x27;</span>,</span><br><span class="line">         <span class="comment">//子标题</span></span><br><span class="line">         <span class="attr">subtext</span>:<span class="string">&quot;echarts基本使用&quot;</span>,</span><br><span class="line">         <span class="comment">//主标题的颜色</span></span><br><span class="line">         <span class="attr">textStyle</span>:&#123;</span><br><span class="line">             <span class="attr">color</span>:<span class="string">&#x27;cyan&#x27;</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="comment">//设置标题位置</span></span><br><span class="line">         <span class="attr">left</span>:<span class="string">&#x27;center&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//x轴的配置项</span></span><br><span class="line">      <span class="attr">xAxis</span>:&#123;</span><br><span class="line">          <span class="comment">//数据</span></span><br><span class="line">          <span class="attr">data</span>:[<span class="string">&quot;衣服&quot;</span>,<span class="string">&#x27;直播&#x27;</span>,<span class="string">&#x27;游戏&#x27;</span>,<span class="string">&#x27;电影&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//y轴的配置项</span></span><br><span class="line">      <span class="attr">yAxis</span>:&#123;</span><br><span class="line">          <span class="comment">//显示Y轴的线</span></span><br><span class="line">          <span class="attr">axisLine</span>:&#123;</span><br><span class="line">              <span class="attr">show</span>:<span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">//显示Y轴刻度</span></span><br><span class="line">          <span class="attr">axisTick</span>:&#123;</span><br><span class="line">              <span class="attr">show</span>:<span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//系列的设置：绘制什么样类型的图表、数据的展示在这里设置</span></span><br><span class="line">      <span class="attr">series</span>:[</span><br><span class="line">       <span class="comment">//柱状图    </span></span><br><span class="line">           &#123; </span><br><span class="line">               <span class="comment">//图表类型的设置</span></span><br><span class="line">               <span class="attr">type</span>:<span class="string">&quot;bar&quot;</span>,</span><br><span class="line">               <span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">               <span class="attr">encdoe</span>:&#123;</span><br><span class="line">                   <span class="attr">y</span>:<span class="number">1</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           ,</span><br><span class="line">           <span class="comment">// 折线图</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="attr">type</span>:<span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">               <span class="attr">color</span>:<span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">               <span class="attr">encode</span>:&#123;</span><br><span class="line">                   <span class="attr">y</span>:<span class="number">2</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="comment">//饼图</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="attr">type</span>:<span class="string">&#x27;pie&#x27;</span>,</span><br><span class="line">               <span class="attr">encode</span>:&#123;</span><br><span class="line">                   <span class="comment">//饼图旁边的文字</span></span><br><span class="line">                   <span class="attr">itemName</span>:<span class="number">3</span>,</span><br><span class="line">                   <span class="attr">value</span>:<span class="number">4</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">      ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="echarts组件"><a href="#echarts组件" class="headerlink" title="echarts组件"></a><strong>echarts组件</strong></h2><p><img src="https://pic.imgdb.cn/item/62d1017ff54cd3f937f0fce4.jpg"></p><p><strong>基本概念：定位、坐标系</strong></p><p>定位：使用grid属性、坐标系：yAxis为数组写法（可有多个配置项）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用grid绑定四个变量，每次改变重新调用配置项（可以使用input事件，每次改变值就重新render）</span></span><br><span class="line"><span class="attr">grid</span>: [&#123;</span><br><span class="line">  <span class="attr">left</span>: _left,</span><br><span class="line">  <span class="attr">top</span>: _top,</span><br><span class="line">  <span class="attr">right</span>: _right,</span><br><span class="line">  <span class="attr">bottom</span>: _bottom</span><br><span class="line">&#125;],</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">yAxis</span>: [&#123;</span><br><span class="line">  <span class="attr">min</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">max</span>: <span class="number">100</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">min</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">max</span>: <span class="number">100</span></span><br><span class="line">&#125;],</span><br><span class="line"><span class="comment">// yAxisIndex 表示使用哪个yAxis的对象</span></span><br><span class="line"><span class="attr">series</span>: [</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">seriesLayoutBy</span>: <span class="string">&#x27;row&#x27;</span>, <span class="attr">yAxisIndex</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>, <span class="attr">seriesLayoutBy</span>: <span class="string">&#x27;row&#x27;</span>, <span class="attr">yAxisIndex</span>: <span class="number">1</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 前端知识记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode配置</title>
      <link href="/2022/06/08/VSCode%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/06/08/VSCode%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一些 VSCode 插件和配置记录</p><hr><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a><strong>插件</strong></h1><p><img src="https://pic.imgdb.cn/item/62a083dd094754312946cd6c.png"></p><h1 id="相关插件配置"><a href="#相关插件配置" class="headerlink" title="相关插件配置"></a><strong>相关插件配置</strong></h1><ol><li><p>别名路径跳转 – @在项目中可以跳转（暂没配置）</p></li><li><p>翻译(英汉词典) –翻译（不用配置）</p></li><li><p>Auto Rename Tag –HTML前后自动修改（不用配置）</p></li><li><p>Chinese (Simplified) (简体中文) –不用配置</p></li><li><p>Code Spell Checker – 代码单词拼写检查</p><p>遇到不应该报错的单词需要配置 如：vuex（右键选择Ignore Words -&gt; 添加到User里）</p><p><img src="https://pic.imgdb.cn/item/62a083dd094754312946cd71.png"></p></li><li><p>DotENV – 环境变量文件支持插件</p></li><li><p>EditorConfig for Vs Code –配和项目中的编辑器.editorconfig文件使用（统一编辑器代码格式化）</p></li><li><p>ESlint –js语法检查配和.eslintrc.js使用（暂未配置）</p></li><li><p>JetBrains Icon Theme – 文件图标插件</p></li><li><p>Live Sass Compiler – 将scss转成css</p><p>配置不生成map文件</p><p><img src="https://pic.imgdb.cn/item/62a083dd094754312946cd8e.png"></p></li><li><p>Live Server – 代理服务器HTML打开浏览器（自动监听变化</p><p>插件配置默认打开浏览器为Chrome</p></li><li><p>Luke Dark Theme – 主题插件</p></li><li><p>Path Intellisense – 路径查找插件</p><p>配置@别名提示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// settings.json文件</span></span><br><span class="line"><span class="string">&quot;path-intellisense.mappings&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;/src&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>prettier - Code formatter –代码格式化（暂未配置）</p></li><li><p>Sass – 识别scss文件语法检查</p></li><li><p>SCSS Formatter – SCSS的格式化插件</p></li><li><p>Todo Highlight – 高亮Todo（已弃用改为Better Comments）</p></li><li><p>Vetur – 识别Vue文件（同时也有vue格式化的功能）</p></li><li><p>Vue 3 Snippets – 代码片段提示</p></li></ol><hr><h1 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a><strong>其他配置</strong></h1><h2 id="1-快捷键"><a href="#1-快捷键" class="headerlink" title="1.快捷键"></a><strong>1.快捷键</strong></h2><ol><li>单行代码注释：Ctrl+/</li><li>多行注释：Ctrl+Shift+/</li><li>格式化代码：Ctrl+Alt+L</li><li>向下复制行：Ctrl+Alt+Up</li><li>向上复制行：Ctrl+Alt+Down </li><li>删除行：Ctrl+Alt+Backspace</li><li>查找文本：Ctrl+F</li><li>代码全部折叠：Ctrl Alt -</li><li>代码全部展开：Ctrl Alt +</li><li>代码右移：Tab键（快捷生成代码）</li><li>代码左移：Shift+TAB键</li><li>代码上移：Alt+方向键上</li><li>代码下移：Alt+方向键下</li><li>长按Alt+鼠标点击不同处再放掉Alt，可以同时编辑多处</li><li>快速切换 Alt+left</li><li>终端清除 Ctrl k （设置 when 表达式：terminalFocus）</li></ol><hr><h2 id="2-终端"><a href="#2-终端" class="headerlink" title="2.终端"></a><strong>2.终端</strong></h2><p><strong>终端默认选择cmd而不是powershell</strong></p><p><img src="https://pic.imgdb.cn/item/62a083dd094754312946cd98.png"></p><hr><h2 id="3-代码片段"><a href="#3-代码片段" class="headerlink" title="3.代码片段"></a><strong>3.代码片段</strong></h2><blockquote><p><a href="https://snippet-generator.app/">https://snippet-generator.app/</a></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 多行注释</span></span><br><span class="line">    <span class="attr">&quot;Print to console&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;///&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;/** $1&quot;</span><span class="punctuation">,</span></span><br><span class="line">             <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">             <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">             <span class="string">&quot;*/&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 函数注释</span></span><br><span class="line">    <span class="attr">&quot;Print to console&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;///f&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;* 函数名称&#123;$1&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;* 函数简介&#123;$2&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;* @param    参数&#123;$3&#125;    数据类型&#123;$&#123;4|Boolean,Number,String,Object,Array,*|&#125;&#125;    是否必传&#123;$&#123;5|是,否|&#125;&#125;    参数描述&#123;$6&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;* @param    ...&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;* @returns  返回值&#123;$&#123;7|Boolean,Number,String,Object,Array,*|&#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;*/&quot;</span>             </span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// Vue模板</span></span><br><span class="line">    <span class="attr">&quot;Print to console&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;&lt;template&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;  &lt;div class=\&quot;$TM_FILENAME_BASE\&quot;&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;    $1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;  &lt;/div&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&lt;/template&gt;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&lt;script&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;export default &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot; name: &#x27;$TM_FILENAME_BASE&#x27;,&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;  data() &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;    return &#123;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;    &#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;  &#125;,&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;  components: &#123;&#125;,&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;  watch: &#123;&#125;,&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;  mounted() &#123;&#125;,&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;  methods: &#123;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&lt;/script&gt;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&lt;style scoped lang=\&quot;scss\&quot;&gt;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&lt;/style&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;$0&quot;</span></span><br><span class="line">          <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vue3 模板</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Print to console&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;&lt;template&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;  &lt;div&gt;&lt;/div&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&lt;/template&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&lt;script setup&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;import &#123; ref, reactive, toRefs, onMounted, onBeforeMount, watch, watchEffect, computed, getCurrentInstance &#125; from &#x27;vue&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;import &#123; useRoute, useRouter &#125; from &#x27;vue-router&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;const props = defineProps(&#123;&#125;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;const emit = defineEmits([&#x27;x&#x27;, &#x27;xx&#x27;])&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;const data = reactive(&#123;&#125;);&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;onBeforeMount(() =&gt; &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&#125;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;onMounted(() =&gt; &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&#125;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&lt;/script&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&lt;style lang=&#x27;scss&#x27; scoped&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&lt;/style&gt;&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">console.log</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Print to console&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;javascript,typescript&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;clog&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;console.log($1)&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Log output to console&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-彩虹括号"><a href="#4-彩虹括号" class="headerlink" title="4.彩虹括号"></a><strong>4.彩虹括号</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// settings.json文件</span></span><br><span class="line"><span class="string">&quot;editor.bracketPairColorization.enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;editor.guides.bracketPairs&quot;</span>: <span class="string">&quot;active&quot;</span>,</span><br></pre></td></tr></table></figure><hr><h2 id="5-跳转"><a href="#5-跳转" class="headerlink" title="5.@跳转"></a><strong>5.@跳转</strong></h2><p>解决：安装别名跳转插件</p><hr><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a><strong>补充</strong></h1><p><strong>1.prettier - Code formatter –代码格式化</strong></p><p>设置搜素format后：Editor:Default Formatter为Pretter为默认、Editor:Format On Save勾选。</p><p><strong>2.JavaScript (ES6) code snippets 插件的安装</strong></p><p>可以快速插入es6的代码</p><p><strong>3.Better Comments插件</strong></p><p>​    注释高亮颜色并且支持TODO</p><p><strong>4.eslint配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;editor.codeActionsOnSave&quot;: &#123;</span><br><span class="line">    &quot;source.fixAll.eslint&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.开启eslint配置后prettier配置</strong></p><p>​    新建.prettierrc文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;useTabs&quot;: false,</span><br><span class="line">  &quot;tabWidth&quot;: 2,</span><br><span class="line">  &quot;printWidth&quot;: 120,</span><br><span class="line">  &quot;singleQuote&quot;: true,</span><br><span class="line">  &quot;trailingComma&quot;: &quot;none&quot;,</span><br><span class="line">  &quot;bracketSpacing&quot;: true,</span><br><span class="line">  &quot;semi&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：直接在setting.json中配置无效，可能是和vetur冲突（但是官网配置还是无效）</p><p>  优先级：</p><p>​    1、项目目录的.prettierrc文件，支持json和分号格式（其实还有很多种）</p><p>​    2、项目目录的.editorconfig文件（默认配置)</p><p>​    3、vscode的配置文件（也有好几个地方配置，包括vetur节点下面）</p><p><strong>6.TabNine插件安装</strong></p><p> 智能代码片段提示</p><p><strong>7.安装Vue Language Features (Volar)</strong></p><p>（使用时候需要关闭 vetur–不能同时使用）</p><p><strong>8.安装 Error Lens</strong></p><p>加强版的错误提示，直接显示在代码后面</p><p><strong>9.安装Image preview图片预览功能</strong></p><p><strong>10.安装    TpyeScript Vue Plugin (Volar)</strong></p><p>为 vscode 提供vue的TS代码提示等</p><p><strong>11.安装 GitLens — Git supercharged</strong></p><p>实时查看 git 提交记录（增强vscode 的 git 功能）</p><p><strong>12.安装 vue-helper</strong></p><p>vue代码函数可以跳转</p><p><strong>13.安装 Stylelint</strong></p><p>（fantastic-admin 开源项目样式规范）</p><p><strong>14.安装</strong> <strong>Markdown All in One</strong></p><p>(vscode Markdown 增强插件)</p><p><strong>15.安装</strong> <strong>px to rem &amp; rpx &amp; vw (cssrem)</strong></p><p>（px 转 rem、vw ）</p><p><strong>16 安装 ChatGPT GPT-4</strong></p><p><strong>17 安装 Photonica 主题</strong></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML5补充</title>
      <link href="/2022/06/07/HTML5%E8%A1%A5%E5%85%85/"/>
      <url>/2022/06/07/HTML5%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>HTML（Hyper Text Markup Language）超文本标记语言，是用来描述网页的一种语言。</p><blockquote><p>参考：<a href="https://xiaohuochai.site/">小火柴的前端小册子</a></p></blockquote><hr><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a><strong>标签</strong></h1><p>标签有单标签和双标签</p><p>注意：HTML标签对大小写不敏感，但要全小写。</p><hr><h1 id="实体"><a href="#实体" class="headerlink" title="实体"></a><strong>实体</strong></h1><p>HTML中某些字符是预留的，需要被替换为字符实体（如：<code>&amp;nbsp;</code> ）</p><hr><h1 id="全局属性（一共16个）"><a href="#全局属性（一共16个）" class="headerlink" title="全局属性（一共16个）"></a><strong>全局属性（一共16个）</strong></h1><table><thead><tr><th><strong>属性名</strong></th><th><strong>值</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>contenteditable</td><td>true/false</td><td>指定是否可以在浏览器里编辑内容</td></tr><tr><td>data-*</td><td></td><td>用于存储页面或应用程序的私有定制数据</td></tr><tr><td>draggable</td><td>true/false/auto</td><td>用户是否可以拖动元素注意：链接和图像默认是可拖动的</td></tr><tr><td>spellcheck</td><td>true/false</td><td>规定是否对元素进行拼写和语法检查，对拼写错误的单词会在其下方出现红线</td></tr></tbody></table><hr><h1 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a><strong>语法规范</strong></h1><ul><li>文件应以 <code>&lt;!DOCTYPE ......&gt;</code> 首行顶格开始，推荐 <code>&lt;!DOCTYPE html&gt;</code></li><li>声明文档编码charset，必须是 head第一个子元素<code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></li><li>根据页面内容和需求适当填写keywords和description<code>&lt;meta name=&quot;keywords&quot; content=&quot;&quot;&gt;</code></li><li>引入CSS时必须指明rel=”stylesheet”，保证favicon可访问</li></ul><hr><h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a><strong>结构</strong></h1><h2 id="1-文档声明"><a href="#1-文档声明" class="headerlink" title="1.文档声明"></a><strong>1.文档声明</strong></h2><h2 id="2-文档头部"><a href="#2-文档头部" class="headerlink" title="2.文档头部"></a><strong>2.文档头部</strong></h2><p><code>&lt;head&gt;其中的标签有&lt;meta&gt;、&lt;title&gt;、&lt;base&gt;、&lt;link&gt;、&lt;style&gt;和&lt;script&gt;这六个元素</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1.meta标签的四个属性</span><br><span class="line">如果设置了charset，即将对网页使用的字符集作出声明HTML5</span><br><span class="line">如果设置了name，它是一个文档级的元数据，将附着在整个页面上</span><br><span class="line">如果设置了http-equiv，它是一个编译指令，即由服务器提供的来指示页面应如何加载</span><br><span class="line">如果设置了itemprop，将定义一个用户自定义的元数据(未实现)</span><br><span class="line"></span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;/&gt;  描述</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0,</span><br><span class="line">maximum-scale=1.0, minimum-scale=1.0, user-scalable=no&quot; /&gt;  视口(移动端使用)</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;  IE浏览器渲染</span><br><span class="line"></span><br><span class="line">2.base用于指定文档里所有相对链接规定默认URL或默认目标</span><br><span class="line">&lt;base href=&quot;http://cnblogs.com&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line"></span><br><span class="line">3.link标签指定了外部资源与当前文档的关系，具有属性href、rel、media、hreflang、type和sizes。</span><br><span class="line">href和rel是常用的</span><br><span class="line">&lt;link rel=&quot;icon&quot; href=&quot;ico.ico&quot;/&gt;</span><br><span class="line"></span><br><span class="line">4.script可以通过添加async或者defer属性来让脚本不必同步执行</span><br><span class="line">&lt;script async src=&quot;myAsyncScript.js&quot; onload=&quot;myInit()&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script defer src=&quot;myDeferScript.js&quot; onload=&quot;myInit()&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-骨架结构"><a href="#3-骨架结构" class="headerlink" title="3.骨架结构"></a><strong>3.骨架结构</strong></h2><p>3个部分：文档声明、文档头部和文档主体</p><h2 id="4-块级元素"><a href="#4-块级元素" class="headerlink" title="4.块级元素"></a><strong>4.块级元素</strong></h2><p> <code>&lt;pre&gt;</code>元素表示预定义格式文本。空格和换行符都会显示出来,表示已排版的内容。</p><h2 id="5-内联元素"><a href="#5-内联元素" class="headerlink" title="5.内联元素"></a>5.内联元素</h2><p>em和strong分别表示强调和重要，i和b标签是斜体与加粗（em和strong也有效果）</p><p>s不精确文字常用于表示价格变动等</p><p>其他标签：小号<code>&lt;small&gt;</code>、上下标等<code> &lt;sup&gt;  &lt;sub&gt;</code></p><h2 id="6-结构元素"><a href="#6-结构元素" class="headerlink" title="6.结构元素"></a>6.结构元素</h2><p><code> 语义化&lt;article&gt;、&lt;aside&gt;、&lt;nav&gt;、&lt;section&gt;、&lt;header&gt;、&lt;footer&gt;、&lt;main&gt;</code></p><h2 id="7-交互元素"><a href="#7-交互元素" class="headerlink" title="7.交互元素"></a><strong>7.交互元素</strong></h2><p>功能性元素details、summary、dialog</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;details&gt;主要用于描述文档或文档某个部分的细节，与&lt;summary&gt;配合使用可以为&lt;details&gt;定义标题。</span><br><span class="line">标题是可见的，用户点击标题时，显示出details。</span><br><span class="line">该标签仅有一个open属性，用来定义details是否可见(默认为不可见状态)</span><br><span class="line">[注意]这两个标签只有chrome和opera支持</span><br><span class="line"></span><br><span class="line">&lt;details&gt;</span><br><span class="line">    &lt;summary&gt;Copyright 2015.&lt;/summary&gt;</span><br><span class="line">    &lt;p&gt;小火柴的蓝色理想&lt;/p&gt;</span><br><span class="line">&lt;/details&gt;</span><br><span class="line"></span><br><span class="line">----------------------</span><br><span class="line">&lt;dialog&gt;</span><br><span class="line">该标签只有一个open属性，用来定义对话框是否可见(默认为不可见)</span><br><span class="line">[注意]只有chrome和opera支持</span><br></pre></td></tr></table></figure><h2 id="8-内容模型"><a href="#8-内容模型" class="headerlink" title="8.内容模型"></a><strong>8.内容模型</strong></h2><p>​        HTML标签在HTML5中内容模型拓展到了7类，包括元数据型、区块型、标题型、文档流型、语句型、内嵌型、交互型。但即使是这7个类别也没有完全覆盖所有元素的所有情况，元素可以不属于任何一个类别，被称为穿透的；很多元素可能属于不止一个类别，称为混合的。</p><h1 id="标签-1"><a href="#标签-1" class="headerlink" title="标签"></a><strong>标签</strong></h1><p><strong>a标签：</strong>是超文本锚点，可以链接到一个新文件、用id属性指向任何元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 属性href --&gt;</span><br><span class="line">&lt;!--1.链接地址--&gt;</span><br><span class="line">&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;</span><br><span class="line">&lt;!--2.下载地址：download指定下载的文件名--&gt;</span><br><span class="line">&lt;a href=&quot;./vue.js&quot; download=&quot;vue&quot;&gt;test&lt;/a&gt;</span><br><span class="line">&lt;!--3.锚点--&gt;</span><br><span class="line">&lt;a href=&quot;#test&quot;&gt;目录&lt;/a&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- target：target属性表示链接打开方式 --&gt;</span><br></pre></td></tr></table></figure><p><strong>img标签</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、src:地址</span><br><span class="line">2、alt:图像替代文本，供探索引擎抓取使用</span><br></pre></td></tr></table></figure><p><strong>列表</strong></p><p>定义列表：dl dt dd，dd描述列表dl元素，只能作为子元素出现，并且必须跟着一个dt元素</p><p><code> &lt;iframe&gt;</code></p><p>​    src 规定在内联框架中显示的文档的URL</p><p>　name 规定内联框架的名称，用于在javascript中引用元素或作为链接的目标</p><p>　height 规定iframe的高度</p><p>　width 规定iframe的宽度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id = &quot;frameID&quot; name=&quot;frameName&quot; src=&quot;top.html&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var frameID = document.getElementById(&#x27;frameID&#x27;);</span><br><span class="line">var frameWindow = frameID.contentWindow;</span><br><span class="line">var frameDocument = frameID.contentDocument;</span><br></pre></td></tr></table></figure><p><strong>表格</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;table自适应表格&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            filter: invert(1) hue-rotate(270deg);</span><br><span class="line">        &#125;</span><br><span class="line">        table &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            text-align: center;</span><br><span class="line">            border-spacing: 0;/**设置相邻单元格的边框间的距离**/</span><br><span class="line">            border-collapse: collapse;/**边框会合并为一个单一的边框**/</span><br><span class="line">            color:#5a5a5a;</span><br><span class="line">            table-layout: fixed;/**固定table表格**/</span><br><span class="line">        &#125;</span><br><span class="line">        table  thead &#123;</span><br><span class="line">            background-color: #d9edf7;</span><br><span class="line">        &#125;</span><br><span class="line">        table td,table th&#123;</span><br><span class="line">            border:1px solid #ccc;</span><br><span class="line">            overflow: hidden;/**溢出隐藏**/</span><br><span class="line">            white-space: nowrap;/**不换行**/</span><br><span class="line">            text-overflow: ellipsis;/**溢出不可见部分使用...代替**/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;caption&gt;我是表格标题&lt;/caption&gt;</span><br><span class="line">        &lt;!--表头--&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;性别&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;出生年月&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;!--表内容--&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;久伴&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;24&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;男&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;1996年8月22日&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><p><strong>多媒体</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 音频 --&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">autoplay         自动播放</span><br><span class="line">controls         显示控件</span><br><span class="line">loop             循环播放</span><br><span class="line">preload          音频在页面加载时进行加载，并预备播放(若使用autoplay,则忽略该属性)</span><br><span class="line">src              要播放的音频的URL</span><br><span class="line">--&gt;</span><br><span class="line">&lt;audio controls autoplay loop muted src=&quot;song.mp3&quot;&gt; </span><br><span class="line">  &lt;source src=&quot;song.mp3&quot; type=&quot;audio/mp3&quot; /&gt;</span><br><span class="line">&lt;/audio&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 视频 --&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">autoplay            自动播放</span><br><span class="line">controls            显示控件</span><br><span class="line">height         　　　播放器高度</span><br><span class="line">width         　　　 播放器宽度</span><br><span class="line">loop                循环播放</span><br><span class="line">preload             视频在页面加载时进行加载，并预备播放(若使用autoplay,则忽略该属性)</span><br><span class="line">preload=&quot;none&quot;     //当页面加载后不载入视频</span><br><span class="line">preload=&quot;auto&quot;     //当页面加载后载入整个视频</span><br><span class="line">preload=&quot;meta&quot;     //当页面加载后只载入元数据</span><br><span class="line">src                 要播放的视频的URL</span><br><span class="line">poster        　　　 规定视频下载时显示的图像，或者在用户点击播放按钮前显示的图像  </span><br><span class="line">--&gt;</span><br><span class="line">&lt;video width=&quot;320&quot; height=&quot;240&quot; controls=&quot;controls&quot;&gt;</span><br><span class="line">  &lt;source src=&quot;movie.mp4&quot; type=&quot;video/mp4&quot; /&gt;</span><br><span class="line">&lt;/video&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&lt;source&gt;：为&lt;video&gt;和&lt;audio&gt;提供媒介资源</span><br><span class="line">media     规定媒体资源的类型(没有浏览器支持)</span><br><span class="line">src     　规定媒体文件的URL</span><br><span class="line">type      规定媒体资源的MIME类型</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p><strong>多媒体api</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">canPlayType()</span><br><span class="line">/*</span><br><span class="line">检测浏览器是否能播放指定的音频或视频类型，返回值为下列之一：</span><br><span class="line">&#x27;probable&#x27;:浏览器最可能支持该类型</span><br><span class="line">&#x27;maybe&#x27;:浏览器也许支持该类型</span><br><span class="line">&#x27;&#x27;:浏览器不支持该类型</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">load()</span><br><span class="line">/*</span><br><span class="line">重新加载音频或视频元素，用于在更改src来源或其他设置后对音频或视频元素进行更新</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">play()</span><br><span class="line">/*</span><br><span class="line">开始播放音频或视频</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">/*</span><br><span class="line">暂停当前播放的音频或视频</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git补充</title>
      <link href="/2022/05/28/Git%E8%A1%A5%E5%85%85/"/>
      <url>/2022/05/28/Git%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Git知识的补充</p><blockquote><p><strong>参考：</strong><a href="https://www.bookstack.cn/read/git-tutorial/docs-basic.md">阮一峰 Git 教程</a></p></blockquote><hr><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a><strong>命令</strong></h1><h2 id="stash暂存"><a href="#stash暂存" class="headerlink" title="stash暂存"></a><strong>stash暂存</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 保存当前未commit的代码</span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"># 保存当前未commit的代码并添加备注</span><br><span class="line">git stash save &quot;备注的内容&quot;</span><br><span class="line"></span><br><span class="line"># 列出stash的所有记录</span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"># 删除stash的所有记录</span><br><span class="line">git stash clear</span><br><span class="line"></span><br><span class="line"># 应用最近一次的stash</span><br><span class="line">git stash apply</span><br><span class="line"></span><br><span class="line"># 应用最近一次的stash，随后删除该记录</span><br><span class="line">git stash pop</span><br><span class="line"></span><br><span class="line"># 删除最近的一次stash</span><br><span class="line">git stash drop</span><br></pre></td></tr></table></figure><hr><h2 id="reset-重置"><a href="#reset-重置" class="headerlink" title="reset****重置"></a><strong>reset****重置</strong></h2><p>重置后需要<code>git push -f</code>强制推送</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 并且会改变暂存区</span><br><span class="line">git reset HEAD^</span><br><span class="line"># 倒退指针的同时，不改变暂存区</span><br><span class="line">git reset --soft HEAD^</span><br><span class="line"># 倒退指针的同时，改变工作区</span><br><span class="line">git reset --hard HEAD^</span><br><span class="line"></span><br><span class="line"># 如果不指定回滚的位置，那么等同于撤销修改。</span><br><span class="line"># 撤销上一次向暂存区添加的所有文件</span><br><span class="line">$ git reset</span><br><span class="line"># 无任何效果</span><br><span class="line">$ git reset --soft</span><br><span class="line"># 同时撤销暂存区和工作区的修改，</span><br><span class="line"># 回复到上一次提交的状态</span><br><span class="line">$ git reset --hard</span><br></pre></td></tr></table></figure><hr><h2 id="revert回滚"><a href="#revert回滚" class="headerlink" title="revert回滚"></a><strong>revert回滚</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看日志（对应的commitID）</span><br><span class="line">git log</span><br><span class="line"># 将现有的提交还原，恢复提交的内容，并生成一条还原记录</span><br><span class="line">git revert &lt;commitID&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="Sourcetree对应的操作"><a href="#Sourcetree对应的操作" class="headerlink" title="Sourcetree对应的操作"></a><strong>Sourcetree对应的操作</strong></h1><h2 id="操作reset重置"><a href="#操作reset重置" class="headerlink" title="操作reset重置"></a><strong>操作reset</strong>重置</h2><p><img src="https://pic.imgdb.cn/item/6291e90d09475431298b79a0.png"></p><p><img src="https://pic.imgdb.cn/item/6291e90d09475431298b798a.png"></p><hr><h1 id="Git项目更换地址"><a href="#Git项目更换地址" class="headerlink" title="Git项目更换地址"></a><strong>Git项目更换地址</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 先删除Git url 地址</span></span><br><span class="line">git remote rm origin</span><br><span class="line"><span class="comment">// 再添加远程 Git 仓库</span></span><br><span class="line">git remote add origin <span class="variable constant_">XXX</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注意：如果 git remote rm origin 报错，可以在.git文件中config修改</span></span><br><span class="line"><span class="comment">可以查找自己的报错原因 */</span></span><br></pre></td></tr></table></figure><hr><h1 id="git-学习补充"><a href="#git-学习补充" class="headerlink" title="git 学习补充"></a><strong>git 学习补充</strong></h1><p>参考：<a href="https://blog.csdn.net/a18307096730/article/details/124586216?spm=1001.2014.3001.5502">参考笔记</a>    <a href="https://gitee.com/hongjilin/hongs-study-notes/tree/master/%E7%BC%96%E7%A8%8B_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">参考笔记</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"># 1. git 查看配置信息</span><br><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br><span class="line">git config --list</span><br><span class="line">git status # 查看状态</span><br><span class="line">git diff # 当前做的那些更新没有暂存?</span><br><span class="line">git diff --cached 或者git diff --staged (1.6.1以上版本) # 有哪些更新已经暂存起来准备好了下次提交</span><br><span class="line">git log --oneline # 查看当前分支地目录，其他分支看不到</span><br><span class="line"></span><br><span class="line"># 2. 为常用指令配置别名，在用户目录，创建 .bashrc 文件</span><br><span class="line">touch ~/.bashrc</span><br><span class="line"># .bashrc 文件中可选择如下配置</span><br><span class="line"># 用于输出git提交日志 </span><br><span class="line">alias git-log=&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27; </span><br><span class="line"># 用于输出当前目录所有文件及基本信息 </span><br><span class="line">alias ll=&#x27;ls -al&#x27;</span><br><span class="line"></span><br><span class="line"># 3. 使用 git reset 后，如果想要恢复之前的代码</span><br><span class="line"># 查看所有的 git 已经删除的提交记录，再恢复即可</span><br><span class="line">git reflog</span><br><span class="line"></span><br><span class="line"># 4. git 分支处理</span><br><span class="line"># 创建分支</span><br><span class="line">git branch dev</span><br><span class="line"># 创建并切换到该分支</span><br><span class="line">git checkout -b dev</span><br><span class="line"># 删除分支</span><br><span class="line">git branch -d b1 # 删除分支时，需要做各种检查，如果有没有合并的到主分支的代码就会提示</span><br><span class="line">git branch -D b1 # 不做任何检查，强制删除</span><br><span class="line"># 合并分支</span><br><span class="line">git merge 分支名称</span><br><span class="line"># 当前分支地最后一次提交</span><br><span class="line">git branch -v</span><br><span class="line"># 新建一个分支并指定其提交对象（也就是哪个commit）</span><br><span class="line">git branch dev hash值</span><br><span class="line"></span><br><span class="line"># 5. 连接远程仓库</span><br><span class="line">git remote add &lt;远端名称&gt; &lt;仓库路径SSH&gt; # 远端名称默认都为 origin</span><br><span class="line">git push -u 是 git push--set-upstream 的缩写</span><br><span class="line">git remote # 查看远程仓库</span><br><span class="line">git branch -vv # 查看仓库与远程的连接情况</span><br><span class="line">git clone 地址 文件夹名称 # git clone 可以在后面指定文件夹名称</span><br><span class="line"></span><br><span class="line"># 6. git fetch 与 git pull</span><br><span class="line"># git fetch 抓取，就是相当于把线上的记录在log里卖可以看到 origin/master 最新的</span><br><span class="line"># 但是没有和本地的 master 合并</span><br><span class="line">git pull 拉取相当于 git fetch 、git merge origin/master</span><br><span class="line"></span><br><span class="line"># 7. git add 与 git commit 合并写法</span><br><span class="line">git commit -a -m &quot;xxx&quot;</span><br><span class="line">git commit # 注释比较多的时候可以使用</span><br><span class="line"></span><br><span class="line"># 6. git rm # 相当于 删除文件后执行了 git add 添加到暂存里了</span><br><span class="line">git mv # 同理是修改文件名</span><br><span class="line"></span><br><span class="line"># 7. git 撤销暂存提交</span><br><span class="line">git reset HEAD 名称</span><br><span class="line"></span><br><span class="line"># 8. git 撤销 commit 另外方式，只能最新的注释写错</span><br><span class="line">git commit --amend</span><br><span class="line"></span><br><span class="line"># 9. git tag # 给某一次提交打上标签</span><br><span class="line">git tag -l &#x27;v1.*&#x27; # 列出以 v1.开头的所有</span><br><span class="line">9.1 轻量标签</span><br><span class="line">git tag v1.0</span><br><span class="line">git tag v1.0 提交对象哈希</span><br><span class="line">9.2 附注标签</span><br><span class="line">git tag -a v1.0</span><br><span class="line">git tag -a v1.0 提交对象哈希</span><br><span class="line">git tag -a v1.0 提交对象哈希 -m &quot;我的注释信息&quot;</span><br><span class="line">9.3 查看标签</span><br><span class="line">git show tagname</span><br><span class="line">9.4 删除标签</span><br><span class="line">git tag -d v1.0</span><br><span class="line">9.5 检出标签</span><br><span class="line">git checkout -b tagname</span><br><span class="line"></span><br><span class="line"># 10. 远程仓库</span><br><span class="line">gut remote -v # 显示远程仓库</span><br><span class="line">git branch -u origin/dev # 跟踪一个远程分支</span><br><span class="line">git branch -vv # 查看本地分支与线上分支对应关系</span><br><span class="line">git push origin --delete dev # 删除远程分支</span><br><span class="line"></span><br><span class="line"># 注意：git clone 时有其他分支，git branch 没有其他分支，只需要切换即可。</span><br><span class="line"></span><br><span class="line"># 11.  pull request</span><br><span class="line"># pr 之后仓库可以连接多个远程，然后拉取最新的代码</span><br><span class="line"># 如下：git remote add 新名词 地址</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端工程化</title>
      <link href="/2022/05/28/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
      <url>/2022/05/28/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文记录前端项目的工程配置等</p><hr><h1 id="vue的eslint"><a href="#vue的eslint" class="headerlink" title="vue的eslint"></a><strong>vue的eslint</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装依赖</span></span><br><span class="line">yarn add eslint eslint-plugin-vue babel-eslint @vue/cli-plugin-eslint -D</span><br><span class="line"><span class="comment">// 根目录新建 .eslintrc.js配置文件  .eslintignore忽略文件</span></span><br><span class="line"><span class="comment">// .eslintignore 配置</span></span><br><span class="line">  build<span class="comment">/*.js</span></span><br><span class="line"><span class="comment">  src/assets</span></span><br><span class="line"><span class="comment">  public</span></span><br><span class="line"><span class="comment">  dist</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">// .eslintrc.js 配置</span></span><br><span class="line"><span class="comment">/* 参考：https://eslint.bootcss.com/ */</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">/* 若目录中有多个.eslintrc，ESLint将自动在要检测它们，（父-&gt;根）</span></span><br><span class="line"><span class="comment">     直到找到root:true的eslintrc，它就会停止在父级目录中寻找，</span></span><br><span class="line"><span class="comment">     再将所有的.eslintrc合并（为当前项目约定一个规则） */</span></span><br><span class="line">  <span class="string">&quot;root&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 环境配置</span></span><br><span class="line">  <span class="string">&quot;env&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// 浏览器环境中的全局变量</span></span><br><span class="line">    <span class="string">&quot;browser&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// Node.js 全局变量和 Node.js 作用域</span></span><br><span class="line">    <span class="string">&quot;node&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// CommonJS全局变量和CommonJS作用域</span></span><br><span class="line">    <span class="string">&quot;commonjs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 启用除模块之外的所有ECMAScript 6功能</span></span><br><span class="line">    <span class="string">&quot;es6&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 继承另一个配置文件的所有特性</span></span><br><span class="line">  <span class="string">&quot;extends&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;plugin:vue/essential&quot;</span>, <span class="comment">// 扩展（vue官方eslint配置插件 必不可少的）</span></span><br><span class="line">    <span class="string">&quot;eslint:recommended&quot;</span> <span class="comment">// 启用一系列核心规则，这些规则报告一些常见问题</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 解释器的配置</span></span><br><span class="line">  <span class="string">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;parser&quot;</span>: <span class="string">&quot;babel-eslint&quot;</span> <span class="comment">// 解释器</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 配置规则</span></span><br><span class="line">  <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="eslint的rules配置"><a href="#eslint的rules配置" class="headerlink" title="eslint的rules配置"></a><strong>eslint的rules配置</strong></h1><ul><li>基础配置规则注意事项</li><li>“off” 或 0 - 关闭规则</li><li>“warn” 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)</li><li>“error” 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure><hr><h1 id="编辑器editorconfig"><a href="#编辑器editorconfig" class="headerlink" title="编辑器editorconfig"></a><strong>编辑器editorconfig</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 编辑器配置文件 参考 http://editorconfig.org</span><br><span class="line"></span><br><span class="line">root = true # 表⽰是最顶层的配置⽂件，发现设为true时，才会停⽌查找.editorconfig⽂件</span><br><span class="line"></span><br><span class="line">[*] # 表示所有文件适用</span><br><span class="line">charset = utf-8 # 设置文件字符集为 utf-8</span><br><span class="line">indent_style = space # 缩进风格（tab | space）</span><br><span class="line">indent_size = 2 # 缩进大小</span><br><span class="line">end_of_line = lf # 控制换行类型(lf | cr | crlf)</span><br><span class="line">trim_trailing_whitespace = true # 去除行尾的任意空白字符</span><br><span class="line">insert_final_newline = true # 始终在文件末尾插入一个新行</span><br><span class="line"></span><br><span class="line">[*.md] # 表示仅 md 文件适用以下规则</span><br><span class="line">max_line_length = off # 最大行宽 填写number数值</span><br><span class="line">trim_trailing_whitespace = false</span><br></pre></td></tr></table></figure><hr><h1 id="vue的browserslist"><a href="#vue的browserslist" class="headerlink" title="vue的browserslist"></a><strong>vue的browserslist</strong></h1><p>掘金：<a href="https://juejin.cn/post/6999073565072949261">browserslist介绍</a>    浏览器的市场占有率：<a href="https://link.juejin.cn/?target=https://caniuse.com/">caniuse</a></p><p>browserslist 工具负责帮助我们查询当前条件匹配到的浏览器的信息，并把查询到的结果共享给所有的工具。</p><p>很多工具都需要占有率等浏览器信息（比如 <code>autoprefixer</code>、<code>babel</code>、<code>postcss-preset-env</code> 等等）进行使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 根目录新建.browserslistrc </span><br><span class="line">// 其中rc指的是runtime compiler 表示其它工具在运行时编译的时候，会读取这个文件。</span><br><span class="line">&gt; 1%</span><br><span class="line">last 2 versions</span><br><span class="line">not dead</span><br></pre></td></tr></table></figure><hr><h1 id="vue的babel"><a href="#vue的babel" class="headerlink" title="vue的babel"></a><strong>vue的babel</strong></h1><hr><h1 id="vue的postcss与autoprefixer"><a href="#vue的postcss与autoprefixer" class="headerlink" title="vue的postcss与autoprefixer"></a><strong>vue的postcss与autoprefixer</strong></h1><p>PostCSS是一个通过JavaScript来转换样式的工具（通过js代码来对样式做一些转换）</p><p>比如：自动添加浏览器前缀、css样式的重置</p><p>PostCSS 本身能做的事情非常少，要想实现某个功能，必须依赖为这个功能编写的对应的 PostCSS 插件</p><p>给样式添加前缀的插件——autoprefixer，Vue cli 默认开启了开启了autoprefixer</p><blockquote><p>参考：<a href="https://www.postcss.com.cn/">postcss官网</a>   <a href="https://cli.vuejs.org/zh/guide/css.html#postcss">VueCli-postcss</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根目录新建.postcssrc.js</span></span><br><span class="line">mudule.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="string">&#x27;plugins&#x27;</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;autoprefixer&#x27;</span>: &#123;&#125; <span class="comment">// VueCli 默认开启了autoprefixer</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="代码格式化prettier"><a href="#代码格式化prettier" class="headerlink" title="代码格式化prettier"></a><strong>代码格式化prettier</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装 </span></span><br><span class="line">yarn add prettier@<span class="number">2.2</span><span class="number">.1</span> eslint-plugin-prettier@<span class="number">3.3</span><span class="number">.1</span> @vue/eslint-config-prettier@<span class="number">6.0</span><span class="number">.0</span> --dev</span><br><span class="line"></span><br><span class="line"><span class="comment">// eslintrc.js的extends添加</span></span><br><span class="line"><span class="attr">extends</span>: [<span class="string">&quot;@vue/prettier&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意prettier安装会有版本之间的冲突</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根目录新建.prettierrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;semi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;bracketSpacing&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;arrowParens&quot;</span>: <span class="string">&quot;avoid&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>prettier配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// prettier的配置</span></span><br><span class="line"> <span class="string">&quot;printWidth&quot;</span>: <span class="number">120</span>, <span class="comment">// 超过最大值换行</span></span><br><span class="line"> <span class="string">&quot;tabWidth&quot;</span>: <span class="number">4</span>, <span class="comment">// 缩进字节数</span></span><br><span class="line"> <span class="string">&quot;useTabs&quot;</span>: <span class="literal">false</span>, <span class="comment">// 缩进不使用tab，使用空格</span></span><br><span class="line"> <span class="string">&quot;semi&quot;</span>: <span class="literal">true</span>, <span class="comment">// 句尾添加分号</span></span><br><span class="line"> <span class="string">&quot;singleQuote&quot;</span>: <span class="literal">true</span>, <span class="comment">// 使用单引号代替双引号</span></span><br><span class="line"> <span class="string">&quot;proseWrap&quot;</span>: <span class="string">&quot;preserve&quot;</span>, <span class="comment">// 默认值。因为使用了一些折行敏感型的渲染器（如GitHub comment）而按照markdown文本样式进行折行</span></span><br><span class="line"> <span class="string">&quot;arrowParens&quot;</span>: <span class="string">&quot;avoid&quot;</span>, <span class="comment">//  (x) =&gt; &#123;&#125; 箭头函数参数只有一个时是否要有小括号。avoid：省略括号</span></span><br><span class="line"> <span class="string">&quot;bracketSpacing&quot;</span>: <span class="literal">true</span>, <span class="comment">// 在对象，数组括号与文字之间加空格 &quot;&#123; foo: bar &#125;&quot;</span></span><br><span class="line"> <span class="string">&quot;disableLanguages&quot;</span>: [<span class="string">&quot;vue&quot;</span>], <span class="comment">// 不格式化vue文件，vue文件的格式化单独设置</span></span><br><span class="line"> <span class="string">&quot;endOfLine&quot;</span>: <span class="string">&quot;auto&quot;</span>, <span class="comment">// 结尾是 \n \r \n\r auto</span></span><br><span class="line"> <span class="string">&quot;eslintIntegration&quot;</span>: <span class="literal">false</span>, <span class="comment">//不让prettier使用eslint的代码格式进行校验</span></span><br><span class="line"> <span class="string">&quot;htmlWhitespaceSensitivity&quot;</span>: <span class="string">&quot;ignore&quot;</span>,</span><br><span class="line"> <span class="string">&quot;ignorePath&quot;</span>: <span class="string">&quot;.prettierignore&quot;</span>, <span class="comment">// 不使用prettier格式化的文件填写在项目的.prettierignore文件中</span></span><br><span class="line"> <span class="string">&quot;jsxBracketSameLine&quot;</span>: <span class="literal">false</span>, <span class="comment">// 在jsx中把&#x27;&gt;&#x27; 是否单独放一行</span></span><br><span class="line"> <span class="string">&quot;jsxSingleQuote&quot;</span>: <span class="literal">false</span>, <span class="comment">// 在jsx中使用单引号代替双引号</span></span><br><span class="line"> <span class="string">&quot;parser&quot;</span>: <span class="string">&quot;babylon&quot;</span>, <span class="comment">// 格式化的解析器，默认是babylon</span></span><br><span class="line"> <span class="string">&quot;requireConfig&quot;</span>: <span class="literal">false</span>, <span class="comment">// Require a &#x27;prettierconfig&#x27; to format prettier</span></span><br><span class="line"> <span class="string">&quot;stylelintIntegration&quot;</span>: <span class="literal">false</span>, <span class="comment">//不让prettier使用stylelint的代码格式进行校验</span></span><br><span class="line"> <span class="string">&quot;trailingComma&quot;</span>: <span class="string">&quot;es5&quot;</span>, <span class="comment">// 在对象或数组最后一个元素后面是否加逗号（在ES5中加尾逗号）</span></span><br><span class="line"> <span class="string">&quot;tslintIntegration&quot;</span>: <span class="literal">false</span> <span class="comment">// 不让prettier使用tslint的代码格式进行校验</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="默认的各个版本"><a href="#默认的各个版本" class="headerlink" title="默认的各个版本"></a><strong>默认的各个版本</strong></h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-test&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service serve&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service lint&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;core-js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.6.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.6.11&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue-router&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vuex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.4.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-babel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~4.5.15&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~4.5.15&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-router&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~4.5.15&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-vuex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~4.5.15&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-service&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~4.5.15&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vue/eslint-config-prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;babel-eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^10.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.7.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint-plugin-prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.3.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint-plugin-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.2.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.26.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sass-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue-template-compiler&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.6.11&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 前端知识记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.0补充</title>
      <link href="/2022/05/04/Vue2-0%E8%A1%A5%E5%85%85/"/>
      <url>/2022/05/04/Vue2-0%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文是对vue2.0的重新学习后的补充知识点</p><hr><h1 id="v-for使用js实现"><a href="#v-for使用js实现" class="headerlink" title="v-for使用js实现"></a><strong>v-for使用js实现</strong></h1><p>vue是声明式编码（声明就行），下方的为命令式编码（一步一步走缺一不可）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;&lt;/ul&gt;</span><br><span class="line"><span class="comment">// js部分</span></span><br><span class="line"><span class="keyword">var</span> list = [&#123;<span class="attr">str</span>: <span class="string">&#x27;第一个&#x27;</span>&#125;, &#123;<span class="attr">str</span>: <span class="string">&#x27;第二个&#x27;</span>&#125;]</span><br><span class="line"><span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> li = <span class="string">&#x27;&#x27;</span></span><br><span class="line">list.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    li += <span class="string">`&lt;li&gt;<span class="subst">$&#123;item.str&#125;</span>&lt;/li&gt;`</span> <span class="comment">// 这里使用 += 可以拼接作用</span></span><br><span class="line">&#125;)</span><br><span class="line">ul.<span class="property">innerHTML</span> = li</span><br></pre></td></tr></table></figure><hr><h1 id="vue初识"><a href="#vue初识" class="headerlink" title="vue初识"></a><strong>vue初识</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">初识<span class="title class_">Vue</span>：</span><br><span class="line"><span class="number">1.</span>想让<span class="title class_">Vue</span>工作，就必须创建一个<span class="title class_">Vue</span>实例，且要传入一个配置对象；</span><br><span class="line"><span class="number">2.</span><span class="title class_">Vue</span>实例和容器是一一对应的；<span class="comment">// 不能一个实例对应多个vue模板</span></span><br><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt; <span class="comment">// vue 模板</span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">// 阻止vue在启动时生成生产提示。生产中不需要提示警告等。</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">   <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>, <span class="comment">// 还可以写成document.querySelect(&#x27;#root&#x27;)</span></span><br><span class="line">   <span class="attr">data</span>:&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;moxie&#x27;</span>,</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>&#123;&#123; xxx &#125;&#125;&#123;&#123;<span class="number">1</span>+<span class="number">1</span>&#125;&#125;中要写js表达式，或者到data中的属性；当然只要是vm中的属性都可以写。</span><br><span class="line">注意区分：js表达式 和 js代码(语句)</span><br><span class="line">  <span class="number">1.</span>表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方：</span><br><span class="line">    (<span class="number">1</span>). <span class="title function_">a</span></span><br><span class="line">    (<span class="number">2</span>). a+<span class="title function_">b</span></span><br><span class="line">    (<span class="number">3</span>). <span class="title function_">demo</span>(<span class="number">1</span>)</span><br><span class="line">    (<span class="number">4</span>). x === y ? <span class="string">&#x27;a&#x27;</span> : <span class="string">&#x27;b&#x27;</span></span><br><span class="line">  <span class="number">2.</span>js代码(语句)</span><br><span class="line">    (<span class="number">1</span>). <span class="keyword">if</span>()&#123;&#125;</span><br><span class="line">    (<span class="number">2</span>). <span class="keyword">for</span>()&#123;&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="vue的基础补充"><a href="#vue的基础补充" class="headerlink" title="vue的基础补充"></a><strong>vue的基础补充</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单向绑定v-bind:x（简写:x），双向绑定v-module:value只能用于表单元素上（简写v-module）</span></span><br><span class="line"><span class="comment">// 如下代码是错误的，因为v-model只能应用在表单类元素（输入类元素）上</span></span><br><span class="line">&lt;h2 v-<span class="attr">model</span>:x=<span class="string">&quot;name&quot;</span>&gt;你好啊&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// el的第二种写法</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">   <span class="attr">data</span>:&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;默谐&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line">v.$mount(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line"><span class="comment">// 在实例化配置好Vue，再进行手动绑定DOM</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------</span></span><br><span class="line"><span class="comment">// data的函数式写法</span></span><br><span class="line"><span class="comment">// 由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了。</span></span><br><span class="line"><span class="comment">// ES6：对象里面的方法可以简写method()&#123;&#125;，不需要function</span></span><br></pre></td></tr></table></figure><hr><h1 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a><strong>MVVM模型</strong></h1><p><img src="https://pic.imgdb.cn/item/62727f150947543129a68960.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">MVVM</span>模型</span><br><span class="line">  <span class="number">1.</span> M：模型(<span class="title class_">Model</span>) ：data中的数据</span><br><span class="line">  <span class="number">2.</span> V：视图(<span class="title class_">View</span>) ：模板代码</span><br><span class="line">  <span class="number">3.</span> <span class="variable constant_">VM</span>：视图模型(<span class="title class_">ViewModel</span>)：<span class="title class_">Vue</span>实例</span><br><span class="line">观察发现：</span><br><span class="line">  <span class="number">1.</span>data中所有的属性，最后都出现在了vm身上。</span><br><span class="line">  <span class="number">2.</span>vm身上所有的属性 及 <span class="title class_">Vue</span>原型上所有属性，在<span class="title class_">Vue</span>模板中都可以直接使用。</span><br></pre></td></tr></table></figure><hr><h1 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a><strong>数据代理</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.defineProperty()方法</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">    <span class="comment">// value:18,</span></span><br><span class="line">    <span class="comment">// enumerable:true, // 控制属性是否可以枚举，默认值是false</span></span><br><span class="line">    <span class="comment">// writable:true, // 控制属性是否可以被修改，默认值是false</span></span><br><span class="line">    <span class="comment">// configurable:true // 控制属性是否可以被删除，默认值是false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高级用法get、set</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">   <span class="comment">//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span></span><br><span class="line">   <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人读取age属性了&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> number</span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值</span></span><br><span class="line">   <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人修改了age属性，且值是&#x27;</span>,value)</span><br><span class="line">      number = value <span class="comment">// 重新赋值number、进而影响value</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vue中的使用</span></span><br><span class="line"><span class="comment">// 数据代理：通过一个对象代理对另一个对象中属性的操作（读/写）</span></span><br><span class="line">          <span class="comment">//也就是一个对象的值与另外的值完全绑定在一起，值改变对象的值也会跟着改变</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>:<span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">y</span>:<span class="number">200</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj2,<span class="string">&#x27;x&#x27;</span>,&#123;</span><br><span class="line">   <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> obj.<span class="property">x</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">      obj.<span class="property">x</span> = value</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="number">1.</span><span class="title class_">Vue</span>中的数据代理：通过vm对象来代理data对象中属性的操作（读/写）</span><br><span class="line"><span class="number">2.</span><span class="title class_">Vue</span>中数据代理的好处：更加方便的操作data中的数据</span><br><span class="line"><span class="number">3.</span>基本原理：</span><br><span class="line">  通过<span class="title class_">Object</span>.<span class="title function_">defineProperty</span>()把data对象中所有属性添加到vm上。</span><br><span class="line">  为每一个添加到vm上的属性，都指定一个getter/setter。</span><br><span class="line">  在getter/setter内部去操作（读/写）data中对应的属性。</span><br><span class="line"><span class="comment">// data中的数据，vue处理后放在vm_data中，再进行数据代理到vm下的每个属性，模板中就可以直接使用</span></span><br></pre></td></tr></table></figure><hr><h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a><strong>事件处理</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件的基本使用</span></span><br><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo1&quot;</span>&gt;</span>点我提示信息1（不传参）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo2($event,&#x27;参数&#x27;)&quot;</span>&gt;</span>点我提示信息2（传参）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">   <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">   <span class="attr">data</span>:&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;moxie&#x27;</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">methods</span>:&#123;</span><br><span class="line">      <span class="title function_">showInfo1</span>(<span class="params">event</span>)&#123;</span><br><span class="line">         <span class="comment">// 上面的@click绑定事件不带()，其第一个参数就是事件对象</span></span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(event) <span class="comment">// 事件对象</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">showInfo2</span>(<span class="params">event,val</span>)&#123;</span><br><span class="line">         <span class="comment">// 带上()则需要手动带上$event参数（当然其绑定时候位置可以更换）</span></span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(event,val) <span class="comment">// 事件对象，&#x27;参数&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件修饰符</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Vue中的事件修饰符：</span></span><br><span class="line"><span class="comment">  1.prevent：阻止默认事件（常用）；</span></span><br><span class="line"><span class="comment">  2.stop：阻止事件冒泡（常用）；</span></span><br><span class="line"><span class="comment">  3.once：事件只触发一次（常用）；</span></span><br><span class="line"><span class="comment">  4.capture：使用事件的捕获模式；</span></span><br><span class="line"><span class="comment">  5.self：只有event.target是当前操作的元素时才触发事件；</span></span><br><span class="line"><span class="comment">  6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 键盘修饰符</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.Vue中常用的按键别名：</span></span><br><span class="line"><span class="comment">    回车 =&gt; enter</span></span><br><span class="line"><span class="comment">    删除 =&gt; delete (捕获“删除”和“退格”键)</span></span><br><span class="line"><span class="comment">    退出 =&gt; esc</span></span><br><span class="line"><span class="comment">    空格 =&gt; space</span></span><br><span class="line"><span class="comment">    换行 =&gt; tab (特殊，必须配合keydown去使用)</span></span><br><span class="line"><span class="comment">    上 =&gt; up</span></span><br><span class="line"><span class="comment">    下 =&gt; down</span></span><br><span class="line"><span class="comment">    左 =&gt; left</span></span><br><span class="line"><span class="comment">    右 =&gt; right</span></span><br><span class="line"><span class="comment">  2.Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）</span></span><br><span class="line"><span class="comment">  3.系统修饰键（用法特殊）：ctrl、alt、shift、meta</span></span><br><span class="line"><span class="comment">    (1).配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。</span></span><br><span class="line"><span class="comment">    (2).配合keydown使用：正常触发事件。</span></span><br><span class="line"><span class="comment">  4.也可以使用keyCode去指定具体的按键（不推荐）</span></span><br><span class="line"><span class="comment">  5.Vue.config.keyCodes.自定义键名 = 键码，可以去定制按键别名</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a><strong>计算属性</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 计算属性：</span></span><br><span class="line"><span class="comment">  1.定义：要用的属性不存在，要通过已有属性计算得来。</span></span><br><span class="line"><span class="comment">  2.原理：底层借助了Objcet.defineproperty方法提供的getter和setter。</span></span><br><span class="line"><span class="comment">  3.get函数什么时候执行？</span></span><br><span class="line"><span class="comment">    (1).初次读取时会执行一次。</span></span><br><span class="line"><span class="comment">    (2).当依赖的数据发生改变时会被再次调用。</span></span><br><span class="line"><span class="comment">  4.优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便。</span></span><br><span class="line"><span class="comment">  5.备注：</span></span><br><span class="line"><span class="comment">    1.计算属性最终会出现在vm上，直接读取使用即可。</span></span><br><span class="line"><span class="comment">    2.如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">   姓：&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;firstName&quot;</span>&gt;</span><br><span class="line">   名：&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;lastName&quot;</span>&gt;</span><br><span class="line">   全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">   <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">   <span class="attr">data</span>:&#123;</span><br><span class="line">      <span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span><br><span class="line">      <span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">computed</span>:&#123;</span><br><span class="line">      <span class="attr">fullName</span>:&#123;</span><br><span class="line">         <span class="comment">// get有什么作用？当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</span></span><br><span class="line">         <span class="comment">// get什么时候调用？1.初次读取fullName时。2.所依赖的数据发生变化时。</span></span><br><span class="line">         <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="comment">// set什么时候调用? 当fullName被修改时。</span></span><br><span class="line">         <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="comment">// 加入修改fullName = &#x27;李-四&#x27;</span></span><br><span class="line">            <span class="keyword">const</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">firstName</span> = arr[<span class="number">0</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">lastName</span> = arr[<span class="number">1</span>]</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算属性的简写方式</span></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;&#123;&#123;<span class="title function_">show</span>(message)&#125;&#125;&lt;/div&gt;</span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算属性的接收参数（与filters的作用一致）</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;消息&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 返回一个函数来接收参数</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;处理后的&#x27;</span> + value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不简写的方式</span></span><br><span class="line">        <span class="comment">/*show: &#123;</span></span><br><span class="line"><span class="comment">            // 返回一个函数来接收参数</span></span><br><span class="line"><span class="comment">            get() &#123;</span></span><br><span class="line"><span class="comment">                return (value) =&gt; &#123;</span></span><br><span class="line"><span class="comment">                    return &#x27;处理后的&#x27; + value</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意computed写上异步操作的如setTimeOut(function()&#123;&#125;)时候，computed没有返回值，</span></span><br><span class="line"><span class="comment">// 而是setTimeOut里面的函数返回，而这个函数不归vue管理，而是浏览器js调用</span></span><br></pre></td></tr></table></figure><hr><h1 id="侦听属性"><a href="#侦听属性" class="headerlink" title="侦听属性"></a><strong>侦听属性</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// watch侦听的写法</span></span><br><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">   <span class="attr">isHot</span>:&#123;</span><br><span class="line">      <span class="comment">// 初始化时让handler调用一下</span></span><br><span class="line">      <span class="attr">immediate</span>:<span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 开启深度侦听，watch默认不监测对象内部值的改变，配置deep:true可以</span></span><br><span class="line">      <span class="comment">// Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以</span></span><br><span class="line">      <span class="attr">deep</span>:<span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// handler什么时候调用？当isHot发生改变时。</span></span><br><span class="line">      <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//简写</span></span><br><span class="line">   <span class="comment">/* isHot(newValue,oldValue)&#123;</span></span><br><span class="line"><span class="comment">        console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)</span></span><br><span class="line"><span class="comment">      &#125; */</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// watch的另外的写法</span></span><br><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,&#123;&#125;) <span class="comment">// 不是在实例创建时候就侦听，手动侦听</span></span><br><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,<span class="function">()=&gt;</span>&#123;&#125;) <span class="comment">// 简写</span></span><br></pre></td></tr></table></figure><p><strong>computed和watch之间的区别：</strong></p><ol><li><p>computed能完成的功能，watch都可以完成。</p></li><li><p>watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作。</p></li></ol><p>两个重要的小原则：</p><ol><li><p>所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。</p></li><li><p>所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成箭头函数，这样this的指向才是vm 或 组件实例对象。</p></li></ol><hr><h1 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a><strong>绑定样式</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">class</span>样式</span><br><span class="line">  写法:<span class="keyword">class</span>=<span class="string">&quot;xxx&quot;</span> xxx可以是字符串、对象、数组。</span><br><span class="line">  字符串写法适用于：类名不确定，要动态获取。</span><br><span class="line">  对象写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</span><br><span class="line">  数组写法适用于：要绑定多个样式，个数不确定，名字也不确定。</span><br><span class="line"><span class="number">2.</span> style样式</span><br><span class="line">  :style=<span class="string">&quot;&#123;fontSize: xxx&#125;&quot;</span>其中xxx是动态值。</span><br><span class="line">  :style=<span class="string">&quot;[a,b]&quot;</span>其中a、b是样式对象。</span><br></pre></td></tr></table></figure><hr><h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a><strong>条件渲染</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>v-<span class="keyword">if</span></span><br><span class="line">  适用于：切换频率较低的场景。</span><br><span class="line">  特点：不展示的<span class="variable constant_">DOM</span>元素直接被移除。</span><br><span class="line">  注意：v-<span class="keyword">if</span>可以和:v-<span class="keyword">else</span>-<span class="keyword">if</span>、v-<span class="keyword">else</span>一起使用，但要求结构不能被“打断”。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>v-show</span><br><span class="line">  写法：v-show=<span class="string">&quot;表达式&quot;</span></span><br><span class="line">  适用于：切换频率较高的场景。</span><br><span class="line">  特点：不展示的<span class="variable constant_">DOM</span>元素未被移除，仅仅是使用样式隐藏掉</span><br><span class="line">            </span><br><span class="line"><span class="number">3.</span>备注：使用v-<span class="keyword">if</span>的时，元素可能无法获取到，而使用v-show一定可以获取到。</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>注意：</span><br><span class="line"> v-<span class="keyword">if</span>只能与template的配合使用，而v-show是并不可以的</span><br></pre></td></tr></table></figure><hr><h1 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a><strong>列表渲染</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）</span><br><span class="line"><span class="number">2.</span>v-<span class="keyword">for</span>有两种写法（推荐第一种）</span><br><span class="line">  v-<span class="keyword">for</span>=<span class="string">&quot;(item, index) in xxx&quot;</span> :key=<span class="string">&quot;yyy&quot;</span></span><br><span class="line">  v-<span class="keyword">for</span>=<span class="string">&quot;(item, index) of xxx&quot;</span> :key=<span class="string">&quot;yyy&quot;</span></span><br><span class="line"><span class="number">3.</span>注意key值</span><br></pre></td></tr></table></figure><hr><h1 id="key的原理"><a href="#key的原理" class="headerlink" title="key的原理"></a><strong>key的原理</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1. 虚拟DOM中key的作用：</span><br><span class="line">  key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, </span><br><span class="line">  随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</span><br><span class="line">            </span><br><span class="line">2.对比规则：</span><br><span class="line">  (1).旧虚拟DOM中找到了与新虚拟DOM相同的key：</span><br><span class="line">    ①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！</span><br><span class="line">    ②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</span><br><span class="line"></span><br><span class="line">  (2).旧虚拟DOM中未找到与新虚拟DOM相同的key</span><br><span class="line">    创建新的真实DOM，随后渲染到到页面。</span><br><span class="line">                  </span><br><span class="line">3. 用index作为key可能会引发的问题：</span><br><span class="line">  1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:</span><br><span class="line">    会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</span><br><span class="line"></span><br><span class="line">  2. 如果结构中还包含输入类的DOM：</span><br><span class="line">    会产生错误DOM更新 ==&gt; 界面有问题。</span><br><span class="line"></span><br><span class="line">4. 开发中如何选择key?:</span><br><span class="line">  1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</span><br><span class="line">  2.如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，</span><br><span class="line">    使用index作为key是没有问题的。</span><br></pre></td></tr></table></figure><p><strong>举例：</strong>使用index作为key的部分缺陷</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户已经在input上输入了内容，当在改变渲染的数组前面追加一个元素时，</span></span><br><span class="line"><span class="comment">// 因为input虚拟DOM无改变复用到第一个上。</span></span><br><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">   &lt;!-- 遍历数组 --&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表（遍历数组）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加一个老刘<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="attr">persons</span>:[</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="title function_">add</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> p = &#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;老刘&#x27;</span>,<span class="attr">age</span>:<span class="number">40</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">unshift</span>(p)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="vue的监视数据的原理"><a href="#vue的监视数据的原理" class="headerlink" title="vue的监视数据的原理"></a><strong>vue的监视数据的原理</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Vue监视数据的原理：</span><br><span class="line">   1. vue会监视data中所有层次的数据。</span><br><span class="line">   2. 如何监测对象中的数据？</span><br><span class="line">      通过setter实现监视，且要在new Vue时就传入要监测的数据。</span><br><span class="line">      (1).对象中后追加的属性，Vue默认不做响应式处理</span><br><span class="line">      (2).如需给后添加的属性做响应式，请使用如下API：</span><br><span class="line">          Vue.set(target，propertyName/index，value) 或 </span><br><span class="line">          vm.$set(target，propertyName/index，value)</span><br><span class="line">   3. 如何监测数组中的数据？</span><br><span class="line">      通过包裹数组更新元素的方法实现，本质就是做了两件事：</span><br><span class="line">      (1).调用原生对应的方法对数组进行更新。</span><br><span class="line">      (2).重新解析模板，进而更新页面。</span><br><span class="line">   4.在Vue修改数组中的某个元素一定要用如下方法：</span><br><span class="line">     1.使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()</span><br><span class="line">     2.Vue.set() 或 vm.$set()</span><br><span class="line">特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象添加属性！！！</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个模拟vue的数据监听</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&#x27;默谐&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个监视的实例对象，用于监视data中属性的变化</span></span><br><span class="line"><span class="keyword">const</span> obs = <span class="keyword">new</span> <span class="title class_">Observer</span>(data)    </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obs)   </span><br><span class="line"></span><br><span class="line"><span class="comment">//准备一个vm实例对象</span></span><br><span class="line"><span class="keyword">let</span> vm = &#123;&#125;</span><br><span class="line">vm.<span class="property">_data</span> = data = obs</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Observer</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">   <span class="comment">//汇总对象中所有的属性形成一个数组</span></span><br><span class="line">   <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line">   <span class="comment">//遍历</span></span><br><span class="line">   keys.<span class="title function_">forEach</span>(<span class="function">(<span class="params">k</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>,k,&#123;</span><br><span class="line">         <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> obj[k]</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="title function_">set</span>(<span class="params">val</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;k&#125;</span>被改了，我要去解析模板，生成虚拟DOM.....我要开始忙了`</span>)</span><br><span class="line">            obj[k] = val</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="v-model表单使用"><a href="#v-model表单使用" class="headerlink" title="v-model表单使用"></a><strong>v-model表单使用</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;input type=&quot;radio&quot;/&gt;，多个input添加name属性，并且添加value值</span></span><br><span class="line"><span class="comment">// &lt;input type=&quot;checkbox&quot;/&gt;</span></span><br><span class="line">  <span class="number">1.</span>没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）</span><br><span class="line">  <span class="number">2.</span>配置input的value属性:</span><br><span class="line">    (<span class="number">1</span>)v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）</span><br><span class="line">    (<span class="number">2</span>)v-model的初始值是数组，那么收集的的就是value组成的数组</span><br><span class="line"><span class="comment">// 备注：v-model的三个修饰符：</span></span><br><span class="line">         lazy：失去焦点再收集数据</span><br><span class="line">         number：输入字符串转为有效的数字</span><br><span class="line">         trim：输入首尾空格过滤</span><br></pre></td></tr></table></figure><hr><h1 id="过滤器补充"><a href="#过滤器补充" class="headerlink" title="过滤器补充"></a><strong>过滤器补充</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    <span class="number">1.</span>注册过滤器：<span class="title class_">Vue</span>.<span class="title function_">filter</span>(name,callback) 或 <span class="keyword">new</span> <span class="title class_">Vue</span>&#123;<span class="attr">filters</span>:&#123;&#125;&#125;</span><br><span class="line">    <span class="number">2.</span>使用过滤器：&#123;&#123; xxx | 过滤器名&#125;&#125;  或  v-<span class="attr">bind</span>:属性 = <span class="string">&quot;xxx | 过滤器名&quot;</span></span><br><span class="line">备注：</span><br><span class="line">    <span class="number">1.</span>过滤器也可以接收额外参数、多个过滤器也可以串联</span><br><span class="line">    <span class="number">2.</span>并没有改变原本的数据, 是产生新的对应的数据</span><br><span class="line">    </span><br><span class="line">注意：过滤器和methods一样没有缓存，用了几次就会调用几次</span><br></pre></td></tr></table></figure><hr><h1 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a><strong>内置指令</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">v-cloak指令（没有值）：</span><br><span class="line">   <span class="number">1.</span>本质是一个特殊属性，<span class="title class_">Vue</span>实例创建完毕并接管容器后，会删掉v-cloak属性。</span><br><span class="line">   <span class="number">2.</span>使用css配合v-cloak可以解决网速慢时页面展示出&#123;&#123;xxx&#125;&#125;的问题。</span><br><span class="line"></span><br><span class="line"><span class="comment">// css</span></span><br><span class="line">&lt;style&gt;</span><br><span class="line">   [v-cloak]&#123;</span><br><span class="line">      <span class="attr">display</span>:none;</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"><span class="comment">// html</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="comment">// new Vue(&#123;&#125;) 实例创建完毕并接管容器后移除v-cloak</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------------</span></span><br><span class="line">v-once指令：</span><br><span class="line">   <span class="number">1.</span>v-once所在节点在初次动态渲染后，就视为静态内容了。</span><br><span class="line">   <span class="number">2.</span>以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。</span><br><span class="line">   </span><br><span class="line"><span class="comment">// ---------------------</span></span><br><span class="line">v-pre指令：</span><br><span class="line">   <span class="number">1.</span>跳过其所在节点的编译过程。&#123;&#123;&#125;&#125;等v-bind都不会被解析</span><br><span class="line">   <span class="number">2.</span>可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译。</span><br></pre></td></tr></table></figure><hr><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a><strong>自定义指令</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个directives的配置对象</span></span><br><span class="line"><span class="attr">directives</span>:&#123;</span><br><span class="line">   <span class="comment">//  指令何时会被调用？</span></span><br><span class="line">   <span class="comment">//  1.指令与元素成功绑定时（一上来）。</span></span><br><span class="line">   <span class="comment">//  2.指令所在的模板被重新解析时。</span></span><br><span class="line">   <span class="comment">// 接收两个参数1绑定的元素、2是绑定的属性（value值等）</span></span><br><span class="line">   <span class="title function_">big</span>(<span class="params">element,binding,vNoed</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;big&#x27;</span>,<span class="variable language_">this</span>) <span class="comment">//注意此处的this是window</span></span><br><span class="line">      element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span><br><span class="line">      vNoed.<span class="property">context</span> <span class="comment">// 获取vue实例</span></span><br><span class="line">      vNode.<span class="property">context</span>.$nextTick() <span class="comment">// 使用nextTick</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 配置对象的写法（三个常用的钩子函数）</span></span><br><span class="line">   <span class="attr">fbind</span>:&#123;</span><br><span class="line">      <span class="comment">// 指令与元素成功绑定时（一上来）</span></span><br><span class="line">      <span class="title function_">bind</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">         element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 指令所在元素被插入页面时</span></span><br><span class="line">      <span class="title function_">inserted</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">         <span class="comment">// 注意有些要找到真实DOM才能操作（如下）</span></span><br><span class="line">         element.<span class="title function_">focus</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 指令所在的模板被重新解析时</span></span><br><span class="line">      <span class="title function_">update</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">         element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局指令</span></span><br><span class="line"><span class="comment">// Vue.directive(指令名,配置对象) 或   Vue.directive(指令名,回调函数)</span></span><br><span class="line"><span class="comment">// 注意：</span></span><br><span class="line"><span class="comment">// 1.指令定义时不加v-，但使用时要加v-；</span></span><br><span class="line"><span class="comment">// 2.指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名。（下面的key用引号包起来）</span></span><br></pre></td></tr></table></figure><hr><h1 id="声命周期"><a href="#声命周期" class="headerlink" title="声命周期"></a><strong>声命周期</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">常用的生命周期钩子：</span><br><span class="line">      1.mounted: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。</span><br><span class="line">      2.beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】。</span><br><span class="line">关于销毁Vue实例：</span><br><span class="line">      1.销毁后借助Vue开发者工具看不到任何信息。</span><br><span class="line">      2.销毁后自定义事件会失效，但原生DOM事件依然有效。（重要）</span><br><span class="line">      3.一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。</span><br></pre></td></tr></table></figure><hr><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a><strong>组件</strong></h1><h2 id="非单文件组件的使用"><a href="#非单文件组件的使用" class="headerlink" title="非单文件组件的使用"></a><strong>非单文件组件的使用</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>中使用组件的三大步骤：</span><br><span class="line">    ①定义组件(创建组件)</span><br><span class="line">    ②注册组件</span><br><span class="line">    ③使用组件(写组件标签)</span><br><span class="line">一、如何定义一个组件？</span><br><span class="line">使用<span class="title class_">Vue</span>.<span class="title function_">extend</span>(options)创建，options和<span class="keyword">new</span> <span class="title class_">Vue</span>传入的那个几乎一样，但也有如下区别：</span><br><span class="line">  <span class="number">1.</span>el不能写，所有组件都经过vm管理，由vm中的el决定服务哪个容器。使用template配置组件结构。</span><br><span class="line">  <span class="number">2.</span>data必须写成函数，避免组件被复用时，数据存在引用关系。</span><br><span class="line">二、如何注册组件？</span><br><span class="line">  <span class="number">1.</span>局部注册：靠<span class="keyword">new</span> <span class="title class_">Vue</span>的时候传入components选项</span><br><span class="line">  <span class="number">2.</span>全局注册：靠<span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;组件名&#x27;</span>,组件)</span><br><span class="line">三、编写组件标签：</span><br><span class="line">  &lt;school&gt;&lt;/school&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步组件</span></span><br><span class="line"><span class="keyword">const</span> my-info = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">   <span class="attr">template</span>:<span class="string">`&lt;div class=&quot;demo&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">   <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">         <span class="attr">name</span>:<span class="string">&#x27;moxie&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-info&#x27;</span>,my-info) <span class="comment">// 全局注册</span></span><br><span class="line"><span class="comment">// 局部注册</span></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">   <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">   <span class="attr">components</span>:&#123;<span class="string">&#x27;my-info&#x27;</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注意：</span></span><br><span class="line"><span class="comment">1. el不能写结构，要在template里写，并且只能写一个标签；</span></span><br><span class="line"><span class="comment">2. 关于组件名:</span></span><br><span class="line"><span class="comment">  一个单词组成：</span></span><br><span class="line"><span class="comment">    第一种写法(首字母小写)：school</span></span><br><span class="line"><span class="comment">    第二种写法(首字母大写)：School</span></span><br><span class="line"><span class="comment">  多个单词组成：</span></span><br><span class="line"><span class="comment">    第一种写法(kebab-case命名)：my-school</span></span><br><span class="line"><span class="comment">    第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)</span></span><br><span class="line"><span class="comment">// 组件添加name属性后，在开发者工具中呈现为配置的名字。</span></span><br><span class="line"><span class="comment">3.关于组件标签:</span></span><br><span class="line"><span class="comment">  第一种写法：&lt;school&gt;&lt;/school&gt;</span></span><br><span class="line"><span class="comment">  第二种写法：&lt;school/&gt;，不用使用脚手架时，会导致后续组件不能渲染。</span></span><br><span class="line"><span class="comment">4.组件的嵌套，就是在组件里面配置components属性，并在template里面引用</span></span><br><span class="line"><span class="comment">5.不使用Vue.extend(options)，直接 const school = options 一个配置对象，template里面引用就会自动调用</span></span><br><span class="line"><span class="comment">  new VueComponent(options)，在使用脚手架时候就是 export default 暴露一个配置对象&#123;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h2 id="关于VueComponent"><a href="#关于VueComponent" class="headerlink" title="关于VueComponent"></a><strong>关于VueComponent</strong></h2><ol><li><p>每调用Vue.extend，返回的都是一个全新的VueComponent（组件实例对象）</p></li><li><p>this指向：组件中this是VueComponent实例对象，vue的实例对象是Vue实例对象。</p></li><li><p>组件实例对象（简称vc）；vue的实例对象（简称vm）。</p></li><li><p>一个重要的内置关系：VueComponent.prototype.<strong>proto</strong> === Vue.prototype</p><p>作用：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。 默认情况：VueComponent.prototype.__proto__指向的是Object，Vue进行处理了。</p></li></ol><hr><h2 id="非单文件组件与单文件组件"><a href="#非单文件组件与单文件组件" class="headerlink" title="非单文件组件与单文件组件"></a><strong>非单文件组件与单文件组件</strong></h2><ol><li><p>非单文件组件：简单来说就是没有使用脚手架搭建项目，直接引入vue.js在HTML中使用；</p></li><li><p>单文件组件：使用脚手架搭建项目，一个组件就是一个vue文件，包含了HTML、CSS、js。</p></li></ol><hr><h1 id="Vue脚手架"><a href="#Vue脚手架" class="headerlink" title="Vue脚手架"></a><strong>Vue脚手架</strong></h1><h2 id="Vue脚手架index-html的相关注释"><a href="#Vue脚手架index-html的相关注释" class="headerlink" title="Vue脚手架index.html的相关注释"></a><strong>Vue脚手架index.html的相关注释</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 针对IE浏览器的一个特殊配置，含义是让IE浏览器以最高的渲染级别渲染页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 开启移动端的理想视口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 配置页签图标 &lt;%= BASE_URL %&gt;为配置好的路径就是public --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 引入第三方样式 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;css/bootstrap.css&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 配置网页标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>硅谷系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 当浏览器不支持js时noscript中的元素就会被渲染 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; </span><br><span class="line">          doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a><strong>其他补充</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装 npm install -g @vue/cli</span></span><br><span class="line"><span class="comment">// 显示vue默认的webpack配置 vue inspect &gt; output.js</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> main.js引入Vue版本是vue.runtime.esm.js（在node_modules&gt;vue文件里package.json里有个module配置）</span></span><br><span class="line"><span class="comment">  1. vue.js与vue.runtime.xxx.js的区别：</span></span><br><span class="line"><span class="comment">     vue.js是完整版的Vue，包含：核心功能 + 模板解析器。</span></span><br><span class="line"><span class="comment">     vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</span></span><br><span class="line"><span class="comment">  2. 没有模板解析器不能使用template这个配置项，需要使用render函数，</span></span><br><span class="line"><span class="comment">     在vue文件可以写template原因是引入了vue-template-compiler包。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// vue.config.js中有些配置不能为空，避免使用Crtl /屏蔽；</span></span><br><span class="line"><span class="comment">// 如：pages: &#123;&#125;推荐不写这个（其他配置好像暂无影响）</span></span><br></pre></td></tr></table></figure><hr><h1 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a><strong>ref属性</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 被用来给元素或子组件注册引用信息（id的替代者）</span></span><br><span class="line"><span class="comment">2. 应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</span></span><br><span class="line"><span class="comment">3. 使用方式：</span></span><br><span class="line"><span class="comment">    1. 打标识：```&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;``` 或 ```&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;```</span></span><br><span class="line"><span class="comment">    2. 获取：```this.$refs.xxx``` */</span></span><br></pre></td></tr></table></figure><hr><h1 id="props"><a href="#props" class="headerlink" title="props"></a><strong>props</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// props三种写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 第一种方式（只接收）</span></span><br><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"><span class="comment">// 2.第二种方式（限制类型）：</span></span><br><span class="line"><span class="attr">props</span>:&#123;<span class="attr">name</span>:<span class="title class_">String</span>&#125;</span><br><span class="line"><span class="comment">// 3. 第三种方式（限制类型、限制必要性、指定默认值）：</span></span><br><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">  <span class="attr">name</span>:&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">//类型</span></span><br><span class="line">    <span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//必要性</span></span><br><span class="line">    <span class="attr">default</span>:<span class="string">&#x27;老王&#x27;</span> <span class="comment">//默认值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意：required一般不和default在一起，其他Object的默认值是一个函数里面return</span></span><br></pre></td></tr></table></figure><hr><h1 id="mixin混入"><a href="#mixin混入" class="headerlink" title="mixin混入"></a><strong>mixin混入</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 功能：可以把多个组件共用的配置提取成一个混入对象</span></span><br><span class="line"><span class="comment">2. 使用方式：</span></span><br><span class="line"><span class="comment">mixin.js文件中</span></span><br><span class="line"><span class="comment">export default &#123;</span></span><br><span class="line"><span class="comment">  data()&#123;...&#125;,  // 在data与methods的以组件为主</span></span><br><span class="line"><span class="comment">  mounted()&#123;...&#125; // 生命周期中是先调用混入的再调用组件的</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">使用混入：</span></span><br><span class="line"><span class="comment">  全局混入：Vue.mixin(xxx)</span></span><br><span class="line"><span class="comment">  局部混入：mixins:[&#x27;xxx&#x27;] */</span></span><br></pre></td></tr></table></figure><hr><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a><strong>插件</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">插件本质：包含install方法的一个对象，</span></span><br><span class="line"><span class="comment">install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">定义插件：</span></span><br><span class="line"><span class="comment">    export default &#123;</span></span><br><span class="line"><span class="comment">        install(Vue, options) &#123;</span></span><br><span class="line"><span class="comment">        // 1. 添加全局过滤器</span></span><br><span class="line"><span class="comment">        Vue.filter(....)</span></span><br><span class="line"><span class="comment">        // 2. 添加全局指令</span></span><br><span class="line"><span class="comment">        Vue.directive(....)</span></span><br><span class="line"><span class="comment">        // 3. 配置全局混入(合)</span></span><br><span class="line"><span class="comment">        Vue.mixin(....)</span></span><br><span class="line"><span class="comment">        // 4. 添加实例方法</span></span><br><span class="line"><span class="comment">        Vue.prototype.$myMethod = function () &#123;...&#125;</span></span><br><span class="line"><span class="comment">        Vue.prototype.$myProperty = xxxx</span></span><br><span class="line"><span class="comment">        &#125;    </span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    使用插件：Vue.use() */</span></span><br></pre></td></tr></table></figure><hr><h1 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a><strong>scoped样式</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 作用：让样式在局部生效，防止冲突。</span></span><br><span class="line"><span class="comment">2. 写法：&lt;style scoped&gt; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看版本命令 npm view webpack versions</span></span><br></pre></td></tr></table></figure><hr><h1 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a><strong>webStorage</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</span></span><br><span class="line"><span class="comment">2. 浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</span></span><br><span class="line"><span class="comment">3. 相关API：</span></span><br><span class="line"><span class="comment">  1. xxxxxStorage.setItem(&#x27;key&#x27;, &#x27;value&#x27;);</span></span><br><span class="line"><span class="comment">  该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  2. xxxxxStorage.getItem(&#x27;person&#x27;);</span></span><br><span class="line"><span class="comment">  该方法接受一个键名作为参数，返回键名对应的值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  3.xxxxxStorage.removeItem(&#x27;key&#x27;);</span></span><br><span class="line"><span class="comment">  该方法接受一个键名作为参数，并把该键名从存储中删除。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  4.xxxxxStorage.clear()</span></span><br><span class="line"><span class="comment">  该方法会清空存储中的所有数据。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4. 备注：</span></span><br><span class="line"><span class="comment">    1. SessionStorage存储的内容会随着浏览器窗口关闭而消失。</span></span><br><span class="line"><span class="comment">    2. LocalStorage存储的内容，需要手动清除才会消失。</span></span><br><span class="line"><span class="comment">    3. xxxxxStorage.getItem(xxx)如果xxx对应的value获取不到，那么getItem的返回值是null。</span></span><br><span class="line"><span class="comment">    4. JSON.parse(null)的结果依然是null。*/</span></span><br></pre></td></tr></table></figure><hr><h1 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a><strong>自定义事件</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.使用props传递事件（基本不用）</span></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="comment">// props接收事件</span></span><br><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;addTodo&#x27;</span>],</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"> <span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">addTodo</span>(todoObj) <span class="comment">// 触发事件（并传递参数）</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 父组件中props</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">:addTodo</span>=<span class="string">&quot;addTodo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">addTodo</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="title function_">consolelog</span>(value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.绑定自定义事件：</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   1. 第一种方式，在父组件中：&lt;Demo @atguigu=&quot;test&quot;/&gt;或&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   2. 第二种方式，在父组件中：</span></span><br><span class="line"><span class="comment">      &lt;Demo ref=&quot;demo&quot;/&gt;</span></span><br><span class="line"><span class="comment">      ......</span></span><br><span class="line"><span class="comment">      mounted()&#123;</span></span><br><span class="line"><span class="comment">         this.$refs.xxx.$on(&#x27;atguigu&#x27;,this.test) // 可以传递多个参数</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   3. 若想让自定义事件只能触发一次，可以使用 once 修饰符，或 $once 方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   4. 触发自定义事件：this.$emit(&#x27;atguigu&#x27;,数据)    </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   5. 解绑自定义事件this.$off(&#x27;atguigu&#x27;)，解绑多个this.$off([&#x27;&#x27;,&#x27;&#x27;])，全部解绑this.$off()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   6. 组件上也可以绑定原生DOM事件，需要使用 native 修饰符。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   7. 注意：通过 this.$refs.xxx.$on(&#x27;atguigu&#x27;,回调)</span></span><br><span class="line"><span class="comment">      绑定自定义事件时，回调要么配置在methods中，</span></span><br><span class="line"><span class="comment">      this.$refs.student(&#x27;atguigu&#x27;,this.getStudentName)</span></span><br><span class="line"><span class="comment">      要么用箭头函数，否则this指向会出问题！</span></span><br><span class="line"><span class="comment">      this.$refs.student(&#x27;atguigu&#x27;,()=&gt;&#123;console.log(this)&#125;) // 不是有箭头函数this为子组件vc</span></span><br></pre></td></tr></table></figure><hr><h1 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a><strong>全局事件总线</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装全局事件总线：</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用事件总线：</span></span><br><span class="line"><span class="comment">//   1. 接收数据：组件中给$bus绑定自定义事件，事件的回调留在组件自身</span></span><br><span class="line">      <span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ......</span><br><span class="line">      <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//   2. 提供数据：this.$bus.$emit(&#x27;xxxx&#x27;,数据)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   3. 最好在beforeDestroy钩子中，用$off去解绑当前组件所用到的事件。</span></span><br><span class="line"><span class="comment">//      不能直接使用this.off()这样所有的自定义事件全部销毁了</span></span><br><span class="line">          </span><br><span class="line"><span class="comment">// 使用全局事件总线时注意要确保$on事件挂载后，才能触发$emit，</span></span><br><span class="line"><span class="comment">// 也就是绑定$on组件加载完成（如：组件是隐藏）</span></span><br></pre></td></tr></table></figure><hr><h1 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a><strong>消息订阅与发布（pubsub）</strong></h1><p>所有的框架都可以使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   1. npm i pubsub-js // 安装pubsub</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   2. import pubsub from &#x27;pubsub-js&#x27; // 引入</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   3. A组件想接收数据，则在A组件中订阅消息，订阅的回调留在A组件自身。</span></span><br><span class="line"><span class="comment">      mounted() &#123;</span></span><br><span class="line"><span class="comment">        this.pid = pubsub.subscribe(&#x27;subscribeName&#x27;,(name,data)=&gt;&#123;&#125;) </span></span><br><span class="line"><span class="comment">        // 每次订阅会生成一个id，使用id作为取消订阅的参数</span></span><br><span class="line"><span class="comment">        // subscribe接收两个参数，第一个为订阅名字，第二个是函数（接收两个参数订阅名和数据）</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   4. 提供数据：pubsub.publish(&#x27;subscribeName&#x27;,数据)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   5. 最好在beforeDestroy钩子中，用PubSub.unsubscribe(pid)去取消订阅。*/</span></span><br></pre></td></tr></table></figure><hr><h1 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a><strong>nextTick</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 语法：<span class="variable language_">this</span>.$nextTick(回调函数)</span><br><span class="line"><span class="number">2.</span> 作用：在下一次 <span class="variable constant_">DOM</span> 更新结束后执行其指定的回调。</span><br><span class="line"><span class="number">3.</span> 什么时候用：当改变数据后，要基于更新后的新<span class="variable constant_">DOM</span>进行某些操作时，要在nextTick所指定的回调函数中执行。</span><br></pre></td></tr></table></figure><hr><h1 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a><strong>Vue封装的过度与动画</strong></h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a><strong>基本使用</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用transition标签包裹</span></span><br><span class="line">&lt;transition name=<span class="string">&quot;hello&quot;</span> appear&gt; </span><br><span class="line">  <span class="comment">// name属性控制下方的class的名字（默认是v-） </span></span><br><span class="line">  <span class="comment">// appear属性控制是否一进来就加载动画</span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>你好啊！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/transition&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用关键帧动画</span></span><br><span class="line"><span class="comment">// 进入过程中</span></span><br><span class="line">.<span class="property">hello</span>-enter-active&#123;</span><br><span class="line">  <span class="attr">animation</span>: atguigu <span class="number">0.</span>5s linear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 离开过程中</span></span><br><span class="line">.<span class="property">hello</span>-leave-active&#123;</span><br><span class="line">  <span class="attr">animation</span>: atguigu <span class="number">0.</span>5s linear reverse;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes atguigu &#123;</span><br><span class="line"> <span class="keyword">from</span>&#123;</span><br><span class="line">  <span class="attr">transform</span>: <span class="title function_">translateX</span>(-<span class="number">100</span>%);</span><br><span class="line"> &#125;</span><br><span class="line"> to&#123;</span><br><span class="line">  <span class="attr">transform</span>: <span class="title function_">translateX</span>(0px);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用transition过度动画</span></span><br><span class="line"><span class="comment">/* 进入的起点、离开的终点 */</span></span><br><span class="line">.<span class="property">hello</span>-enter,.<span class="property">hello</span>-leave-to&#123;</span><br><span class="line">  <span class="attr">transform</span>: <span class="title function_">translateX</span>(-<span class="number">100</span>%);</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">hello</span>-enter-active,.<span class="property">hello</span>-leave-active&#123;</span><br><span class="line">  <span class="attr">transition</span>: <span class="number">0.</span>5s linear; </span><br><span class="line">  <span class="comment">// 也可以不写在这里（在需要使用动画的标签处写，推荐写在这里可以不动其他代码）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 进入的终点、离开的起点 */</span></span><br><span class="line">.<span class="property">hello</span>-enter-to,.<span class="property">hello</span>-leave&#123;</span><br><span class="line">  <span class="attr">transform</span>: <span class="title function_">translateX</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------</span></span><br><span class="line"><span class="comment">// transition-group的使用</span></span><br><span class="line">&lt;transition-group appear name=<span class="string">&quot;hello&quot;</span> &gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;!isShow&quot;</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>你好啊！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>尚硅谷！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/transition-group&gt;</span><br><span class="line"><span class="comment">// 注意：transition里面只能有一个标签，而transition-group可以多个但是每个需要添加key</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// mode属性：out-in(先离开后进入)、in-out(先进入后离开)</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h2 id="使用第三方animate-css"><a href="#使用第三方animate-css" class="headerlink" title="使用第三方animate.css"></a><strong>使用第三方animate.css</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装 npm install animate.css --save</span></span><br><span class="line"><span class="comment">// 使用 import &#x27;animate.css&#x27;</span></span><br><span class="line">&lt;transition-group </span><br><span class="line">  appear</span><br><span class="line">  name=<span class="string">&quot;animate__animated animate__bounce&quot;</span></span><br><span class="line">  enter-active-<span class="keyword">class</span>=<span class="string">&quot;animate__swing&quot;</span></span><br><span class="line">  leave-active-<span class="keyword">class</span>=<span class="string">&quot;animate__backOutUp&quot;</span></span><br><span class="line">&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;!isShow&quot;</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>你好啊！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>尚硅谷！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/transition-group&gt;</span><br><span class="line"><span class="comment">// enter-active-class为进入的class；leave-active-class为离开class</span></span><br></pre></td></tr></table></figure><hr><h1 id="代理配置"><a href="#代理配置" class="headerlink" title="代理配置"></a><strong>代理配置</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.方法一</span></span><br><span class="line"><span class="comment">在vue.config.js中添加如下配置：直接配置</span></span><br><span class="line"><span class="comment">devServer:&#123;</span></span><br><span class="line"><span class="comment">  proxy:&quot;http://localhost:5000&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">  1. 优点：配置简单，请求资源时直接发给前端（8080）即可。</span></span><br><span class="line"><span class="comment">  2. 缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</span></span><br><span class="line"><span class="comment">  3. 工作方式：若按照上述配置代理，当请求了前端不存在的资源时，</span></span><br><span class="line"><span class="comment">     那么该请求会转发给服务器 （优先匹配前端资源）</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">// --------------</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.方法二</span></span><br><span class="line"><span class="comment">就是正常配置：</span></span><br><span class="line"><span class="comment">  1. 优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</span></span><br><span class="line"><span class="comment">  2. 缺点：配置略微繁琐，请求资源时必须加前缀。*/</span></span><br></pre></td></tr></table></figure><hr><h1 id="vue-resource的使用"><a href="#vue-resource的使用" class="headerlink" title="vue-resource的使用"></a><strong>vue-resource的使用</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装 npm install vue-resource</span></span><br><span class="line"><span class="comment">// main.js使用</span></span><br><span class="line"><span class="keyword">import</span> vueResource <span class="keyword">from</span> <span class="string">&#x27;vue-resource&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(vueResource)</span><br><span class="line"><span class="comment">// 之后在vue实例下会有一个$http的方法（axios替换成$http即可）</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(url).<span class="title function_">then</span>()</span><br></pre></td></tr></table></figure><hr><h1 id="插槽补充"><a href="#插槽补充" class="headerlink" title="插槽补充"></a><strong>插槽补充</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具名插槽的写法</span></span><br><span class="line">&lt;template slot=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 注意 &lt;div v-slot:center&gt;&lt;/div&gt;的写法报错（v-slot只能用在template）</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> <span class="comment">// 普通标签的写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 作用域插槽</span></span><br><span class="line"><span class="comment">// 不推荐:</span></span><br><span class="line"><span class="comment">// &lt;template scope=&quot;scopeData&quot;&gt;&lt;/template&gt;</span></span><br><span class="line"><span class="comment">// &lt;template slot-scope=&quot;scopeData&quot;&gt;&lt;/template&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:child</span>=<span class="string">&quot;&#123; msg &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="Vuex的补充"><a href="#Vuex的补充" class="headerlink" title="Vuex的补充"></a><strong>Vuex的补充</strong></h1><h2 id="Vuex的环境"><a href="#Vuex的环境" class="headerlink" title="Vuex的环境"></a><strong>Vuex的环境</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装 npm i vuex@3  </span></span><br><span class="line"><span class="comment">//注意不能直接 npm i vuex 这样的话就是vuex4，使用的vue2版本不支持，只能是vue3使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// store/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>  <span class="comment">//引入Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)  <span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="comment">// 三个配置对象</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations——用于操作数据（state）</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state——用于存储数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"><span class="comment">//准备getters——用于将state中的数据进行加工</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;&#125;</span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">   actions,</span><br><span class="line">   mutations,</span><br><span class="line">   state,</span><br><span class="line">   getters</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>  <span class="comment">// 引入store，要先use</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    store, <span class="comment">// 添加一个配置项（上方不引入Vuex的话，会丢失该配置项，相当于无这个key）</span></span><br><span class="line">           <span class="comment">// 上方不引入store，vue不知道找到那个具体文件</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 注意：store必须在Vue.use(Vuex)之后，如果都在main.js里面引入，</span></span><br><span class="line"><span class="comment">// js文件会将所有的import提升在前面执行，故Vue.use(Vuex)在后会报错</span></span><br></pre></td></tr></table></figure><hr><h2 id="vuex的简写map…函数"><a href="#vuex的简写map…函数" class="headerlink" title="vuex的简写map…函数"></a><strong>vuex的简写map…函数</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为了template中的简写，在computed里面可以手动配置每个state或者getters里面的数据</span></span><br><span class="line"><span class="comment">// vuex提供了的函数，可以方面生成计算属性</span></span><br><span class="line"><span class="comment">// 并且在vue的开发者工具中显示的是vuex bind（更加方便区分）</span></span><br><span class="line"><span class="keyword">import</span> &#123;mapState,mapGetters&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line"> <span class="comment">// 借助mapState生成计算属性，从state中读取数据。（对象写法）</span></span><br><span class="line"> <span class="comment">// ...mapState(&#123;he:&#x27;sum&#x27;,xuexiao:&#x27;school&#x27;,xueke:&#x27;subject&#x27;&#125;),</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//借助mapState生成计算属性，从state中读取数据。（数组写法）</span></span><br><span class="line"> ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line"></span><br><span class="line"> <span class="comment">//借助mapGetters生成计算属性，从getters中读取数据。（对象写法）</span></span><br><span class="line"> <span class="comment">// ...mapGetters(&#123;bigSum:&#x27;bigSum&#x27;&#125;)</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//借助mapGetters生成计算属性，从getters中读取数据。（数组写法）</span></span><br><span class="line"> ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 注意：使用mapState()方法生成的是一个对象，所以在computed里面需要...</span></span><br><span class="line"><span class="comment">// mapState(&#123;sum&#125;)相当于mapState(&#123;sum:sum&#125;)，sum不是一个字符串故不能</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------</span></span><br><span class="line"><span class="comment">// mapActions与mapMutations使用时，</span></span><br><span class="line"><span class="comment">// 若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</span></span><br><span class="line"><span class="keyword">import</span> &#123;mapMutations,mapActions&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"> <span class="comment">//借助mapMutations生成对应的方法，方法中会调用commit去联系mutations(对象写法)</span></span><br><span class="line"> ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line"> <span class="comment">//借助mapMutations生成对应的方法，方法中会调用commit去联系mutations(数组写法)</span></span><br><span class="line"> <span class="comment">// ...mapMutations([&#x27;JIA&#x27;,&#x27;JIAN&#x27;]),</span></span><br><span class="line"> </span><br><span class="line"> <span class="title function_">incrementWait</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;jiaWait&#x27;</span>,<span class="variable language_">this</span>.<span class="property">n</span>)</span><br><span class="line"> &#125;, */</span><br><span class="line"></span><br><span class="line"> <span class="comment">//借助mapActions生成对应的方法，方法中会调用dispatch去联系actions(对象写法)</span></span><br><span class="line"> ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"> <span class="comment">//借助mapActions生成对应的方法，方法中会调用dispatch去联系actions(数组写法)</span></span><br><span class="line"> <span class="comment">// ...mapActions([&#x27;jiaOdd&#x27;,&#x27;jiaWait&#x27;])</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><hr><h2 id="vuex模块化-命名空间"><a href="#vuex模块化-命名空间" class="headerlink" title="vuex模块化+命名空间"></a><strong>vuex模块化+命名空间</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> countOptions <span class="keyword">from</span> <span class="string">&#x27;./count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> personOptions <span class="keyword">from</span> <span class="string">&#x27;./person&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">   <span class="attr">modules</span>:&#123;</span><br><span class="line">      <span class="attr">countAbout</span>:countOptions,</span><br><span class="line">      <span class="attr">personAbout</span>:personOptions</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// count.js文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> = &#123;</span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>, <span class="comment">// 开启命名空间</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// person.js文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> = &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用数据（可以写多个），下方的写法需要开启命名空间</span></span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line"> <span class="comment">//借助mapState生成计算属性，从state中读取数据。（数组写法）</span></span><br><span class="line"> ...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line"> ...<span class="title function_">mapState</span>(<span class="string">&#x27;personAbout&#x27;</span>,[<span class="string">&#x27;personList&#x27;</span>]),</span><br><span class="line"> <span class="comment">//借助mapGetters生成计算属性，从getters中读取数据。（数组写法）</span></span><br><span class="line"> ...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"> <span class="comment">//借助mapMutations生成对应的方法，方法中会调用commit去联系mutations(对象写法)</span></span><br><span class="line"> ...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line"> <span class="comment">//借助mapActions生成对应的方法，方法中会调用dispatch去联系actions(对象写法)</span></span><br><span class="line"> ...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 直接使用</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br></pre></td></tr></table></figure><hr><h1 id="vue路由补充"><a href="#vue路由补充" class="headerlink" title="vue路由补充"></a><strong>vue路由补充</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// params路由</span></span><br><span class="line"><span class="comment">// 跳转并携带params参数，to的字符串写法</span></span><br><span class="line">   &lt;router-link :to=<span class="string">&quot;`/home/message/detail/$&#123;m.id&#125;/$&#123;m.title&#125;`&quot;</span>&gt;跳转&lt;/router-link&gt;</span><br><span class="line">                </span><br><span class="line"><span class="comment">// 跳转并携带params参数，to的对象写法</span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">       <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">          name:&#x27;xiangqing&#x27;,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">          params:&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">             id:666,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">               title:&#x27;你好&#x27;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">          &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">       &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">   &gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</span></span><br><span class="line"><span class="comment">// params携带多个参数时，路由处要配置，如： path:&#x27;detail/:id/:title&#x27; （携带多个参数）</span></span><br><span class="line"><span class="comment">// 正常使用方式 router.push(`/user/$&#123;id&#125;`)</span></span><br></pre></td></tr></table></figure><h2 id="路由props属性"><a href="#路由props属性" class="headerlink" title="路由props属性"></a><strong>路由props属性</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">   <span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line">   <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line">   <span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line">   <span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line">   <span class="comment">// props:true</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line">   <span class="title function_">props</span>(<span class="params">$route</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">         <span class="attr">id</span>:$route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">         <span class="attr">title</span>:$route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用props接收</span></span><br><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;title&#x27;</span>]</span><br></pre></td></tr></table></figure><hr><h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a><strong>编程式导航</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$router的两个API</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>:&#123;</span><br><span class="line">         <span class="attr">id</span>:xxx,</span><br><span class="line">         <span class="attr">title</span>:xxx</span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>:&#123;</span><br><span class="line">         <span class="attr">id</span>:xxx,</span><br><span class="line">         <span class="attr">title</span>:xxx</span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>() <span class="comment">//前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>() <span class="comment">//后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>() <span class="comment">//可前进也可后退</span></span><br></pre></td></tr></table></figure><hr><h2 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a><strong>缓存路由组件</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=<span class="string">&quot;News&quot;</span>&gt; </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"><span class="comment">// include里的名字是组件的名字（即组件的name的值）</span></span><br><span class="line"><span class="comment">// 缓存多个</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;[a,b]&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="路由组件独有两个新的生命周期"><a href="#路由组件独有两个新的生命周期" class="headerlink" title="路由组件独有两个新的生命周期"></a><strong>路由组件独有两个新的生命周期</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">activated</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;News组件被激活了&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">deactivated</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;News组件失活了&#x27;</span>)</span><br><span class="line"> <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 当keep-alive缓存组件后，不会触发beforeDestroy</span></span><br><span class="line"><span class="comment">// 使用deactivated清除原生的定时器等事件</span></span><br></pre></td></tr></table></figure><hr><h1 id="路由独享守卫"><a href="#路由独享守卫" class="headerlink" title="路由独享守卫"></a><strong>路由独享守卫</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只有前置守卫没有后置守卫</span></span><br><span class="line"><span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">   <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line">         <span class="title function_">next</span>()</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line">         <span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="组件内守卫"><a href="#组件内守卫" class="headerlink" title="组件内守卫"></a><strong>组件内守卫</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line"><span class="title function_">beforeRouteEnter</span> (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line"><span class="title function_">beforeRouteLeave</span> (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意：不是后置守卫，是组件离开时候调用</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识记录2</title>
      <link href="/2022/05/04/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%952/"/>
      <url>/2022/05/04/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%952/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记录平时遇到的技术问题和学习到的新知识</p><hr><h1 id="form表单提交"><a href="#form表单提交" class="headerlink" title="form表单提交"></a><strong>form表单提交</strong></h1><p>使用form表单提交不会有跨域的情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;form id=<span class="string">&quot;formId&quot;</span></span><br><span class="line">      action=<span class="string">&quot;http://localhost:3000&quot;</span></span><br><span class="line">      method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入手机号&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputId&quot;</span> <span class="attr">name</span>=<span class="string">&quot;mobile&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">               <span class="attr">pattern</span>=<span class="string">&quot;^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">               <span class="attr">required</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;formId&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;inputId&#x27;</span>)</span><br><span class="line">    <span class="comment">// form表单提交会先走下面的事件</span></span><br><span class="line">    form.<span class="property">onsubmit</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        e.<span class="title function_">preventDefault</span>() <span class="comment">// 会阻止表单提交</span></span><br><span class="line">        <span class="keyword">var</span> value = input.<span class="property">value</span></span><br><span class="line">        <span class="keyword">var</span> params = <span class="title class_">Base64</span>.<span class="title function_">encode</span>(value) <span class="comment">// 使用Base64.js加密</span></span><br><span class="line">        input.<span class="property">value</span> = <span class="string">&#x27;xxxx&#x27;</span> <span class="comment">// 可以修改提交表单的值</span></span><br><span class="line">        form.<span class="title function_">submit</span>() <span class="comment">// 手动提交</span></span><br><span class="line">        input.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span> <span class="comment">// 清空vale</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用form表单提交无刷新</span></span><br><span class="line">&lt;form target=<span class="string">&quot;myIframe&quot;</span>&gt;&lt;<span class="regexp">/form&gt; /</span>/ 使用target</span><br><span class="line">&lt;iframe name=<span class="string">&quot;myIframe&quot;</span> style=<span class="string">&quot;display: none&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line"><span class="comment">// 该方法也可以是手动提交触发</span></span><br></pre></td></tr></table></figure><hr><h1 id="路由参数补充"><a href="#路由参数补充" class="headerlink" title="路由参数补充"></a><strong>路由参数补充</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 路由注意点</span></span><br><span class="line"><span class="comment">1:路由传递参数（对象写法）path是否可以结合params参数不可以一起使用</span></span><br><span class="line"><span class="comment">2:指定params参数可传可不传，在path路径后加上?，如 /:xxx?</span></span><br><span class="line"><span class="comment">3:params参数但是如果传递是空串，则应该是undefined，如：xxx || undefined？</span></span><br><span class="line"><span class="comment">4:使用路由可以同时带params和query参数 */</span></span><br></pre></td></tr></table></figure><hr><h1 id="vue的provide与inject"><a href="#vue的provide与inject" class="headerlink" title="vue的provide与inject"></a><strong>vue的provide与inject</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在爷孙传参中可使用（爷-&gt;孙）</span></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="title function_">provide</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">getMap</span>: <span class="variable language_">this</span>.<span class="property">getMap</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件（孙组件）</span></span><br><span class="line"><span class="attr">inject</span>:[<span class="string">&#x27;getMap&#x27;</span>]</span><br></pre></td></tr></table></figure><hr><h1 id="vue的-attrs与-listeners"><a href="#vue的-attrs与-listeners" class="headerlink" title="vue的$attrs与$listeners"></a>vue的$attrs与$listeners</h1><p><code>$attrs</code>就是一个容器对象，这个容器对象会存放:父组件传过来的且子组件未使用<code>props</code>声明接收的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $attrs使用</span></span><br><span class="line"><span class="comment">// 在父组件传递的参数没事使用props接收会在$attrs里面存放</span></span><br><span class="line">&lt;father&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">:msg0</span>=<span class="string">&quot;msg0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">:msg1</span>=<span class="string">&quot;msg1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line">&lt;/father&gt;</span><br><span class="line"><span class="comment">// 子组件接收参数</span></span><br><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;msg0&#x27;</span>],</span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$attrs</span>  <span class="comment">// 里面存放的就是msg1（未被接收的props）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在爷孙传值中，可以父元素直接v-bind=&quot;$attrs&quot;传递给孙组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// $attrs一般搭配interitAttrs 一块使用</span></span><br><span class="line">  <span class="attr">inheritAttrs</span>: <span class="literal">false</span>, <span class="comment">// 默认会继承在html标签上传递过来的数据，类似href属性的继承</span></span><br><span class="line">  <span class="comment">// 默认情况父作用域的不被认作 props 的 attribute 绑定</span></span><br><span class="line">  <span class="comment">// 简单说就是绑定的属性没有props接收，组件根标签就会有该属性，但是style不受影响</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    孙子组件通过props，就能接收到父组件传递过来的$attrs了，就能拿到里面的数据了，也就是：</span></span><br><span class="line"><span class="comment">    爷传父、父传子。即：祖孙之间的数据传递。</span></span><br><span class="line"><span class="comment">  */</span> </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// listeners的使用</span></span><br><span class="line"><span class="comment">// 作用是将父的v-on自定义事件绑定到该组件上</span></span><br><span class="line"><span class="comment">// 使用$listeners可以实现孙组件的数据传递到爷组件中去</span></span><br><span class="line"><span class="comment">// 爷组件</span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">fu</span> @<span class="attr">fromSun</span>=<span class="string">&quot;fromSun&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">fu</span>&gt;</span></span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">fromSun</span>(<span class="params">payload</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;孙传祖&quot;</span>, payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父组件中</span></span><br><span class="line">&lt;sun v-bind=<span class="string">&quot;$attrs&quot;</span> v-on=<span class="string">&quot;$listeners&quot;</span>&gt;&lt;/sun&gt;</span><br><span class="line"><span class="comment">// 类似于：&lt;sun v-bind=&quot;$attrs&quot; @fromSun=&quot;fromSun&quot;&gt;&lt;/sun&gt;</span></span><br><span class="line"><span class="comment">// 子组件（触发爷组件的方法）</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">sendToZu</span>(<span class="params"></span>) &#123; </span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&quot;fromSun&quot;</span>, <span class="variable language_">this</span>.<span class="property">data</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="生成目录树结构"><a href="#生成目录树结构" class="headerlink" title="生成目录树结构"></a><strong>生成目录树结构</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// windows 自带tree命令</span></span><br><span class="line"><span class="comment">// 指定生成到 name.text 文件</span></span><br><span class="line">tree &gt; name.<span class="property">txt</span></span><br></pre></td></tr></table></figure><hr><h1 id="JSON格式转化正则"><a href="#JSON格式转化正则" class="headerlink" title="JSON格式转化正则"></a><strong>JSON格式转化正则</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  JSON.stringify和JSON.parse都有第二个参数</span></span><br><span class="line"><span class="comment">*  如是：函数，每个属性都会经过该函数的转换和处理；</span></span><br><span class="line"><span class="comment">*  如是：数组，只有包含在这个数组中的属性名才会被序列化；为null或未提供所有属性都会被序列化；</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  JSON.stringify第三个参数，用于增加返回的JSON字符串的可读性</span></span><br><span class="line"><span class="comment">*  如：4或&quot;\t&quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// json字符串转json对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">parseJson</span>(<span class="params">jsonStr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr, <span class="function">(<span class="params">k, v</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将正则字符串转成正则对象</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">eval</span>(v) <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">eval</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="comment">// nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// son对象转json字符串</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">stringifyJson</span>(<span class="params">json</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(json, <span class="function">(<span class="params">k, v</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 将正则对象转换为正则字符串</span></span><br><span class="line">        <span class="keyword">if</span> (v <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> v.<span class="title function_">toString</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="vue的环境变量"><a href="#vue的环境变量" class="headerlink" title="vue的环境变量"></a><strong>vue的环境变量</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只能是 NODE_ENV，BASE_URL 和以 VUE_APP_ 开头的变量</span></span><br><span class="line"># 环境</span><br><span class="line"><span class="variable constant_">NODE_ENV</span> = development</span><br><span class="line"># 请求地址</span><br><span class="line"><span class="variable constant_">VUE_APP_BASE_API</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Vue-Cli中BASE_URL在vue.config.js中配置，</span></span><br><span class="line"><span class="comment">注意：BASE_URL从Vue-CLI3.3起已弃用，请使用publicPath</span></span><br><span class="line"><span class="comment">router里面的base: process.env.BASE_URL作用：</span></span><br><span class="line"><span class="comment">当publicPath配置后相当于在/xxx/目录下路由生效（不然输入地址路由响应出现问题） */</span></span><br></pre></td></tr></table></figure><hr><h1 id="在字符串中使用正则的方法"><a href="#在字符串中使用正则的方法" class="headerlink" title="在字符串中使用正则的方法"></a>在字符串中使用正则的方法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">字符串的函数：</span><br><span class="line">match()</span><br><span class="line">  格式：字符串.match(正则)</span><br><span class="line">  功能：在字符串匹配是否符合正则表达式</span><br><span class="line">  返回值：匹配成功，返回装有匹配到字串的数组</span><br><span class="line">  匹配失败，返回null</span><br><span class="line">replace()</span><br><span class="line">  格式：字符串.replace(oldStr/正则,newStr);</span><br><span class="line">  功能：用newStr将oldStr替换</span><br><span class="line">  返回值：替换成功的新字符串</span><br><span class="line">split()</span><br><span class="line">  格式：字符串.split(分割符/正则);</span><br><span class="line">  功能：用分割符将原字符串进行分割</span><br><span class="line">  返回值：分割剩下的字串组成的数组</span><br><span class="line">search()</span><br><span class="line">  格式：字符串.search(字串/正则)</span><br><span class="line">  功能：找到符合条件的字串第一次出现的位置</span><br><span class="line">  返回值：</span><br><span class="line">  如果找到，返回&gt;=0的下标否则，返回-1</span><br></pre></td></tr></table></figure><hr><h1 id="npm补充"><a href="#npm补充" class="headerlink" title="npm补充"></a><strong>npm补充</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 查看全局安装</span><br><span class="line">npm list --depth 0 -g</span><br><span class="line">// 全局卸载</span><br><span class="line">npm uninstall -g name</span><br><span class="line"></span><br><span class="line">// 注意laragon和本地的cmd的是不同的npm库，两者没有关系</span><br><span class="line">// webstorm和vscode使用cmd （终端将默认的powershell换成cmd）</span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://blog.csdn.net/weixin_44939106/article/details/124822440?ops_request_misc=%7B%22request_id%22:%22165458190916782184611662%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&request_id=165458190916782184611662&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-124822440-null-null.nonecase&utm_term=vscode&spm=1018.2226.3001.4450">webstorm配置cmd</a>  <a href="https://jingyan.baidu.com/article/f3ad7d0f0a936048c2345b1c.html">vscode配置cmd</a></p></blockquote><hr><h1 id="vue使用SvgIcon"><a href="#vue使用SvgIcon" class="headerlink" title="vue使用SvgIcon"></a><strong>vue使用SvgIcon</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components新建SvgIcon组件</span></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;svg-icon&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">use</span> <span class="attr">:xlink:href</span>=<span class="string">&quot;iconName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;SvgIcon&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">iconClass</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">required</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">iconName</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> <span class="string">`#icon-<span class="subst">$&#123;<span class="variable language_">this</span>.iconClass&#125;</span>`</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.svg-icon</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">1em</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">1em</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">vertical-align</span>: -<span class="number">0.15em</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">fill</span>: currentColor;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">overflow</span>: hidden;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// scr下新建icons</span></span><br><span class="line"><span class="comment">// 其中svg目录放下载的svg文件</span></span><br><span class="line"><span class="comment">// 要能使用需要安装svg-sprite-loader</span></span><br><span class="line">yarn add svg-sprite-loader --dev</span><br><span class="line"><span class="comment">// 配置 vue.config.js</span></span><br><span class="line"><span class="attr">chainWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/** 设置 svg-sprite-loader */</span></span><br><span class="line">  <span class="keyword">const</span> dir = <span class="title function_">resolve</span>(<span class="string">&#x27;src/icons&#x27;</span>) <span class="comment">// 需要查找的路径</span></span><br><span class="line">  <span class="comment">// 其他 svg loader 排除 icons 目录</span></span><br><span class="line">  config.<span class="property">module</span></span><br><span class="line">    .<span class="title function_">rule</span>(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">    .<span class="property">exclude</span>.<span class="title function_">add</span>(dir)</span><br><span class="line">    .<span class="title function_">end</span>()</span><br><span class="line">  <span class="comment">// 设置Icon</span></span><br><span class="line">  config.<span class="property">module</span></span><br><span class="line">    .<span class="title function_">rule</span>(<span class="string">&#x27;icons&#x27;</span>)</span><br><span class="line">    .<span class="title function_">test</span>(<span class="regexp">/\.svg$/</span>) <span class="comment">// 匹配svg文件</span></span><br><span class="line">    .<span class="property">include</span>.<span class="title function_">add</span>(dir) <span class="comment">// 包含上面添加的 icons 目录</span></span><br><span class="line">    .<span class="title function_">end</span>()</span><br><span class="line">    .<span class="title function_">use</span>(<span class="string">&#x27;svg-sprite-loader&#x27;</span>)</span><br><span class="line">    .<span class="title function_">loader</span>(<span class="string">&#x27;svg-sprite-loader&#x27;</span>)</span><br><span class="line">    .<span class="title function_">options</span>(&#123;</span><br><span class="line">      <span class="attr">symbolId</span>: <span class="string">&#x27;icon-[name]&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">end</span>()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 这样就可以使用，相当于阿里的生成了一个js文件来使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js为全局注册SvgIcon组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SvgIcon</span> <span class="keyword">from</span> <span class="string">&quot;@/components/SvgIcon&quot;</span>; <span class="comment">// 引入Icon组件</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;SvgIcon&#x27;</span>, <span class="title class_">SvgIcon</span>) <span class="comment">// 注册全局组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参考：https://webpack.docschina.org/guides/dependency-management/#require-context</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Webpack 会在构建中解析代码中的 require.context()</span></span><br><span class="line"><span class="comment"> * 三个参数：</span></span><br><span class="line"><span class="comment"> * directory：说明需要检索的目录</span></span><br><span class="line"><span class="comment"> * useSubdirectories：是否检索子目录</span></span><br><span class="line"><span class="comment"> * regExp: 匹配文件的正则表达式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> req = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&quot;./svg&quot;</span>, <span class="literal">false</span>, <span class="regexp">/\.svg$/</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * context module API 会导出一个（require）函数，此函数可以接收一个参数：request</span></span><br><span class="line"><span class="comment"> * 此导出函数有三个属性：resolve, keys, id</span></span><br><span class="line"><span class="comment"> * keys 也是一个函数，它返回一个数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">requireAll</span> = requireContext =&gt; requireContext.<span class="title function_">keys</span>().<span class="title function_">map</span>(requireContext)</span><br><span class="line"><span class="comment">// map循环，requireContext是req一个函数</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title function_">requireAll</span>(req);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用时修改icon的大小与颜色</span></span><br><span class="line">&lt;<span class="title class_">SvgIcon</span> iconClass=<span class="string">&quot;xxx&quot;</span> style=<span class="string">&quot;width: 16px;height: 16px;fill: red&quot;</span>&gt;&lt;/<span class="title class_">SvgIcon</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>使用svgo优化svg</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装svgo-loader</span></span><br><span class="line"><span class="comment">// 可以处理将svg文件多余的内容去除</span></span><br><span class="line"><span class="comment">// icons/svgo.yml</span></span><br><span class="line"></span><br><span class="line"># <span class="title class_">Svgo</span> 配置文件</span><br><span class="line"># 参考：<span class="attr">https</span>:<span class="comment">//github.com/svg/svgo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">plugins</span>:</span><br><span class="line">  - <span class="attr">removeStyleElement</span>: <span class="literal">true</span></span><br><span class="line">  - <span class="attr">removeAttrs</span>:</span><br><span class="line">      <span class="attr">attrs</span>:</span><br><span class="line">        - <span class="string">&#x27;fill&#x27;</span></span><br><span class="line">        - <span class="string">&#x27;fill-rule&#x27;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">// package.json添加</span></span><br><span class="line"><span class="string">&quot;svgo&quot;</span>: <span class="string">&quot;svgo -f src/icons/svg --config=src/icons/svgo.yml&quot;</span></span><br><span class="line"><span class="comment">// 下载后运行命令 npm run svgo 即可优化</span></span><br></pre></td></tr></table></figure><hr><h1 id="表单的autocomplete"><a href="#表单的autocomplete" class="headerlink" title="表单的autocomplete"></a><strong>表单的autocomplete</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// autocomplete 在个别元素或整个表单上开启或关闭浏览器的自动完成功能。</span></span><br><span class="line"><span class="comment">// form、input（text、email等）与textarea、select默认开启</span></span><br><span class="line">&lt;form autocomplete=<span class="string">&quot;on | off&quot;</span>&gt;</span><br><span class="line"><span class="comment">// 注意：只有元素拥有name属性，该属性才有效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发时机为输入相应表单值后，跳转页面即可（elementui也是如此）</span></span><br><span class="line"><span class="comment">// 清空 autocomplete 可以移到对应按Shift+Delete删除或者设置清空</span></span><br></pre></td></tr></table></figure><hr><h1 id="直接修改整个state"><a href="#直接修改整个state" class="headerlink" title="直接修改整个state"></a><strong>直接修改整个state</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">REST_STATE</span>(<span class="params">state</span>) &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 必须使用 Object.assign 方法修改整个 vuex的state</span></span><br><span class="line"><span class="comment">   * 函数默认接收一个参数为 state，修改 state 为当前函数作用域里面的值</span></span><br><span class="line"><span class="comment">   * 以前修改state[&#x27;xx&#x27;]可以同时修改vuex的state，是当前的state与vuex的state的地址都指向同一个对象</span></span><br><span class="line"><span class="comment">   * 使用 state = &#x27;xx&#x27;，是修改当前state的地址并没有影响指向的对象，而 Object.assign是改变对象的里面值并未修改地址</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">assign</span>(state, <span class="title function_">initState</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="JS中的注释"><a href="#JS中的注释" class="headerlink" title="JS中的注释"></a><strong>JS中的注释</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数注释</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@function</span> 函数名</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@description</span> 描述信息</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> 参数 &#123;string&#125; 是否必传，描述信息</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125; 描述信息</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 对象key注释</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@type</span> &#123;<span class="type">boolean</span>&#125; true | false</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@description</span> 描述</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><hr><h1 id="Sass-和-JS之间变量共享"><a href="#Sass-和-JS之间变量共享" class="headerlink" title="Sass 和 JS之间变量共享"></a><strong>Sass 和 JS之间变量共享</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// scss</span><br><span class="line">$theme: blue;</span><br><span class="line"></span><br><span class="line">:export &#123;</span><br><span class="line">  theme: $theme;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// js</span><br><span class="line">import variables from &#x27;@/styles/var.scss&#x27;</span><br><span class="line">console.log(variables.theme) // blue</span><br></pre></td></tr></table></figure><hr><h1 id="v-bind绑定对象"><a href="#v-bind绑定对象" class="headerlink" title="v-bind绑定对象"></a>v-bind绑定对象</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;type&quot;</span> <span class="attr">v-bind</span>=<span class="string">&quot;link&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">type</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="string">&#x27;a&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">link</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">href</span>: to,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">target</span>: <span class="string">&#x27;_blank&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">rel</span>: <span class="string">&#x27;noopener&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="移动端rem与vw适配"><a href="#移动端rem与vw适配" class="headerlink" title="移动端rem与vw适配"></a><strong>移动端rem与vw适配</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rem 适配，参考：vant</span></span><br><span class="line"><span class="comment">// 安装：postcss-pxtorem （npm install postcss-pxtorem@5.1.1 -D）</span></span><br><span class="line"><span class="comment">// 安装：amfe-flexible （npm i amfe-flexible）</span></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;amfe-flexible&#x27;</span></span><br><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="comment">/** postcss.config.js */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;postcss-pxtorem&#x27;</span>: &#123;</span><br><span class="line">            <span class="attr">rootValue</span>: <span class="number">37.5</span>,</span><br><span class="line">            <span class="attr">propList</span>: [<span class="string">&#x27;*&#x27;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 注意：px 自动转 rem 只在css中生效，行内样式不会生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// scss单文件使用vw（）</span></span><br><span class="line"><span class="comment">// 参考：https://juejin.cn/post/6963815704239800357</span></span><br><span class="line">@<span class="keyword">function</span> <span class="title function_">px2vw</span>(<span class="params">$px</span>) &#123;</span><br><span class="line">  @<span class="keyword">return</span> $px * 100vw / <span class="number">750</span>;</span><br><span class="line">&#125;</span><br><span class="line">div&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="title function_">px2vw</span>(<span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="vue中css使用data数据"><a href="#vue中css使用data数据" class="headerlink" title="vue中css使用data数据"></a><strong>vue中css使用data数据</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.css（伪元素）使用自定义data数据</span></span><br><span class="line"><span class="comment">// 注意：针对伪元素的content使用var()函数动态改变无效，需要使用attr()函数</span></span><br><span class="line">&lt;div :data-content=<span class="string">&quot;true&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="attr">div</span>:after &#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="title function_">attr</span>(data-content)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.自定义data失效，使用css变量(--xxx)</span></span><br><span class="line"><span class="comment">// 注意：attr好像不能生效，只能使用变量</span></span><br><span class="line">&lt;div :style=<span class="string">&quot;&#123;&#x27;--bodyHeight&#x27;: window.innerHeight + &#x27;px&#x27;&#125;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">div &#123;</span><br><span class="line">    <span class="attr">height</span>: <span class="title function_">calc</span>(<span class="title function_">var</span>(--bodyHeight) - 100px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="滚动条样式"><a href="#滚动条样式" class="headerlink" title="滚动条样式"></a><strong>滚动条样式</strong></h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// 滚动条样式</span><br><span class="line"><span class="keyword">@mixin</span> scrollbar() &#123;</span><br><span class="line">  <span class="comment">/* 整个滚动条 */</span></span><br><span class="line">  &amp;::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="comment">/* 对应纵向滚动条的宽度 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="comment">/* 对应横向滚动条的宽度 */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 滚动条上的滚动滑块 */</span></span><br><span class="line">  &amp;::-webkit-scrollbar-thumb &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#BEBEBE</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">32px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 滚动条轨道 */</span></span><br><span class="line">  &amp;::-webkit-scrollbar-track &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: transparent;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">32px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> scrollbar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注意如果不生效，则添加如下样式*/</span></span><br><span class="line">&amp;::-webkit-scrollbar &#123;</span><br><span class="line">   <span class="attribute">display</span>: block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 横向滚动条到顶部 */</span></span><br><span class="line"><span class="comment">/* 父元素反转180度，子元素再反转回来，注意子元素的高度 */</span></span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;father&quot;&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;son&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">   <span class="attribute">overflow-x</span>: auto;</span><br><span class="line">   <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(-<span class="number">1</span>);</span><br><span class="line">   <span class="keyword">@include</span> scrollbar;</span><br><span class="line">   <span class="selector-class">.son</span> &#123;</span><br><span class="line">       <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(-<span class="number">1</span>);</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">100%</span>;   </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="elementui-表单重置"><a href="#elementui-表单重置" class="headerlink" title="elementui 表单重置"></a><strong>elementui 表单重置</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// elementui 表单重置失效，必须要写prop属性才可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vue3 中的reactive 重置</span></span><br><span class="line"><span class="comment">// 改为使用ref数据，xxx.value</span></span><br><span class="line"><span class="comment">// 添加外部data包裹</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者如下</span></span><br><span class="line"><span class="keyword">const</span> info = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(info);</span><br><span class="line">keys.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    info[item] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="pnpm-使用"><a href="#pnpm-使用" class="headerlink" title="pnpm 使用"></a><strong>pnpm 使用</strong></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g pnpm  # 全局安装 pnpm</span><br><span class="line">pnpm config set registry https://registry.npm.taobao.org/  # 设置镜像源</span><br><span class="line"># 使用pnpm安装包报错，使用下面两个命令</span><br><span class="line">#（只使用 pnpm setup 其他全局包会用不了，使用下面的命令可能会解决，暂不知道其他方案）</span><br><span class="line">#（注意：不报错千万不要使用）</span><br><span class="line">pnpm setup # 自动设置环境变量，会出现环境全部错误cnpm yarn等都用不了</span><br><span class="line">pnpm config set global-bin-dir &quot;D:\nodejs&quot;  # pnpm全局bin路径</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pnpm install # 安装</span><br><span class="line">pnpm add xxx # 安装生产依赖</span><br><span class="line">pnpm add xxx -D # 安装本地依赖</span><br><span class="line">pnpm add -g xxx # 全局安装</span><br><span class="line">pnpm remove # 移除依赖</span><br><span class="line">pnpm store prune # 清除缓存</span><br></pre></td></tr></table></figure><p><strong>其他配置</strong></p><p>注意：不要随便使用下面的配置，会出现错误，如果配置了可以删除配置即可</p><p>​            项目文件夹名称改了，需要删除node_modules重新安装（不然安装新的包会报错）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pnpm config set store-dir &quot;D:\.pnpm-store&quot; # pnpm全局仓库路径(类似 .git 仓库)</span><br><span class="line">pnpm config set global-dir &quot;D:\nodejs\pnpm\pnpm-global&quot; # pnpm全局安装路径</span><br><span class="line">pnpm config set global-bin-dir &quot;D:\nodejs&quot; # pnpm全局bin路径</span><br><span class="line">pnpm config set state-dir &quot;D:\nodejs\pnpm&quot; # pnpm创建pnpm-state.json文件的目录</span><br><span class="line">pnpm config set cache-dir &quot;D:\nodejs\pnpm\cache&quot; # pnpm全局缓存路径</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm config get userconfig # 用户配置文件</span><br><span class="line">npm config edit # 编辑查看配置</span><br><span class="line">npm config delete xxx # 删除某个配置</span><br><span class="line">npm rm -g pnpm # 卸载全局包</span><br><span class="line">npm ls -g # 查看全局包</span><br><span class="line">npm cache clean --force # 强制清除缓存</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 前端知识记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序知识</title>
      <link href="/2022/04/11/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/04/11/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文记录微信小程序的知识点</p><hr><h1 id="微信小程序项目介绍"><a href="#微信小程序项目介绍" class="headerlink" title="微信小程序项目介绍"></a>微信小程序项目介绍</h1><h2 id="小程序介绍"><a href="#小程序介绍" class="headerlink" title="小程序介绍"></a>小程序介绍</h2><h2 id="文件后缀名"><a href="#文件后缀名" class="headerlink" title="文件后缀名"></a>文件后缀名</h2><ul><li><p><code>.json</code>——JSON配置文件</p></li><li><p><code>.wxml</code>——WXML模板文件</p></li><li><p><code>.wxss</code>——后缀的WXSS样式文件</p></li><li><p><code>.js</code>——后缀的JS脚本逻辑文件</p></li></ul><h2 id="项目的文件目录"><a href="#项目的文件目录" class="headerlink" title="项目的文件目录"></a>项目的文件目录</h2><ul><li>pages目录：所有的页面都放这里</li><li>utils目录：自定义的一些函数</li><li>app.js文件：入口js</li><li>app.json文件：项目整体配置</li><li>app.wxss文件：项目公共样式</li></ul><p>其中的一些注意事项：</p><ol><li>json文件中无法使用注释，试图添加注释将会引发报错。</li><li>json中是key-value，Key 值加双引号或者是把双引号写成单引号是常见错误，另外不能有注释。</li></ol><p>参考：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/code.html#JSON-%E9%85%8D%E7%BD%AE">微信文档</a></p><hr><h1 id="语法知识"><a href="#语法知识" class="headerlink" title="语法知识"></a>语法知识</h1><h2 id="检查微信小程序版本更新"><a href="#检查微信小程序版本更新" class="headerlink" title="检查微信小程序版本更新"></a><strong>检查微信小程序版本更新</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkUpdateVersion</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (wx.<span class="title function_">canIUse</span>(<span class="string">&#x27;getUpdateManager&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">const</span> updateManager = wx.<span class="title function_">getUpdateManager</span>()</span><br><span class="line">        updateManager.<span class="title function_">onCheckForUpdate</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">hasUpdate</span>) &#123;</span><br><span class="line">                updateManager.<span class="title function_">onUpdateReady</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">                        <span class="attr">title</span>: <span class="string">&#x27;更新提示&#x27;</span>,</span><br><span class="line">                        <span class="attr">content</span>: <span class="string">&#x27;新版本已经准备好，是否重启应用？&#x27;</span>,</span><br><span class="line">                        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (res.<span class="property">confirm</span>) &#123;</span><br><span class="line">                                updateManager.<span class="title function_">applyUpdate</span>()</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">                updateManager.<span class="title function_">onUpdateFailed</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">                        <span class="attr">title</span>: <span class="string">&#x27;已经有新版本喽~&#x27;</span>,</span><br><span class="line">                        <span class="attr">content</span>: <span class="string">&#x27;请您删除当前小程序，到微信”发现-小程序“页，重新搜索打开哦~&#x27;</span>,</span><br><span class="line">                        <span class="attr">showCancel</span>: <span class="literal">false</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;溫馨提示&#x27;</span>,</span><br><span class="line">            <span class="attr">content</span>: <span class="string">&#x27;当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。&#x27;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.<span class="property">confirm</span>) &#123;</span><br><span class="line">                    wx.<span class="title function_">updateWeChatApp</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp</title>
      <link href="/2022/04/11/uniapp/"/>
      <url>/2022/04/11/uniapp/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>文章记录uniapp知识点</p><hr><h1 id="uniapp项目目录"><a href="#uniapp项目目录" class="headerlink" title="uniapp项目目录"></a>uniapp项目目录</h1><ol><li><code>pages.json</code> 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生tabbar 等</li><li><code>manifest.json</code> 文件是应用的配置文件，用于指定应用的名称、图标、权限等。</li><li><code>App.vue</code>是我们的跟组件，所有页面都是在<code>App.vue</code>下进行切换的，是页面入口文件，可以调用应用的生命周期函数。</li><li><code>main.js</code>是我们的项目入口文件，主要作用是初始化<code>vue</code>实例并使用需要的插件。</li><li><code>uni.scss</code>文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格，<code>uni.scss</code>文件里预置了一批scss变量预置。</li><li><code>unpackage</code> 就是打包目录，在这里有各个平台的打包文件</li><li><code>pages</code> 所有的页面存放目录</li><li><code>static</code> 静态资源目录，例如图片等</li><li><code>components</code> 组件存放目录</li></ol><hr><h1 id="全局配置和页面配置"><a href="#全局配置和页面配置" class="headerlink" title="全局配置和页面配置"></a>全局配置和页面配置</h1><h2 id="全局配置globalStyle"><a href="#全局配置globalStyle" class="headerlink" title="全局配置globalStyle"></a>全局配置globalStyle</h2><p>下方为常用的配置   <a href="https://uniapp.dcloud.io/collocation/pages.html#globalstyle">文档地址</a></p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#F7F7F7</td><td>导航栏背景颜色（同状态栏背景色）</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题颜色及状态栏前景颜色，仅支持 black/white</td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏标题文字内容</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉 loading 的样式，仅支持 dark / light</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否开启下拉刷新，详见[页面生命周期]</td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位只支持px</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过globalStyle进行全局配置</span></span><br><span class="line"><span class="comment">// 注意：backgroundColor需要开启下拉才可以配置（下拉显示出来的窗口的背景色，微信小程序支持）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有h5、mp-weixin、app-plus等平台特定样式配置（具体用法还未使用）</span></span><br></pre></td></tr></table></figure><hr><h2 id="pages配置"><a href="#pages配置" class="headerlink" title="pages配置"></a>pages配置</h2><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>String</td><td>配置页面路径</td></tr><tr><td>style</td><td>Object</td><td>配置页面窗口表现，配置项参考</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages数组数组中第一项表示应用启动页</span></span><br><span class="line"><span class="comment">// 配置会覆盖全局，并且也有h5等特定样式配置</span></span><br></pre></td></tr></table></figure><hr><h2 id="配置tabbar"><a href="#配置tabbar" class="headerlink" title="配置tabbar"></a>配置tabbar</h2><p>注意：当设置 position 为 top 时，将不会显示 icon</p><p>tabBar 中的 list 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。</p><hr><h2 id="condition启动模式配置"><a href="#condition启动模式配置" class="headerlink" title="condition启动模式配置"></a>condition启动模式配置</h2><p>启动模式配置，仅开发期间生效，用于模拟直达页面的场景，如：小程序转发后，用户点击所打开的页面。</p><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>current</td><td>Number</td><td>是</td><td>当前激活的模式，list节点的索引值</td></tr><tr><td>list</td><td>Array</td><td>是</td><td>启动模式列表</td></tr></tbody></table><p><strong>list说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>String</td><td>是</td><td>启动模式名称</td></tr><tr><td>path</td><td>String</td><td>是</td><td>启动页面路径</td></tr><tr><td>query</td><td>String</td><td>否</td><td>启动参数，可在页面的onLoad函数里获得</td></tr></tbody></table><hr><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// text 组件相当于行内标签、在同一行显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;image&gt; 组件默认宽度 300px、高度 225px；</span></span><br><span class="line"><span class="comment">// src仅支持相对路径、绝对路径，支持 base64 码；</span></span><br><span class="line"><span class="comment">// 页面结构复杂，css样式太多的情况，使用 image 可能导致样式生效较慢，</span></span><br><span class="line"><span class="comment">// 出现 “闪一下” 的情况，此时设置 image&#123;will-change: transform&#125; ,可优化此问题。</span></span><br><span class="line"><span class="comment">// 图片mode属性剪切aspectFit、aspectFill常用</span></span><br></pre></td></tr></table></figure><hr><h1 id="uni-app的css样式"><a href="#uni-app的css样式" class="headerlink" title="uni-app的css样式"></a>uni-app的css样式</h1><ol><li>rpx 即响应式px，一种根据屏幕宽度自适应的动态单位。以750宽的屏幕为基准，750rpx恰好为屏幕宽度。屏幕变宽，rpx 实际显示效果会等比放大。</li><li>使用@import语句可以导入外联样式表，@import后跟需要导入的外联样式表的相对路径，用;表示语句结束</li><li>支持基本常用的选择器class、id、element等</li><li>在 uni-app 中不能使用 * 选择器。</li><li>page 相当于 body 节点</li><li>定义在 App.vue 中的样式为全局样式，作用于每一个页面。在 pages 目录下 的 vue 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 App.vue 中相同的选择器。</li><li>uni-app 支持使用字体图标，使用方式与普通 web 项目相同，需要注意以下几点：</li><li>字体文件小于 40kb，uni-app 会自动将其转化为 base64 格式；</li><li>字体文件大于等于 40kb， 需开发者自己转换，否则使用将不生效；</li><li>字体文件的引用路径推荐使用以 <del>@ 开头的绝对路径。 `@font-face {       font-family: test1-icon;       src: url(‘</del>@/static/iconfont.ttf’);    }`</li><li>如何使用scss或者less（编辑器直接安装插件）</li></ol><hr><h1 id="uni-app的生命周期"><a href="#uni-app的生命周期" class="headerlink" title="uni-app的生命周期"></a>uni-app的生命周期</h1><h2 id="应用的生命周期"><a href="#应用的生命周期" class="headerlink" title="应用的生命周期"></a>应用的生命周期</h2><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>onLaunch</td><td>当uni-app初始化完成时触发（全局只触发一次）</td></tr><tr><td>onShow</td><td>当uni-app启动，或从后台进入前台显示</td></tr><tr><td>onHide</td><td>当uni-app从前台进入后台</td></tr><tr><td>onError</td><td>当uni-app报错时触发</td></tr></tbody></table><h2 id="页面的生命周期"><a href="#页面的生命周期" class="headerlink" title="页面的生命周期"></a>页面的生命周期</h2><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>onLoad</td><td>监听页面加载，其参数为上个页面传递的数据，参数类型为Object（用于页面传参）</td></tr><tr><td>onShow</td><td>监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面</td></tr><tr><td>onReady</td><td>监听页面初次渲染完成。</td></tr><tr><td>onHide</td><td>监听页面隐藏</td></tr><tr><td>onUnload</td><td>监听页面卸载</td></tr></tbody></table><h2 id="开启下拉刷新"><a href="#开启下拉刷新" class="headerlink" title="开启下拉刷新"></a>开启下拉刷新</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages.json配置pages节点，在 style 选项中开启 enablePullDownRefresh</span></span><br><span class="line"><span class="comment">// 监听</span></span><br><span class="line"><span class="title function_">onPullDownRefresh</span> () &#123;&#125;</span><br><span class="line"><span class="comment">// 关闭下拉刷新</span></span><br><span class="line">uni.<span class="title function_">stopPullDownRefresh</span>()</span><br><span class="line"><span class="comment">// 通过调用uni.startPullDownRefresh方法来开启下拉刷新</span></span><br><span class="line">uni.<span class="title function_">startPullDownRefresh</span>()</span><br></pre></td></tr></table></figure><h2 id="上拉加载"><a href="#上拉加载" class="headerlink" title="上拉加载"></a>上拉加载</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages.json里pages的style中配置onReachBottomDistance可设置距离底部加载距离，默认为50px</span></span><br><span class="line"><span class="comment">// 通过onReachBottom监听到触底的行为</span></span><br><span class="line"><span class="title function_">onReachBottom</span> () &#123;&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="部分api"><a href="#部分api" class="headerlink" title="部分api"></a>部分api</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">uni.<span class="title function_">request</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本地缓存</span></span><br><span class="line">uni.<span class="title function_">setStorageSync</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预览图片</span></span><br><span class="line">uni.<span class="title function_">previewImage</span>(&#123;&#125;)</span><br></pre></td></tr></table></figure><hr><h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><p>条件编译是用特殊的注释作为标记，在编译时根据这些特殊的注释，将注释里面的代码编译到不同平台。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#ifdef：if defined 仅在某平台存在</span><br><span class="line">#ifndef：if not defined 除了某平台均存在</span><br><span class="line">%PLATFORM%：平台名称</span><br><span class="line">#endif 结尾</span><br></pre></td></tr></table></figure><p><strong>代码演示</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- #ifdef H5 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  h5页面会显示</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #endif --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #ifdef MP-WEIXIN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  微信小程序会显示</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #endif --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onLoad</span> () &#123;</span><br><span class="line">  <span class="comment">//#ifdef MP-WEIXIN</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;微信小程序&#x27;</span>)</span><br><span class="line">  <span class="comment">//#endif</span></span><br><span class="line">  <span class="comment">//#ifdef H5</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;h5页面&#x27;</span>)</span><br><span class="line">  <span class="comment">//#endif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* #ifdef H5 */</span></span><br><span class="line">view&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* #endif */</span></span><br><span class="line"><span class="comment">/* #ifdef MP-WEIXIN */</span></span><br><span class="line">view&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* #endif */</span></span><br></pre></td></tr></table></figure><h1 id="uni中的导航跳转"><a href="#uni中的导航跳转" class="headerlink" title="uni中的导航跳转"></a>uni中的导航跳转</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明式导航</span></span><br><span class="line">&lt;navigator url=<span class="string">&quot;/pages/about/about&quot;</span> hover-<span class="keyword">class</span>=<span class="string">&quot;navigator-hover&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;default&quot;</span>&gt;</span>跳转到关于页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/navigator&gt;</span><br><span class="line"><span class="comment">// 跳转到tabbar页面，添加open-type=&quot;switchTab&quot;属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编程式导航，url相对和绝对都可以</span></span><br><span class="line">uni.<span class="title function_">navigateTo</span>(&#123;&#125;)</span><br><span class="line">uni.<span class="title function_">switchTab</span>(&#123;&#125;)</span><br></pre></td></tr></table></figure><hr><h1 id="组件-1"><a href="#组件-1" class="headerlink" title="组件"></a>组件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件的生命周期和vue的一致</span></span><br><span class="line"><span class="comment">//uni-app的全局事件总线</span></span><br><span class="line">uni.$emit(<span class="string">&#x27;update&#x27;</span>,&#123;<span class="attr">msg</span>:<span class="string">&#x27;页面更新&#x27;</span>&#125;)</span><br><span class="line">uni.$on(<span class="string">&#x27;update&#x27;</span>,<span class="keyword">function</span>(<span class="params">data</span>)&#123;&#125;)</span><br></pre></td></tr></table></figure><hr><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><h2 id="封装request请求"><a href="#封装request请求" class="headerlink" title="封装request请求"></a>封装request请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装get请求</span></span><br><span class="line"><span class="keyword">const</span> baseUrl = <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">myRequest</span> = (<span class="params">options</span>)=&gt;&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">      uni.<span class="title function_">request</span>(&#123;</span><br><span class="line">         <span class="attr">method</span>: options.<span class="property">method</span>,</span><br><span class="line">         <span class="attr">data</span>: options.<span class="property">data</span>,</span><br><span class="line">         <span class="attr">url</span>: baseUrl+options.<span class="property">url</span>,</span><br><span class="line">         <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">status</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">                  <span class="attr">title</span>: <span class="string">&#x27;获取数据失败&#x27;</span></span><br><span class="line">               &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">resolve</span>(res)</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="title function_">fail</span>(<span class="params">err</span>) &#123;</span><br><span class="line">            uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">               <span class="attr">title</span>: <span class="string">&#x27;获取数据失败&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在main.js中导入并挂载到全局</span></span><br><span class="line"><span class="keyword">import</span> &#123; myRequest &#125; <span class="keyword">from</span> <span class="string">&#x27;./util/api.js&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myRequest</span> = myReques</span><br></pre></td></tr></table></figure><hr><h1 id="uniapp中vuex刷新数据保留"><a href="#uniapp中vuex刷新数据保留" class="headerlink" title="uniapp中vuex刷新数据保留"></a><strong>uniapp中vuex刷新数据保留</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方案1</span></span><br><span class="line"><span class="comment">//在页面刷新时将vuex里的信息保存到Storage里</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;beforeunload&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    uni.<span class="title function_">setStorageSync</span>(<span class="string">&quot;userComMsg&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//在页面加载时读取Storage里的状态信息</span></span><br><span class="line"><span class="keyword">if</span> (uni.<span class="title function_">getStorageSync</span>(<span class="string">&quot;userComMsg&quot;</span>)) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>,</span><br><span class="line">        <span class="title class_">JSON</span>.<span class="title function_">parse</span>(uni.<span class="title function_">getStorageSync</span>(<span class="string">&quot;userComMsg&quot;</span>))</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//使用后清除内存</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    uni.<span class="title function_">removeStorageSync</span>(<span class="string">&quot;userComMsg&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">300</span>);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// ---------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方案2</span></span><br><span class="line"><span class="comment">// 使用拦截器uni.addInterceptor(STRING, OBJECT)</span></span><br><span class="line"><span class="comment">// 页面白名单</span></span><br><span class="line"><span class="keyword">const</span> whiteList = [</span><br><span class="line">    <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/pages/login/index&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/pages/index/index&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/pages/category/index&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasPermission</span> (<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="comment">// 在白名单中或有token，直接跳转</span></span><br><span class="line">    <span class="keyword">if</span>(whiteList.<span class="title function_">indexOf</span>(url) !== -<span class="number">1</span> || store.<span class="property">getters</span>.<span class="property">access_token</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">uni.<span class="title function_">addInterceptor</span>(<span class="string">&#x27;navigateTo&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// 页面跳转前进行拦截, invoke根据返回值进行判断是否继续执行跳转</span></span><br><span class="line">    <span class="title function_">invoke</span> (e) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_">hasPermission</span>(e.<span class="property">url</span>))&#123;</span><br><span class="line">            uni.<span class="title function_">reLaunch</span>(&#123;</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;/pages/login/index&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">success</span> (e) &#123;</span><br><span class="line">        <span class="comment">// console.log(e)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">uni.<span class="title function_">addInterceptor</span>(<span class="string">&#x27;switchTab&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// tabbar页面跳转前进行拦截</span></span><br><span class="line">    <span class="title function_">invoke</span> (e) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_">hasPermission</span>(e.<span class="property">url</span>))&#123;</span><br><span class="line">            uni.<span class="title function_">reLaunch</span>(&#123;</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;/pages/login/index&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">success</span> (e) &#123;</span><br><span class="line">        <span class="comment">// console.log(e)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拦截uni.switchTab本身没有问题。微信小程序端点击tabbar的底层逻辑并不是触发uni.switchTab。</span></span><br><span class="line"><span class="comment">// 解决方案是在tabbar页面的页面生命周期onShow中处理。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方案3</span></span><br><span class="line"><span class="comment">// 在APP.vue的onLaunch中（每次刷新后就会触发）</span></span><br><span class="line"><span class="comment">// 获取token</span></span><br><span class="line">uni.<span class="title function_">getStorage</span>(&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;token&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;login&#x27;</span>, data)</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">userInfo</span>) <span class="keyword">return</span> <span class="comment">// 如果有用户信息则不用重新获取</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$u</span>.<span class="title function_">get</span>(<span class="string">&#x27;/api/user&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;userInfo&#x27;</span>, data) <span class="comment">// 设置用户信息</span></span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;logOut&#x27;</span>) <span class="comment">// 退出</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h1 id="原生插件的使用"><a href="#原生插件的使用" class="headerlink" title="原生插件的使用"></a><strong>原生插件的使用</strong></h1><ol><li>插件市场添加插件，注意购买的包名选择当前的项目</li><li>manifest.js配置APP原生插件，注意高德地图插件定位和maps可能会有冲突</li><li>选择运行-制作自定义基座-运行基座选择未自定义-运行</li><li>安装的证书获取：<a href="https://dev.dcloud.net.cn/">https://dev.dcloud.net.cn</a></li><li>选择对应的应用-应用证书股管理-获取证书</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识记录</title>
      <link href="/2022/03/17/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/03/17/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文是平时遇到的技术问题和学习到的新知识，还未有时间归类整理，放在该文章中记录。<br>都是比较重要的知识点！！！</p><hr><h3 id="i18国际化"><a href="#i18国际化" class="headerlink" title="i18国际化"></a>i18国际化</h3><p>一个Vue.js插件，提供了多语言解决方案 <a href="https://github.com/kazupon/vue-i18n">项目地址</a>（暂未使用过）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">npm install vue-i18n --save</span><br><span class="line"><span class="comment">// main.js使用</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueI18</span>n <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueI18</span>n);</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue-i18n插件需要在入口文件中进行多语言包配置，其实是一个对象每种语言对应一个key。</span></span><br><span class="line"><span class="keyword">const</span> messages = &#123;</span><br><span class="line">    <span class="attr">en</span>: &#123;</span><br><span class="line">        <span class="attr">message</span>: &#123;</span><br><span class="line">            <span class="attr">hello</span>: <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">cn</span>: &#123;</span><br><span class="line">        <span class="attr">message</span>: &#123;</span><br><span class="line">            <span class="attr">hello</span>: <span class="string">&#x27;你好，世界&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> <span class="title class_">VueI18</span>n(&#123;</span><br><span class="line">    <span class="attr">locale</span>: <span class="string">&#x27;en&#x27;</span>,       <span class="comment">// 设置当前语言</span></span><br><span class="line">    messages,           <span class="comment">// 设置语言包</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">router</span>: router,</span><br><span class="line">    <span class="attr">i18n</span>: i18n,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中使用</span></span><br><span class="line"><span class="comment">// index.vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; $t(&quot;message.hello&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h3 id="git拉去分支代码"><a href="#git拉去分支代码" class="headerlink" title="git拉去分支代码"></a>git拉去分支代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="comment">// 克隆项目</span></span><br><span class="line">git branch <span class="comment">// 查看分支</span></span><br><span class="line">git branch -a <span class="comment">// 查看全部分支</span></span><br><span class="line"><span class="comment">// 创建本地分支并与远程分支同步</span></span><br><span class="line">git checkout -b 本地分支 origin/远程分支</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：在新建分支的时候代码和主分支是一样的</span></span><br><span class="line"><span class="comment">// 新建仓库：git checkout -b dev</span></span><br><span class="line"><span class="comment">// 连接仓库：git push -u origin &quot;dev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只克隆分支 git clone -b dev 地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决冲突</span></span><br><span class="line"><span class="comment">// 先pull、如果失败则先提交本地代码</span></span><br><span class="line"><span class="comment">// git stash储存、git pull、git stash pop、解决冲突</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 本地新建分支只同步origin的分支（不克隆）</span></span><br><span class="line">git pull origin dev <span class="comment">// 连接好仓库后，先记得要pull</span></span><br><span class="line">git push -u origin dev <span class="comment">// 与git push origin dev 区别是加了-u下次就直接push不需要指定</span></span><br></pre></td></tr></table></figure><hr><h3 id="vue-admin的node-sass安装失败"><a href="#vue-admin的node-sass安装失败" class="headerlink" title="vue-admin的node-sass安装失败"></a>vue-admin的node-sass安装失败</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局安装</span></span><br><span class="line">npm install --registry=<span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org</span></span><br><span class="line"><span class="comment">// 先卸载node-sass，再使用cnpm</span></span><br><span class="line">npm uninstall node-sass</span><br><span class="line"><span class="comment">// 对比框架node-sass版本，复制node-sass的配置到package.json中</span></span><br><span class="line">cnpm install</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------</span></span><br><span class="line"><span class="comment">// 但是node-sass的版本有点变化</span></span><br><span class="line">npm i node-sass --sass_binary_site=<span class="attr">https</span>:<span class="comment">//npm.taobao.org/mirrors/node-sass</span></span><br><span class="line">npm install --registry=<span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure><hr><h3 id="export导入导出一体"><a href="#export导入导出一体" class="headerlink" title="export导入导出一体"></a>export导入导出一体</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line"><span class="comment">// b.js文件（统一导出）export from</span></span><br><span class="line"><span class="keyword">export</span> &#123;a <span class="keyword">as</span> c, b&#125; <span class="keyword">from</span> <span class="string">&#x27;./a.js&#x27;</span></span><br><span class="line"><span class="comment">// HTML文件中，注意HTML使用时&lt;script type=&quot;module&quot;&gt;&lt;script&gt;</span></span><br><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123;c, b&#125; <span class="keyword">from</span> <span class="string">&#x27;./b.js&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c, b) <span class="comment">// 1 2</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------</span></span><br><span class="line"><span class="comment">// 可能的config配置extensions: [&#x27;.js&#x27;, &#x27;.vue&#x27;, &#x27;.json&#x27;],</span></span><br><span class="line"><span class="comment">// 在import中省略后缀（注意json不能省略）</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> a &#125; <span class="keyword">from</span> <span class="string">&#x27;./a&#x27;</span></span><br><span class="line"><span class="comment">// 如果a是一个文件夹</span></span><br><span class="line"><span class="comment">// 则先找package.json、index.js、index.vue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果a不是</span></span><br><span class="line"><span class="comment">// 则先找同名json、js、vue</span></span><br></pre></td></tr></table></figure><hr><h3 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h3><hr><h3 id="使用弹力盒子是多个flex布局时会出现宽度不自适应"><a href="#使用弹力盒子是多个flex布局时会出现宽度不自适应" class="headerlink" title="使用弹力盒子是多个flex布局时会出现宽度不自适应"></a>使用弹力盒子是多个flex布局时会出现宽度不自适应</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">max-width</span>: <span class="number">1000px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line"><span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1000px</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="npm-和-yarn配置镜像源"><a href="#npm-和-yarn配置镜像源" class="headerlink" title="npm 和 yarn配置镜像源"></a>npm 和 yarn配置镜像源</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm(安装前三个就够用了)</span></span><br><span class="line">npm config set registry=<span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org</span></span><br><span class="line">npm config set sass_binary_site=<span class="attr">https</span>:<span class="comment">//npm.taobao.org/mirrors/node-sass/</span></span><br><span class="line">npm config set phantomjs_cdnurl=<span class="attr">https</span>:<span class="comment">//npm.taobao.org/mirrors/phantomjs/</span></span><br><span class="line">npm config set electron_mirror=<span class="attr">https</span>:<span class="comment">//npm.taobao.org/mirrors/electron/</span></span><br><span class="line"><span class="comment">// yarn(安装前三个就够用了)</span></span><br><span class="line">yarn config set registry <span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org --global</span></span><br><span class="line">yarn config set disturl <span class="attr">https</span>:<span class="comment">//npm.taobao.org/dist --global</span></span><br><span class="line">yarn config set sass_binary_site <span class="attr">https</span>:<span class="comment">//npm.taobao.org/mirrors/node-sass --global</span></span><br><span class="line">yarn config set electron_mirror <span class="attr">https</span>:<span class="comment">//npm.taobao.org/mirrors/electron/ --global</span></span><br><span class="line">yarn config set puppeteer_download_host <span class="attr">https</span>:<span class="comment">//npm.taobao.org/mirrors --global</span></span><br><span class="line">yarn config set chromedriver_cdnurl <span class="attr">https</span>:<span class="comment">//npm.taobao.org/mirrors/chromedriver --global</span></span><br><span class="line">yarn config set operadriver_cdnurl <span class="attr">https</span>:<span class="comment">//npm.taobao.org/mirrors/operadriver --global</span></span><br><span class="line">yarn config set phantomjs_cdnurl <span class="attr">https</span>:<span class="comment">//npm.taobao.org/mirrors/phantomjs --global</span></span><br><span class="line">yarn config set selenium_cdnurl <span class="attr">https</span>:<span class="comment">//npm.taobao.org/mirrors/selenium --global</span></span><br><span class="line">yarn config set node_inspector_cdnurl <span class="attr">https</span>:<span class="comment">//npm.taobao.org/mirrors/node-inspector --global</span></span><br></pre></td></tr></table></figure><hr><h3 id="yarn和npm命令对比"><a href="#yarn和npm命令对比" class="headerlink" title="yarn和npm命令对比"></a>yarn和npm命令对比</h3><table><thead><tr><th><strong>npm</strong></th><th><strong>yarn</strong></th></tr></thead><tbody><tr><td><code>npm install</code></td><td><code>yarn</code></td></tr><tr><td><code>npm install react --save</code></td><td><code>yarn add react</code></td></tr><tr><td><code>npm uninstall react --save</code></td><td><code>yarn remove react</code></td></tr><tr><td><code>npm install react --save-dev</code></td><td><code>yarn add react --dev</code></td></tr><tr><td><code>npm update --save</code></td><td><code>yarn upgrade</code></td></tr><tr><td><code>npm install -g @vue/cli</code></td><td><code>yarn global add @vue/cli</code></td></tr></tbody></table><hr><h3 id="vue的-set"><a href="#vue的-set" class="headerlink" title="vue的$set"></a>vue的$set</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下方法修改数组会触发视图更新</span></span><br><span class="line"><span class="comment">// push() pop() shift() unshift() splice() sort() reverse()</span></span><br><span class="line"><span class="comment">// vue侦听不到数组的某个值改变，或者对象属性的添加和删除，直接改变数组和对象会影响视图。</span></span><br><span class="line"><span class="comment">// 1.通过索引直接设置项 books[2] = 1</span></span><br><span class="line"><span class="comment">// 但是通过索引修改数组里面的对象值可以 books[2].count = 1</span></span><br><span class="line"><span class="comment">// 2.修改数组长度 books.length = 1</span></span><br><span class="line"><span class="comment">// 解决：使用splice可以解决，使用的$set</span></span><br></pre></td></tr></table></figure><hr><h3 id="原生的match方法"><a href="#原生的match方法" class="headerlink" title="原生的match方法"></a>原生的match方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// match方法在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</span></span><br><span class="line"><span class="comment">// 返回值为：存放匹配结果的数组</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;Hello world!&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="string">&quot;world&quot;</span>)) <span class="comment">// 数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="string">&quot;worlld&quot;</span>)) <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配合数组filter</span></span><br><span class="line"><span class="keyword">var</span> books = [<span class="string">&#x27;vue&#x27;</span>,<span class="string">&#x27;JavaScript&#x27;</span>]</span><br><span class="line">books = books.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item.<span class="title function_">match</span>(<span class="regexp">/JavaScript/</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(books) <span class="comment">// [&#x27;JavaScript&#x27;]</span></span><br></pre></td></tr></table></figure><hr><h3 id="vuecli使用webstorm中-快捷跳转不了"><a href="#vuecli使用webstorm中-快捷跳转不了" class="headerlink" title="vuecli使用webstorm中@快捷跳转不了"></a>vuecli使用webstorm中@快捷跳转不了</h3><ol><li>要将node_modules文件接触排除</li><li>设置先禁用webpack，（<code>webstorm -&gt; preference -&gt; language &amp; frameworks -&gt; javascript -&gt; webpack）</code>再次打开重启后在下方事件日志会弹出信任webpack的选项点击确认</li><li>手动选择webpack配置文件，选择<code>（node_modules -&gt; @vue -&gt; cli-service -&gt; webpack.config.js）</code></li><li>注意可能是没有配置@别名，在vue.config.js（但是新版不用，不是主要原因）</li></ol><hr><h3 id="组件的双向绑定"><a href="#组件的双向绑定" class="headerlink" title="组件的双向绑定"></a>组件的双向绑定</h3><p><strong>1.父子组件的自定义双向v-model</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="attr">model</span>:&#123;</span><br><span class="line">    <span class="attr">prop</span>:<span class="string">&#x27;msg&#x27;</span>, <span class="comment">// 指父组件设置 v-model 时，将变量值传给子组件的 msg</span></span><br><span class="line">    <span class="attr">event</span>:<span class="string">&#x27;parent-event&#x27;</span> <span class="comment">// 指父组件监听 parent-event 事件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">props</span>:&#123;</span><br><span class="line">        <span class="attr">msg</span>:<span class="title class_">String</span> <span class="comment">// 此处必须定义和model的prop相同的props，因为v-model会传值给子组件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> newMsg = <span class="string">&#x27;新值&#x27;</span></span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;parent-event&#x27;</span>, newMsg);</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父组件只需要使用v-model即可</span></span><br><span class="line">&lt;children v-model=<span class="string">&quot;parentMsg&quot;</span>&gt;&lt;/children&gt;</span><br></pre></td></tr></table></figure><p><strong>2.父子组件的自定义多个双向值.sync</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">&lt;template&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>&lt;/template&gt;</span><br><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">msg</span>:<span class="title class_">String</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 通过$emit，固定字段update:prop名</span></span><br><span class="line">    <span class="keyword">let</span> newMsg = <span class="string">&#x27;新值&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.$emit(<span class="string">&#x27;update:msg&#x27;</span>, newMsg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父组件，需在平时常用的单向传值上加上.sync修饰符</span></span><br><span class="line">&lt;children :msg.<span class="property">sync</span>=<span class="string">&quot;parentMsg&quot;</span>&gt;&lt;/children&gt;</span><br><span class="line"><span class="comment">// &lt;children :msg=&quot;parentMsg&quot; @update:msg=&quot;parentMsg = $event&quot;&gt;&lt;/children&gt;</span></span><br><span class="line"><span class="comment">// 全部对象简化写法</span></span><br><span class="line"><span class="comment">// &lt;children :.sync=&quot;obj&quot;&gt;&lt;/children&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="package-js介绍"><a href="#package-js介绍" class="headerlink" title="package.js介绍"></a>package.js介绍</h3><blockquote><p>参考：<a href="https://juejin.cn/post/6987179395714646024">https://juejin.cn/post/6987179395714646024</a></p></blockquote><p>package.json文件是一个JSON对象</p><table><thead><tr><th>写法</th><th>版本说明</th></tr></thead><tbody><tr><td>固定版本（1.1.1）</td><td>只安装指定版本</td></tr><tr><td>波浪号（~1.1.1）</td><td>安装1.1.x最新版本</td></tr><tr><td>插入号（ˆ1.1.1）</td><td>安装1.x.x的最新版本</td></tr></tbody></table><p>注意：当大版本号为0时，插入号的行为与波浪号相同</p><blockquote><p>处于开发阶段，次要版本号变动可能带来程序的不兼容。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 项目的dependencies全部更新到最新的版本  --还暂未使用，待确认</span></span><br><span class="line">npm install -g npm-check-updates <span class="comment">// 安装</span></span><br><span class="line">ncu <span class="comment">// 检查package.json中dependencies的最新版本</span></span><br><span class="line">ncu -u <span class="comment">// 更新devDependencies到新版本</span></span><br><span class="line">ncu -a <span class="comment">//更新全部dependencies到最新版本</span></span><br></pre></td></tr></table></figure><hr><h3 id="node中的path的方法"><a href="#node中的path的方法" class="headerlink" title="node中的path的方法"></a>node中的path的方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// path.join()方法</span></span><br><span class="line"><span class="comment">// 将多个参数字符串合并成一个路径字符串</span></span><br><span class="line">path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;src&#x27;</span>) <span class="comment">// 如__dirname为F:/moxie，则F:/moxie/src</span></span><br><span class="line"><span class="comment">// path.resolve()方法</span></span><br><span class="line"><span class="comment">// 是以程序为根目录，作为起点，根据参数解析出一个绝对路径</span></span><br><span class="line">path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;/src&quot;</span>) <span class="comment">// /相当于根目录，没有/则和join相同（..与../就是返回）</span></span><br><span class="line"><span class="comment">// 如__dirname为F:/moxie，则F:/src</span></span><br></pre></td></tr></table></figure><hr><h3 id="props数据验证"><a href="#props数据验证" class="headerlink" title="props数据验证"></a>props数据验证</h3><p>采用对象写法数据验证，比如某个数据必须是数字类型，如果传入字符串，就会在控制台弹出警告。</p><p>type也可以是一个自定义构造器，使用instanceof检测。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="comment">//必须是数字类型</span></span><br><span class="line">        <span class="attr">propA</span>: <span class="title class_">Number</span>,</span><br><span class="line">        <span class="comment">//必须是字符串或数字类型</span></span><br><span class="line">        <span class="attr">propB</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>],</span><br><span class="line">        <span class="comment">// 布尔值，如果没有定义，默认值就是true</span></span><br><span class="line">        <span class="attr">propC</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">            <span class="attr">default</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//数字，而且是必传</span></span><br><span class="line">        <span class="attr">propD</span>: &#123;</span><br><span class="line">             <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">             <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 如果是数组或对象，默认值必须是一个函数来返回</span></span><br><span class="line">        <span class="attr">propE</span>: &#123;</span><br><span class="line">             <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">             <span class="attr">default</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                 <span class="keyword">return</span> [];</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 自定义一个验证函数</span></span><br><span class="line">        <span class="attr">propF</span>: &#123;</span><br><span class="line">              <span class="attr">validator</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> value &gt; <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);   </span><br></pre></td></tr></table></figure><hr><h3 id="jquery的jsonp的使用"><a href="#jquery的jsonp的使用" class="headerlink" title="jquery的jsonp的使用"></a>jquery的jsonp的使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;http://xxx.com?id=xxx&quot;</span> <span class="comment">// 请求的的地址（其后面可以带参数）</span></span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>, <span class="comment">// 当然参数可以省略</span></span><br><span class="line">    <span class="attr">data</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;moxie&#x27;</span>&#125;, <span class="comment">// 传给服务端的数据，被加载url?的后面</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&quot;jsonp&quot;</span>,  <span class="comment">// 预期服务器返回的数据类型</span></span><br><span class="line">    <span class="attr">jsonpCallback</span>: <span class="string">&#x27;globalCallback&#x27;</span>, <span class="comment">// 全局JSONP回调函数名</span></span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123; <span class="comment">// 请求成功之后调用</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">err</span>) &#123; <span class="comment">// 请求出错时调用</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">complete</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123; <span class="comment">// 请求完成时调用，无论请求失败或成功。</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 全局回调函数的使用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">globalCallback</span>(<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="具名插槽和作用域插槽一起使用"><a href="#具名插槽和作用域插槽一起使用" class="headerlink" title="具名插槽和作用域插槽一起使用"></a>具名插槽和作用域插槽一起使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 子组件的插槽中: msg是要传递给父组件的值 name是该插槽的名字--&gt; </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">:msg</span>=<span class="string">&quot;message&quot;</span> <span class="attr">name</span>=<span class="string">&quot;child&quot;</span>&gt;</span>默认要显示的内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件child组件标签的template标签上: --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 这里如果直接写成v-slot=&#x27;scope&#x27;则不会生效 页面不会展示数据!--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:child</span>=<span class="string">&quot;&#123; msg &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h3 id="表格的相关样式"><a href="#表格的相关样式" class="headerlink" title="表格的相关样式"></a>表格的相关样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">border-spacing</span>: <span class="number">0</span>; <span class="comment">/**设置相邻单元格的边框间的距离**/</span></span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse; <span class="comment">/**边框会合并为一个单一的边框**/</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#5a5a5a</span>;</span><br><span class="line">  <span class="attribute">table-layout</span>: fixed; <span class="comment">/**固定table表格**/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">thead</span> &#123; <span class="attribute">background-color</span>: <span class="number">#d9edf7</span>; &#125;</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">td</span>,<span class="selector-tag">table</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;<span class="comment">/**溢出隐藏**/</span></span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;<span class="comment">/**不换行**/</span></span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;<span class="comment">/**溢出不可见部分使用...代替**/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">table</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">caption</span>&gt;我是表格标题&lt;/<span class="selector-tag">caption</span>&gt;</span><br><span class="line">   &lt;!--表头--&gt;</span><br><span class="line">    &lt;<span class="selector-tag">thead</span>&gt;</span><br><span class="line">      &lt;<span class="selector-tag">tr</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">th</span>&gt;姓名&lt;/<span class="selector-tag">th</span>&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/<span class="selector-tag">tr</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">thead</span>&gt;</span><br><span class="line">    &lt;!--表内容--&gt;</span><br><span class="line">    &lt;<span class="selector-tag">tbody</span>&gt;</span><br><span class="line">      &lt;<span class="selector-tag">tr</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">td</span>&gt;测试&lt;/<span class="selector-tag">td</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &lt;/<span class="selector-tag">tr</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">tbody</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">table</span>&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="禁止生成package-lock-json文件"><a href="#禁止生成package-lock-json文件" class="headerlink" title="禁止生成package-lock.json文件"></a>禁止生成package-lock.json文件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set package-lock <span class="literal">false</span></span><br><span class="line">npm config set package-lock <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><h1 id="element-ui的表格格式化"><a href="#element-ui的表格格式化" class="headerlink" title="element ui的表格格式化"></a>element ui的表格格式化</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--封装列时的格式化数据（formatter）--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;地址&quot;</span> <span class="attr">:formatter</span>=<span class="string">&quot;formatter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="title function_">formatter</span>(<span class="params">row, column</span>) &#123; </span><br><span class="line">  <span class="keyword">if</span>(column.<span class="property">property</span>===<span class="string">&#x27;address&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;处理后的值&#x27;</span>  </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="作用域插槽案例"><a href="#作用域插槽案例" class="headerlink" title="作用域插槽案例"></a>作用域插槽案例</h1><p>作用：复用模板替换已渲染元素。</p><p>如：列表组件中，允许组件自定义应该如何渲染列表每一项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">my-list</span> <span class="attr">:data</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:book</span>=<span class="string">&quot;props&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; props.bookName &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">my-list</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-list&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> [];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">&#x27;&lt;ul&gt;&lt;slot name=&quot;book&quot; v-for=&quot;book in books&quot; :book-name=&quot;book.name&quot;&gt;&lt;/slot&gt;&lt;/ul&gt;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">books</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123; <span class="attr">name</span>: <span class="string">&#x27;《Vue.js实战》&#x27;</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123; <span class="attr">name</span>: <span class="string">&#x27;《JavaScript高级程序设计》&#x27;</span> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="递归组件"><a href="#递归组件" class="headerlink" title="递归组件"></a>递归组件</h1><p>组件在它的模板内可以递归地调用自己，只要给组件设置<code>name</code>的选项就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:count</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Child&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123; <span class="title class_">Child</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="comment">// 子组件中需要给定name属性，自己调用自己（注意需要给定结束条件）</span></span><br><span class="line"><span class="comment">// 子组件并没有修改porps的count值，而是每次递归后组件传的count都是不一样的</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Child</span> <span class="attr">v-if</span>=<span class="string">&quot;count&lt;3&quot;</span> <span class="attr">:count</span>=<span class="string">&quot;count+1&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;Child&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">count</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="内联模板（vue3移除）"><a href="#内联模板（vue3移除）" class="headerlink" title="内联模板（vue3移除）"></a>内联模板（vue3移除）</h1><p>缺点：作用域比较难理解，建议不要轻易使用内联模板。</p><p>组件标签使用inline-template特性，组件就会把它的内容当作模板。</p><p>父组件里面写内容可以读取到父组件与子组件的数据（如果同名，优先使用子组件的数据）</p><hr><h1 id="vue项目的断点调试"><a href="#vue项目的断点调试" class="headerlink" title="vue项目的断点调试"></a>vue项目的断点调试</h1><p>使用浏览器<code>devtool</code>中的<code>Sources</code>下，左侧的<code>webpack:/</code>/目录中，可以找到对应的代码。</p><blockquote><p> 重要：在<code>js</code>代码中直接输入<code>debugger</code>浏览器则会直接运行到这里进行断点。</p></blockquote><hr><h1 id="webstorm快捷键"><a href="#webstorm快捷键" class="headerlink" title="webstorm快捷键"></a>webstorm快捷键</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">下面是<span class="title class_">Webstorm</span>的一些常用快捷键：</span><br><span class="line">单行代码注释：<span class="title class_">Ctrl</span>+/ </span><br><span class="line">多行注释：<span class="title class_">Ctrl</span>+<span class="title class_">Shift</span>+/</span><br><span class="line">格式化代码：<span class="title class_">Ctrl</span>+<span class="title class_">Alt</span>+L </span><br><span class="line">复制行：<span class="title class_">Ctrl</span>+D </span><br><span class="line">删除行：<span class="title class_">Ctrl</span>+Y</span><br><span class="line">替换文本：<span class="title class_">Ctrl</span>+R </span><br><span class="line">查找文本：<span class="title class_">Ctrl</span>+F</span><br><span class="line">代码折叠：<span class="title class_">Ctrl</span> + 或者<span class="title class_">Ctrl</span> <span class="title class_">Shift</span> +</span><br><span class="line">代码展开：<span class="title class_">Ctrl</span> - 或者 <span class="title class_">Ctrl</span> <span class="title class_">Shift</span> -</span><br><span class="line">代码右移：<span class="title class_">Tab</span>键（快捷生成代码）</span><br><span class="line">代码左移：<span class="title class_">Shift</span>+<span class="variable constant_">TAB</span>键</span><br><span class="line">代码上移：<span class="title class_">Shift</span>+<span class="title class_">Alt</span>+方向键上</span><br><span class="line">代码下移：<span class="title class_">Shift</span>+<span class="title class_">Alt</span>+方向键下</span><br><span class="line">长按<span class="title class_">Alt</span>+鼠标点击不同处再放掉<span class="title class_">Alt</span>，可以同时编辑多处</span><br></pre></td></tr></table></figure><hr><h1 id="正则表达式中"><a href="#正则表达式中" class="headerlink" title="正则表达式中"></a>正则表达式中</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配js文件\.（不加的话就是匹配任意一个开头的字符）</span></span><br><span class="line"><span class="keyword">const</span> check1 = <span class="regexp">/.js$/</span></span><br><span class="line"><span class="keyword">const</span> check2 = <span class="regexp">/\.js$/</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;ajs&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(check1.<span class="title function_">test</span>(str)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(check2.<span class="title function_">test</span>(str)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><h1 id="vue的Render函数"><a href="#vue的Render函数" class="headerlink" title="vue的Render函数"></a>vue的Render函数</h1><blockquote><p><a href="https://juejin.cn/post/6844903973502058504#heading-20">掘金Render</a></p></blockquote><p>Virtual Dom并不是真正意义上的DOM，而是一个轻量级的JavaScript对象，在状态发生变化时，Virtual Dom会进行Diff运算，来更新只需要被替换的DOM，而不是全部重绘。</p><p>Vue的Render函数和React的一样，也就是jsx，Render函数创建HTML，通过createElement参数来创建Virtual Dom，结构精简。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Render函数构建不同的&lt;h1&gt;~&lt;h6&gt;标签</span></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">anchored-heading</span> <span class="attr">:level</span>=<span class="string">&quot;1&quot;</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">anchored-heading</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;anchored-heading&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="keyword">function</span> (<span class="params">createElement</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">createElement</span>(</span><br><span class="line">            <span class="string">&#x27;h&#x27;</span> + <span class="variable language_">this</span>.<span class="property">level</span>,   <span class="comment">// 标签名称</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">default</span> <span class="comment">// 子节点数组</span></span><br><span class="line">        )</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">level</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">            <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="createElement参数"><a href="#createElement参数" class="headerlink" title="createElement参数"></a>createElement参数</h3><p>第1个参数: { String | Object | Function }—-（示例如下）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;custom-element&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params">createElement</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;hello world!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// Object</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;custom-element&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params">createElement</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">createElement</span>(&#123;</span><br><span class="line">          <span class="attr">template</span>: <span class="string">`&lt;div&gt;hello world!&lt;/div&gt;`</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// Function</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;custom-element&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params">createElement</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">elFn</span> = (<span class="params"></span>) =&gt; (&#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;hello world!&lt;/div&gt;`</span> &#125;)</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">createElement</span>(<span class="title function_">elFn</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h1 id="vue插件"><a href="#vue插件" class="headerlink" title="vue插件"></a>vue插件</h1><p>注册插件需要install方法，第一个参数是Vue构造器，第二个参数是一个可选的选项对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">MyPlugin</span>.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 全局注册组件（指令等功能资源类似）</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;component-name&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">//组件内容</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//添加实例方法</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$Notice</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 逻辑．..</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加全局方法或属性</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property">globalMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 逻辑．..</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加全局混合</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">        <span class="attr">mounted</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 逻辑．..</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ----------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过Vue.use()来使用插件：</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">MyPlugin</span>)</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">MyPlugin</span>, &#123;</span><br><span class="line">    <span class="comment">// 参数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h1 id="vue中央处理事件"><a href="#vue中央处理事件" class="headerlink" title="vue中央处理事件"></a>vue中央处理事件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建vue-bus.js文件</span></span><br><span class="line"><span class="keyword">const</span> install = <span class="keyword">function</span> (<span class="params">Vue</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Bus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">methods</span>: &#123;</span><br><span class="line">            <span class="title function_">emit</span> (event, ...args) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.$emit(event, ...args);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">on</span> (event, callback) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.$on(event, callback);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">off</span> (event, callback) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.$off(event, callback);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="title class_">Bus</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;install&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js，部分代码省略</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueBus</span> <span class="keyword">from</span> <span class="string">&#x27;./vue-bus&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueBus</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用A组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;&#123; number &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleAddRandom&quot;</span>&gt;</span>随机增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handleAddRandom</span> () &#123;</span><br><span class="line">    <span class="comment">// 随机获取1～100中的数</span></span><br><span class="line">    <span class="keyword">const</span> num = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="property">random</span> () * <span class="number">100</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.<span class="title function_">emit</span>(<span class="string">&#x27;add&#x27;</span>, num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B组件使用并且监听A组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>随机增加：</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Counter</span> <span class="attr">:number</span>=<span class="string">&quot;number&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Counter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Counter</span> <span class="keyword">from</span> <span class="string">&#x27;./counter.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="title class_">Counter</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">handleAddRandom</span>(<span class="params">num</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">number</span> += num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">number</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$bus</span>.<span class="title function_">on</span>(<span class="string">&#x27;add&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleAddRandom</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$bus</span>.<span class="title function_">off</span>(<span class="string">&#x27;add&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleAddRandom</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 需要注意：</span></span><br><span class="line"><span class="comment">// 1. $bus.on应该在created钩子内使用，</span></span><br><span class="line"><span class="comment">//    如果在mounted使用可能接收不到其他组件来自created钩子内发出的事件。</span></span><br><span class="line"><span class="comment">// 2. 使用了$bus.on，在beforeDestroy钩子里应该再使用$bus.off解除，</span></span><br><span class="line"><span class="comment">//    因为组件销毁后，就没必要把监听的句柄储存在vue-bus里了。</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 前端知识记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习路线</title>
      <link href="/2022/03/17/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/2022/03/17/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>博主的前端视频学习路线</p><hr><ul><li><p><strong>黑马程序员pink老师前端入门教程，零基础必看的h5(html5)+css3+移动端前端视频教程、</strong></p></li><li><p><strong>JavaScript基础语法-dom-bom-js-es6新语法-jQuery-数据可视化echarts黑马pink老师前端入门基础视频教程(500多集)持续</strong></p></li><li><p><strong>2019全新javaScript进阶面向对象ES6</strong></p></li><li><p><strong>尚硅谷Web前端ES6教程，涵盖ES6-ES11</strong></p></li><li><p><strong>尚硅谷Web前端Promise教程从入门到精通</strong></p></li><li><p><strong>【尚硅谷】3小时Ajax入门到精通</strong></p></li><li><p><strong>黑马程序员Node.js全套入门教程，nodejs最新教程含es6模块化+npm+express+webpack+promise等_Nodejs实战案例详解</strong></p></li><li><p><strong>尚硅谷JS模块化教程(js模块化精讲含commonjs、AMD、ES6、CMD规范)</strong></p></li><li><p><strong>尚硅谷Vue2.0+Vue3.0全套教程丨vuejs从入门到精通</strong></p></li><li><p><strong>尚硅谷VUE项目实战，前端项目-尚品汇(大型\重磅)</strong></p></li><li><p><strong>Uni-App从入门到实战-黑马程序员杭州校区出品</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue.js书籍</title>
      <link href="/2022/03/17/vue-js%E4%B9%A6%E7%B1%8D/"/>
      <url>/2022/03/17/vue-js%E4%B9%A6%E7%B1%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文记录了阅读的<code>vue</code>的相关书籍</p><hr><h1 id="vue-js实战–书籍记录"><a href="#vue-js实战–书籍记录" class="headerlink" title="vue.js实战–书籍记录"></a>vue.js实战–书籍记录</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用$el访问元素节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$el</span>)</span><br></pre></td></tr></table></figure><p>使用v-html的时候注意XSS攻击</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v-pre指令可以跳过&#123;&#123;&#125;&#125;编译</span></span><br><span class="line">&lt;span v-pre&gt;&#123;&#123; 这里的内容是不会被编译的&#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>过滤器可以接收参数，默认第一个参数是需要过滤的数值</p><p>一是计算属性可以依赖其他计算属性；二是计算属性不仅可以依赖当前Vue实例的数据，还可以依赖其他实例的数据</p><p>class的表达式过长或逻辑复杂时，可以绑定一个计算属性。</p><p>v-once也是一个不需要表达式的指令，作用是定义它的元素或组件只渲染一次，包括元素或组件的所有子节点。首次渲染后，不再随数据的变化重新渲染，将被视为静态内容，v-once在业务中也很少使用，当你需要进一步优化性能时，可能会用到。</p><p>v-show不能在<code>template</code>上使用。</p><p>v-for遍历对象属性时，有两个可选参数，分别是键名和索引；v-for还可以迭代整数。</p><p>访问slot方法，使用$slots，如在组件中<code>this.$slots.default</code>访问到默认的slot节点。$slots在业务中几乎用不到，在用render函数创建组件时会比较有用。</p><h3 id="书评"><a href="#书评" class="headerlink" title="书评"></a>书评</h3><blockquote><p> 书评：总的来说都是vue文档上的，可以认为就是代码一扔上去自己理解。前面的例子很多都是没有基于vue cli里的vue文件，而是js文件里直接讲解，与开发中用的没多大关系。获得的东西不多，不够好吧，不过还是能获得到一些未接触的知识点。新手不是很推荐。（知识点绝大部分记录再前端知识记录这篇文章里面）</p></blockquote><hr><h1 id="深入浅出vue-js"><a href="#深入浅出vue-js" class="headerlink" title="深入浅出vue.js"></a>深入浅出vue.js</h1>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2022/03/02/webpack/"/>
      <url>/2022/03/02/webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>webpack</code>的相关内容</p><h1 id="vue-cli中的vue-config-js配置"><a href="#vue-cli中的vue-config-js配置" class="headerlink" title="vue cli中的vue.config.js配置"></a>vue cli中的vue.config.js配置</h1><blockquote><p>参考：<a href="https://cli.vuejs.org/zh/config/">https://cli.vuejs.org/zh/config/</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启严格模式</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义路径</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">// resolve函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">dir</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> path.<span class="title function_">join</span>(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出一个包含了选项的对象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 下面就是各种选项...    </span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="attr">publicPath</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span></span><br><span class="line">    ? <span class="string">&#x27;./&#x27;</span></span><br><span class="line">    : <span class="string">&#x27;/&#x27;</span>, <span class="comment">// 部署应用时的URL，通过三元配置dev和prod环境。</span></span><br><span class="line">           <span class="comment">// 注意：prop的绝对路径&#x27;/prop/&#x27;，如：https://moxie.xyz/prop/</span></span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&#x27;dist&#x27;</span>, <span class="comment">// build时输出的文件目录，</span></span><br><span class="line">                     <span class="comment">// 目标目录的内容在构建之前会被清除，构建时传入--no-clean可关闭该行为</span></span><br><span class="line">  <span class="attr">assetsDir</span>: <span class="string">&#x27;static&#x27;</span>, <span class="comment">// 相对于outputDir放置静态文件夹目录(js、css、img、fonts)</span></span><br><span class="line">  <span class="attr">indexPath</span>: <span class="string">&#x27;index.html&#x27;</span>, <span class="comment">// 生成的index.html 的输出路径</span></span><br><span class="line">  <span class="attr">filenameHashing</span>: <span class="literal">true</span>, <span class="comment">// 生成的静态资源在它们的文件名中包含了 hash 以便更好的控制缓存</span></span><br><span class="line">  <span class="attr">lintOnSave</span>: <span class="literal">false</span>, <span class="comment">// eslint-loader是否在保存的时候检查</span></span><br><span class="line">                     <span class="comment">// 配置参数 boolean | &#x27;warning&#x27; | &#x27;default&#x27; | &#x27;error&#x27;</span></span><br><span class="line">                     <span class="comment">// process.env.NODE_ENV !== &#x27;production&#x27;</span></span><br><span class="line">  <span class="attr">productionSourceMap</span>: <span class="literal">false</span>, <span class="comment">// 生产环境是否要生成sourceMap</span></span><br><span class="line">  <span class="comment">// transpileDependencies: [], // 默认babel-loader忽略所有node_modules中的文件</span></span><br><span class="line">  <span class="comment">// dev环境下的相关配置</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8080</span>, <span class="comment">// 开发运行时的端口</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">false</span>, <span class="comment">// 运行时是否直接打开浏览器</span></span><br><span class="line">    <span class="attr">https</span>: <span class="literal">false</span>, <span class="comment">// 是否启用https</span></span><br><span class="line">    <span class="attr">host</span>: ip, <span class="comment">// 开发运行时域名，在同一个局域网下可访问。如：http://ip:port/...</span></span><br><span class="line">              <span class="comment">// 使用0.0.0.0，在同一个局域网下可以访问到我的项目（默认就是这个好像）</span></span><br><span class="line">              <span class="comment">// 手机访问需要cmd中ipconfig的无线网IPv4地址</span></span><br><span class="line">    <span class="attr">overlay</span>: &#123; <span class="comment">// 浏览器overlay同时显示警告和错误</span></span><br><span class="line">      <span class="attr">warnings</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">errors</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">proxy</span>: &#123; <span class="comment">// 增加一个api的前缀（proxyTable代理服务器）</span></span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>, <span class="comment">// 后台接口域名</span></span><br><span class="line">        <span class="attr">ws</span>: <span class="literal">true</span>, <span class="comment">// 如果要代理 websocket，配置这个参数</span></span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span>, <span class="comment">// 如果是https接口，需要配置这个参数</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 是否跨域</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span> <span class="comment">// 用&#x27;/api&#x27;代替target里面的地址</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// webpack的配置</span></span><br><span class="line">  <span class="comment">// 使用configureWebpack调整webpack配置，如别名配置。</span></span><br><span class="line">  <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;网页标题&#x27;</span>, <span class="comment">// 在index.html中的&lt;title&gt;&lt;%= webpackConfig.name %&gt;&lt;/title&gt;</span></span><br><span class="line">    <span class="comment">// 一般在beforeEach设置网页标题document.title = &#x27;xxx&#x27;</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">      <span class="attr">alias</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;@&#x27;</span>: <span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 对内部的webpack配置进行更细粒度的修改</span></span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;&#125;</span><br><span class="line">  <span class="comment">// 其他配置暂未使用过</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h1><p><code>module</code>的<code>exports</code>属性<code>（module.exports）</code>是对外的接口。<code>require</code>方法用于加载模块。</p><hr><h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><p><code>webpack --config</code>可以配置<code>webpack</code>的加载那个文件</p><h3 id="webpack项目的创建"><a href="#webpack项目的创建" class="headerlink" title="webpack项目的创建"></a>webpack项目的创建</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">npm init <span class="comment">// 初始化一个项目</span></span><br><span class="line">npm install webpack --save--dev <span class="comment">// 安装webpack</span></span><br><span class="line">npm install webpack-dev-server --save-dev <span class="comment">// 安装webpack-server启动服务</span></span><br><span class="line"><span class="comment">// 新建一个webpack.config.js文件</span></span><br><span class="line"><span class="comment">// webpack的配置就是在这个文件中配置（webpack可以理解为；一个js文件而已）</span></span><br><span class="line"><span class="keyword">var</span> config = &#123;&#125;</span><br><span class="line"><span class="comment">// 还未安装支持ES6的编译插件，因此不能直接使用ES6的语法，否则会报错。</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = config <span class="comment">// 相当于export default config</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// package.js新增</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --open --config webpack.config.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// npm run dev会执行webpack-dev-server --open--configwebpack.config.js命令。</span></span><br><span class="line"><span class="comment">// --config指向webpack-dev-server读取的配置文件路径，</span></span><br><span class="line"><span class="comment">// --open会在执行命令时自动在浏览器打开页面，默认地址是127.0.0.1:8080（localhost:8080）</span></span><br><span class="line"><span class="comment">// 配置参考：host（主机）和prot（端口）</span></span><br><span class="line"><span class="comment">// webpack-dev-server --host 172.172.172.1--port 8888--open--config webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置config，必须要配置入口entry与出口output</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">    <span class="attr">entry</span>: &#123; <span class="comment">// 入口寻找依赖</span></span><br><span class="line">        <span class="attr">main</span>: <span class="string">&#x27;./main&#x27;</span> <span class="comment">// 新建main.js入口文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>:&#123; <span class="comment">// 出口配置生成编译后的文件存储位置和文件名</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;dist&#x27;</span>), </span><br><span class="line">        <span class="attr">publicPath</span>: <span class="string">&#x27;/dist&#x27;</span>,</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = config</span><br><span class="line"><span class="comment">// 新建一个index.html，引入编译后的main.js（引入没编译的main.js暂未测试）</span></span><br><span class="line">npm run dev <span class="comment">// 即可运行</span></span><br><span class="line"></span><br><span class="line">npm install css-loader --save-dev</span><br><span class="line">npm install style-loader --save-dev</span><br><span class="line"><span class="comment">// 引入Loader</span></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">               <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 只要是.css结尾的文件，就会先使用loader加载再之后打包</span></span><br><span class="line"><span class="comment">// 新建css，main.js引用就会生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript动态创建&lt;style&gt;标签来写入样式，样式代码编译在main.js里太占体积且不能做缓存。</span></span><br><span class="line"><span class="comment">// 使用插件（Plugins）解决，生成main.css后在index.html通过&lt;link&gt;加载。</span></span><br><span class="line">npm install extract-text-webpack-plugin --save-dev</span><br><span class="line"><span class="comment">// 导入插件（config.js）</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ExtractTextPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;extract-text-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">               <span class="attr">use</span>: <span class="title class_">ExtractTextPlugin</span>.<span class="title function_">extract</span>(&#123;</span><br><span class="line">                   <span class="attr">use</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                   <span class="attr">fallback</span>: <span class="string">&#x27;style-loader&#x27;</span></span><br><span class="line">               &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="comment">// 重命名提取后的css文件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ExtractTextPlugin</span>(<span class="string">&quot;main.css&quot;</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="vue-loader"><a href="#vue-loader" class="headerlink" title="vue-loader"></a>vue-loader</h1><p>使用<code>.vue</code>文件需要先安装vue-loader、vue-style-loader等加载器并做配置。因为要使用ES6语法，还需要安装babel和babel-loader等加载器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">npm install --save vue</span><br><span class="line">npm install --save-dev vue-loader</span><br><span class="line">npm install --save-dev vue-style-loader</span><br><span class="line">npm install --save-dev vue-template-compiler</span><br><span class="line">npm install --save-dev vue-hot-reload-api</span><br><span class="line">npm install --save-dev babel</span><br><span class="line">npm install --save-dev babel-loader</span><br><span class="line">npm install --save-dev babel-core</span><br><span class="line">npm install --save-dev babel-plugin-transform-runtime</span><br><span class="line">npm install --save-dev babel-preset-es2015</span><br><span class="line">npm install --save-dev babel-runtime</span><br><span class="line"><span class="comment">// 配置webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">ExtractTextPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;extract-text-webpack-plugin&#x27;</span>);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">               <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span>,</span><br><span class="line">               <span class="attr">options</span>: &#123;</span><br><span class="line">                   <span class="attr">loaders</span>: &#123;</span><br><span class="line">                   <span class="attr">css</span>: <span class="title class_">ExtractTextPlugin</span>.<span class="title function_">extract</span>(&#123;</span><br><span class="line">                       <span class="attr">use</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                       <span class="attr">fallback</span>: <span class="string">&#x27;vue-style-loader&#x27;</span></span><br><span class="line">                   &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="babel配置"><a href="#babel配置" class="headerlink" title="babel配置"></a>babel配置</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根目录新建.babelrc，webpack会依赖此配置文件来使用babel编译ES6代码</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;es2015&quot;</span>],</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: [<span class="string">&quot;transform-runtime&quot;</span>],</span><br><span class="line">    <span class="string">&quot;comments&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="webpack进一步配置"><a href="#webpack进一步配置" class="headerlink" title="webpack进一步配置"></a>webpack进一步配置</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装url-loader和file-loader来支持图片、字体等文件</span></span><br><span class="line"><span class="comment">// npm install --save-dev url-loader</span></span><br><span class="line"><span class="comment">// npm install --save-dev file-loader</span></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(gif|jpg|png|woff|svg|eot|ttf)\? ? .*$/</span>,</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;url-loader? limit=1024&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h1 id="webpack的打包"><a href="#webpack的打包" class="headerlink" title="webpack的打包"></a>webpack的打包</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm install --save-dev webpack-merge</span></span><br><span class="line"><span class="comment">// npm install --save-dev html-webpack-plugin</span></span><br><span class="line"><span class="comment">// 在package.json中，再加入一个build的快捷脚本用来打包</span></span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --open --config webpack.config.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --progress --hide-modules --config webpack.prod.config.js&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根目录新建生产环境的配置文件webpack.prod.config.js</span></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">HtmlwebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ExtractTextPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;extract-text-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> webpackBaseConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.config.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空基本配置的插件列表</span></span><br><span class="line">webpackBaseConfig.<span class="property">plugins</span> = [];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(webpackBaseConfig, &#123;</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">publicPath</span>: <span class="string">&#x27;/dist/&#x27;</span>,</span><br><span class="line">        <span class="comment">//将入口文件重命名为带有20位hash值的唯一文件</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].[hash].js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ExtractTextPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 提取css，并重命名为带有20位hash值的唯一文件</span></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;[name].[hash].css&#x27;</span>,</span><br><span class="line">            <span class="attr">allChunks</span>: <span class="literal">true</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 定义当前node环境为生产环境</span></span><br><span class="line">        <span class="keyword">new</span> webpack.<span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line">            <span class="string">&#x27;process.env&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">NODE_ENV</span>: <span class="string">&#x27;&quot;production&quot;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 压缩js</span></span><br><span class="line">        <span class="keyword">new</span> webpack.<span class="property">optimize</span>.<span class="title class_">UglifyJsPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">compress</span>: &#123;</span><br><span class="line">                <span class="attr">warnings</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 提取模板，并保存入口html文件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;../index_prod.html&#x27;</span>,</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./index.ejs&#x27;</span>,</span><br><span class="line">            <span class="attr">inject</span>: <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-admin</title>
      <link href="/2022/03/02/vue-admin/"/>
      <url>/2022/03/02/vue-admin/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要是博主记录学习<code>vue-element-admin</code>、<code>el-admin-web</code>、<code>Zjmzxfzhl-web</code>等开源框架，以及自己后台的实现。</p><hr><h1 id="vue-element-admin"><a href="#vue-element-admin" class="headerlink" title="vue-element-admin"></a>vue-element-admin</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path: &#x27;edit/:id(\\d+)&#x27;,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 组件名</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;MyComponent title=&quot;&lt;MyComponent&gt; as label name&quot;&gt;&lt;/MyComponent&gt;</span><br><span class="line">    &lt;my-component title=&quot;&lt;my-component&gt; as label name&quot;&gt;&lt;/my-component&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">import MyComponent from MyComponent.vue</span><br><span class="line">...</span><br><span class="line">// 采用局部注册时，在 components 选项中定义你想要使用的组件</span><br><span class="line">components: &#123;    </span><br><span class="line">    MyComponent</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>unique-opened</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render: function(h) &#123;</span><br><span class="line">    return h() // avoid warning message</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="el-admin-web"><a href="#el-admin-web" class="headerlink" title="el-admin-web"></a>el-admin-web</h1><h2 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h2><h3 id="文档地址"><a href="#文档地址" class="headerlink" title="文档地址"></a>文档地址</h3><blockquote><p><a href="https://gitee.com/elunez/eladmin-web">Gitee地址</a></p><p><a href="https://el-admin.vip/">文档地址</a></p></blockquote><h3 id="后端项目运行"><a href="#后端项目运行" class="headerlink" title="后端项目运行"></a>后端项目运行</h3><p>安装好对应的环境：JDK、Redis、Maven，使用idea打开项目自动导入Maven的相关依赖，laragon启动连接Navicat新建eladmin表然后导入对应的sql脚本，启动redis再使用idea跑起项目。</p><blockquote><p>具有的可以参考<a href="https://www.bilibili.com/video/BV1j64y167pX?p=2">b站视频</a>与文档教程</p></blockquote><h3 id="前端项目正常运行"><a href="#前端项目正常运行" class="headerlink" title="前端项目正常运行"></a>前端项目正常运行</h3><p>安装好Node.js环境，下载对应的依赖包</p><h2 id="项目学习"><a href="#项目学习" class="headerlink" title="项目学习"></a>项目学习</h2><p>首先是布局</p><p>登录：</p><p>vue的native修饰符</p><p>vue的路由base: process.env.BASE_URL,</p><p>vuex的modules</p><p>Cookies的操作（引入js-cookie）</p><p>svg图片</p><p>同一接口传递的post、get、delete不同来实现，使用vuex来接受三个值</p><p>自定义指令</p><p>@跳转运行webpack配置（设置里面先禁用再重启）</p><p>git commit 覆盖 git commit –amend -m “xxx”</p><hr><h1 id="Zjmzxfzhl-web"><a href="#Zjmzxfzhl-web" class="headerlink" title="Zjmzxfzhl-web"></a>Zjmzxfzhl-web</h1><h2 id="项目运行-1"><a href="#项目运行-1" class="headerlink" title="项目运行"></a>项目运行</h2><ol><li><p>安装好对应的环境：JDK、Redis、Maven</p></li><li><p>laragon启动连接Navicat新建表然后导入对应的sql脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// application-dev.yml这里修改数据库账号密码</span><br><span class="line">username: root</span><br><span class="line">password:</span><br></pre></td></tr></table></figure></li><li><p>启动redis</p></li><li><p>使用idea打开项目自动导入Maven的相关依赖，项目启动有这个报错</p><ul><li><p>导入jar失败</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Cannot resolve com.zjmzxfzhl:zjmzxfzhl-common-security:1.0.0-SNAPSHOT</span><br><span class="line">Cannot resolve com.zjmzxfzhl:zjmzxfzhl-common-log:1.0.0-SNAPSHOT</span><br><span class="line">Cannot resolve com.zjmzxfzhl:zjmzxfzhl-common-sys-api:1.0.0-SNAPSHOT</span><br><span class="line">Cannot resolve com.zjmzxfzhl:zjmzxfzhl-common-mybatis:1.0.0-SNAPSHOT</span><br><span class="line">Cannot resolve com.zjmzxfzhl:zjmzxfzhl-common-redis:1.0.0-SNAPSHOT</span><br></pre></td></tr></table></figure><p>解决：下载zjmzxfzhl-common项目<a href="https://gitee.com/zjm16/zjmzxfzhl-common">https://gitee.com/zjm16/zjmzxfzhl-common</a></p><p><img src="https://pic.imgdb.cn/item/6233375b5baa1a80ab62a0b0.png"></p></li></ul></li></ol><h2 id="项目学习-1"><a href="#项目学习-1" class="headerlink" title="项目学习"></a>项目学习</h2><p>解决一个每次打开parser-dialog预览最新的表单时候不渲染DOM、直接加入v-if。</p><p>public的有个static，暂时不研究。</p><p>api文件中的下载接口</p><p>axios的下载接口，添加responseType: ‘blob’，成功后判断response.type的’application/json’（目前不知道具体有什么用）使用a标签下载即可。</p><p>组件Breadcrumb 中引用了path-to-regexp，具体用法不知道。</p><p>使用了一个v-if和v-else，不知道考虑了什么情况。</p><hr><h1 id="悟空CRM系统"><a href="#悟空CRM系统" class="headerlink" title="悟空CRM系统"></a>悟空CRM系统</h1><h2 id="启动后端："><a href="#启动后端：" class="headerlink" title="启动后端："></a>启动后端：</h2><p>下载phpstudy使用，将项目下载后放在phpstudy的WWW目录下。（名称与网站域名一致）</p><p>软件使用：</p><p><img src="https://pic.imgdb.cn/item/6256212c239250f7c58c014c.png"></p><p><img src="https://pic.imgdb.cn/item/6256212c239250f7c58c0152.png"></p><p>修改文件config &gt; database.php(没有文件就重命名database_tamplate.php)，</p><p>数据库名（database）、用户名（username）、密码（password）即可。</p><p>启动需要开启redis（本地命令行加上phpstudy中域名管理中的php扩展勾选redis）</p><h2 id="启动前端："><a href="#启动前端：" class="headerlink" title="启动前端："></a>启动前端：</h2><p>修改config&gt;index中的host为localhost，暂时修改target为线上的地址:<a href="http://demo11.5kcrm.net/%EF%BC%88%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E7%9A%84%E4%BC%9A%E6%9C%89%E9%83%A8%E5%88%86%E8%AF%B7%E6%B1%82%E5%A4%B1%E8%B4%A5%EF%BC%89%E3%80%82%E5%A6%82%E8%A6%81%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E7%9A%84%E4%BF%AE%E6%94%B9%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8FBASE_API%E4%B8%BA/index.php/%E3%80%82">http://demo11.5kcrm.net/（使用本地的会有部分请求失败）。如要使用本地的修改环境变量BASE_API为/index.php/。</a></p><hr><h1 id="vue尚硅谷前台"><a href="#vue尚硅谷前台" class="headerlink" title="vue尚硅谷前台"></a><strong>vue尚硅谷前台</strong></h1><p> <a href="https://www.bilibili.com/video/BV1Vf4y1T7bw?p=1">视频地址</a></p><p>直接此电脑上的地址栏输入cmd可以快速进入该目录</p><p><strong>配置别名</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src文件夹的别名的设置</span></span><br><span class="line"><span class="comment">// 创建jsconfig.json文件</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;src/*&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;dist&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在路由处添加meta元信息，配合v-if即可实现底部、头部显示和隐藏。</p><p>防抖：前面的所有的触发都被取消，最后一次执行在规定的时间之后才会触发，也就是说如果连续快速的触发,只会执行最后一次</p><p>节流：在规定的间隔时间范围内不会重复触发回调，只有大于这个时间间隔才会触发回调，把频繁触发变为少量触发</p><p><strong>使用lodash</strong>，接收返回一个函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 使用自定义属性</span><br><span class="line">&lt;a data-categoryName=&quot;mm&quot;&gt;&lt;/a&gt;</span><br><span class="line">// 需要小写</span><br><span class="line">let &#123;categoryname&#125; =  event.target.dataset</span><br></pre></td></tr></table></figure><p><strong>mockjs使用：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先准备模拟的数据</span></span><br><span class="line"><span class="comment">// 把mock数据需要的图片放置于public文件夹中！</span></span><br><span class="line"><span class="comment">// listContainer中的轮播图的数据的json文件</span></span><br><span class="line">[</span><br><span class="line">   &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">imgUrl</span>:<span class="string">&#x27;xxxxxxxxx&#x27;</span>&#125;, </span><br><span class="line">   &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">imgUrl</span>:<span class="string">&#x27;xxxxxxxxx&#x27;</span>&#125;, </span><br><span class="line">   &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">imgUrl</span>:<span class="string">&#x27;xxxxxxxxx&#x27;</span>&#125;, </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入mockjs模块（mockServe.js文件）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Mock</span> <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span>;</span><br><span class="line"><span class="comment">//把JSON数据格式引入进来[JSON数据格式根本没有对外暴露，但是可以引入]</span></span><br><span class="line"><span class="comment">//webpack默认对外暴露的：图片、JSON数据格式</span></span><br><span class="line"><span class="keyword">import</span> banner <span class="keyword">from</span> <span class="string">&#x27;./banner.json&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> floor <span class="keyword">from</span> <span class="string">&#x27;./floor.json&#x27;</span>;</span><br><span class="line"><span class="comment">//mock数据:第一个参数请求地址   第二个参数：请求数据</span></span><br><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&quot;/mock/banner&quot;</span>,&#123;<span class="attr">code</span>:<span class="number">200</span>,<span class="attr">data</span>:banner&#125;);<span class="comment">//模拟首页大的轮播图的数据</span></span><br><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&quot;/mock/floor&quot;</span>,&#123;<span class="attr">code</span>:<span class="number">200</span>,<span class="attr">data</span>:floor&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入MockServer.js----mock数据（main.js文件）</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@/mock/mockServe&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>swiper基本的使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Swiper在Vue项目中使用完美解决方案</span></span><br><span class="line"><span class="comment">问题：v-for,在遍历来自于Vuex（数据:通过ajax向服务器发请求，存在异步）*/</span></span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="attr">list</span>: &#123;</span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 实例化swiper</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参数合并</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断：如果路由跳转的时候，带有params参数，捎带脚传递过去</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>) &#123;</span><br><span class="line">  loction.<span class="property">params</span> = <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>;</span><br><span class="line">  <span class="comment">//动态给location配置对象添加query属性</span></span><br><span class="line">  loction.<span class="property">query</span> = query;</span><br><span class="line">  <span class="comment">//路由跳转</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(loction);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>请求发起如果参数是undefined，并不会在data参数中。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由滚动行为</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="title function_">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>) &#123;</span><br><span class="line">    <span class="comment">// 始终滚动到顶部</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">top</span>: <span class="number">0</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简化数据而生</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="comment">//路径导航简化的数据</span></span><br><span class="line">  <span class="title function_">categoryView</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    <span class="comment">//比如:state.goodInfo初始状态空对象，空对象的categoryView属性值undefined</span></span><br><span class="line">    <span class="comment">//当前计算出的 categoryView属性值至少是一个空对象，假的报错不会有了。</span></span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">goodInfo</span>.<span class="property">categoryView</span> || &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="vue-admin后台实现"><a href="#vue-admin后台实现" class="headerlink" title="vue-admin后台实现"></a>vue-admin后台实现</h1><blockquote><p>参考资料：<a href="https://www.bilibili.com/video/BV1QU4y1E7qo?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1QU4y1E7qo?spm_id_from=333.999.0.0</a></p></blockquote><p>ele 按需引用</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue-admin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题目记录</title>
      <link href="/2022/02/16/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/02/16/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要记录了博主面试遇到的问题，以及自己觉得比较好的题目。</p><h1 id="浏览器的内核"><a href="#浏览器的内核" class="headerlink" title="浏览器的内核"></a>浏览器的内核</h1>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS3</title>
      <link href="/2022/01/11/CSS3/"/>
      <url>/2022/01/11/CSS3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>介绍了css3的新属性。</p><ul><li><p>1.使用圆角radius时，一次设置多个是从（左上角开始顺时针旋转）；50%或者四个圆角值都设置为宽度或高度值的一半即可为圆形；单独设置一个位置如左上（可以boeder-top-left-radius:）。</p></li><li><p>box-shadow其中设置的值为：X轴偏移量 Y轴偏移量 [阴影模糊半径] [阴影扩展半径] [阴影颜色] [投影方式(inset或省略)]；阴影的默认大小为为box的大小；（只设置一个可以设置阴影扩展半径为负数，或者后面的两个不设置，暂时不知道其他方法）。</p></li><li><p>linear-gradient第一个参数:指定渐变方向，可以用“角度”的关键词或“英文”来表示, 省略等同于180deg；deg的参数是一个坐标系中有个圆，从原点开始，y轴0deg按照顺时针到360deg。</p></li><li><p>text-shado文本阴影，X轴偏移量 Y轴偏移量 模糊半径 阴影颜色；color可以使用rgba色，没有inset值。（只有四个参数）</p></li><li><p>text-overflow文本溢出，clip剪切、ellipsis（…）；强制文本在一行内显示white-space:nowrap。</p></li><li><p>嵌入字体 @font-face</p></li><li><p>background-origin：border-box 边框 | padding-box 内边距（默认值） | content-box 内容区域；</p></li><li><p>background-clip：border-box 边框（默认值）| padding-box 内边距 | content-box 内容区域 | no-clip 不裁剪,与border-box效果相同。</p></li><li><p>选择器：</p><ol><li><p>根选择器 :root{}就等同于html{}，一般来说， 推荐使用:root{}。</p></li><li><p>否定选择器 :not ，排除选的除此之外的；选择器:not(<em>selector</em>) 。</p></li><li><p>空选择器 :empty ，注意::empty 只对一点内容都没有的元素生效， 哪怕有一个空格都不行。</p></li><li><p>目标选择器 :target 超链接地址，与id对应。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .not_show&#123;display: none;&#125;</span><br><span class="line">    #test:target&#123;display:block;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;h2&gt;&lt;a href=&quot;#test&quot;&gt;test&lt;/a&gt;&lt;/h2&gt;</span><br><span class="line">&lt;div class=&quot;not_show&quot; id=&quot;test&quot;&gt;这是一个测试&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>第一个与最后一个子元素 :first-child :last-child。（其中可在后接选择器，如：ul li:first-child a）</p></li><li><p>指定子元素选择器/奇偶选择器 :nth-child(n) :nth-last-child(n)，（odd或者2n偶数、even或者2n+1奇数）；指定子元素索引：ul li:nth-child(5)；倒数第五个，ul li:nth-last-child(5)</p></li><li><p>第一个与最后一个匹配类型的子元素 first-of-type，last-of-type；（如：div的第一个p不是第一个子元素:first-of-type）</p></li><li><p>指定匹配类型子元素选择器/匹配类型奇偶选择器 :nth-of-type(n) :nth-last-of-type(n)；</p></li><li><p>唯一子元素选择器 only-child匹配的元素的父元素中仅有一个子元素，而且是一个唯一的子元素；</p></li><li><p>唯一匹配类型的子元素 only-of-type；只有这一个同类型的标签；</p></li></ol></li><li><p>表单选择器：</p><ol><li>可用选择器:enabled</li><li>不可用选择器:disabled</li><li>被选中选择器:checked</li><li>被鼠标选中, 高亮选择器::selection（字要选中）</li><li>只读选择器:read-only（readonly属性）</li><li>非只读选择器:read-write</li></ol></li><li><p>transform 变换/转换/改变</p><ol><li><p>变形-旋转 rotate() ，同样是沿着中心旋转；</p></li><li><p>变形-扭曲 skew()其中skew(x,y)参数为,x轴和y轴,不写默认为0；skewX(x)X轴扭曲变形；skewY(y)Y轴扭曲变形</p></li><li><p>变形-缩放 scale 如scele（1.5）</p></li><li><p>变形-位移 translate一般译为翻译, 这里的意思是转变、偏移、位移；其实就是类似于position中的relative，不影响其他元素，如：translate(70px,100px)</p></li><li><p>变形-矩阵 matrix() </p></li><li><p>变形-原点transform-origin，元素变性为默认原点，可以改变元素的原点，然后再做变形</p></li></ol></li><li><p>transition动画</p><p>函数有以下：</p><p>ease        默认值,速度由快到慢, 逐渐变慢</p><p>linear        恒速</p><p>ease-in        速度越来越快, 加速</p><p>ease-out    速度越来越慢, 减速</p><p>ease-in-out    先加速后减速, 渐显渐隐</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* 指定过渡或动态模拟的CSS属性 */</span><br><span class="line">transition-property:all;</span><br><span class="line"></span><br><span class="line">/* 过渡时间 */</span><br><span class="line">transition-duration:.5s;</span><br><span class="line"></span><br><span class="line">/* 过渡函数 */</span><br><span class="line">transition-timing-function:ease;</span><br><span class="line"></span><br><span class="line">/* 延迟执行时间 */</span><br><span class="line">transition-delay: .2s;</span><br><span class="line"></span><br><span class="line">/* 相当于 transition: all .5s ease .2s*/</span><br></pre></td></tr></table></figure></li><li><p>关键帧keyframes</p><p>none        不改变默认行为, 表示动画将按预期进行和结束，在动画完成其最后一帧时，动画会反转到初始帧处</p><p>forwards    当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）</p><p>backwards    会在向元素应用动画样式时迅速应用动画的初始帧</p><p>both        元素动画同时具有forwards和backwards效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/* 指定调用哪个动画? */</span><br><span class="line">-webkit-animation-name:around;</span><br><span class="line"></span><br><span class="line">/* 过渡时间 */</span><br><span class="line">-webkit-animation-duration: 10s;</span><br><span class="line"></span><br><span class="line">/* 过渡函数 */</span><br><span class="line">-webkit-animation-timing-function: ease;</span><br><span class="line"></span><br><span class="line">/* 延迟执行时间 */</span><br><span class="line">-webkit-animation-delay: 1s;</span><br><span class="line"></span><br><span class="line">/* 动画播放次数, infinite, 无限次播放, 或者填入数字 */</span><br><span class="line">-webkit-animation-iteration-count:infinite;</span><br><span class="line"></span><br><span class="line">/* 动画播放方向, 默认为normal, 即动画按顺序播放. */</span><br><span class="line">/* 如果为alternate,则动画会在奇数次数（1、3、5 等等）正常播放，*/</span><br><span class="line">/* 而在偶数次数（2、4、6 等等）反向播放 */</span><br><span class="line">-webkit-animation-direction:normal;</span><br><span class="line">-webkit-animation-direction:alternate;</span><br><span class="line"></span><br><span class="line">/* 暂停 */</span><br><span class="line">-webkit-animation-play-state:paused;</span><br><span class="line"></span><br><span class="line">/* 播放、从暂停的位置开始播放 */</span><br><span class="line"></span><br><span class="line">-webkit-animation-play-state:running;</span><br></pre></td></tr></table></figure></li><li><p>flex布局</p><p>在使用flex布局时，给子元素定了宽度后，使用列排列会导致子元素不会随着父元素的缩小而缩小；（使用最小宽度不能生效，使用百分比和最大宽度可以解决）；换行不影响，若内容超过可以使用最小宽度；</p><p>在使用弹力盒子时，一左一右div时，两个div的宽度，缩小时若右边的div再次使用flex，里面的宽度强行撑开div,使宽度远大于现在的父元素，左边的使用overflow: hidden，会导致直接消失。（解决不写直接给父元素写；或者两个都加；）</p><p>使用列排列后，在添加了align-item后，子元素居中会导致宽度不随着父元素变化；（只有不写可以解决，在每个子元素套父元素，取消这个属性，然后添加flex布局，横向排列；有点多此一举还不如不用；推荐宽度小固定时使用）</p><p>列排列的flex是在主轴上的分配比</p><blockquote><p>基本知识点：<a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p></blockquote><ol><li><p>容器属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">flex-direction: 决定主轴的方向（即项目的排列方向）。</span><br><span class="line">row（默认值）：主轴为水平方向，起点在左端。</span><br><span class="line">row-reverse：主轴为水平方向，起点在右端。</span><br><span class="line">column：主轴为垂直方向，起点在上沿。</span><br><span class="line">column-reverse：主轴为垂直方向，起点在下沿。</span><br><span class="line"></span><br><span class="line">flex-wrap: 默认情况下，项目都排在一条线（又称&quot;轴线&quot;）上；定义如果一条轴线排不下，如何换行。</span><br><span class="line">nowrap（默认）：不换行。</span><br><span class="line">wrap：换行，第一行在上方。</span><br><span class="line">wrap-reverse：换行，第一行在下方。</span><br><span class="line"></span><br><span class="line">flex-flow: 是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</span><br><span class="line"></span><br><span class="line">justify-content:定义了项目在主轴上的对齐方式。（主轴）</span><br><span class="line">flex-start（默认值）：左对齐</span><br><span class="line">flex-end：右对齐</span><br><span class="line">center： 居中</span><br><span class="line">space-between：两端对齐，项目之间的间隔都相等。</span><br><span class="line">space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</span><br><span class="line"></span><br><span class="line">align-items: 定义项目在交叉轴上如何对齐。</span><br><span class="line">flex-start：交叉轴的起点对齐。</span><br><span class="line">flex-end：交叉轴的终点对齐。</span><br><span class="line">center：交叉轴的中点对齐。</span><br><span class="line">baseline：项目的第一行文字的基线对齐。</span><br><span class="line">stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</span><br><span class="line"></span><br><span class="line"> align-content: 定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</span><br><span class="line"> flex-start：与交叉轴的起点对齐。</span><br><span class="line">flex-end：与交叉轴的终点对齐。</span><br><span class="line">center：与交叉轴的中点对齐。</span><br><span class="line">space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</span><br><span class="line">space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</span><br><span class="line">stretch（默认值）：轴线占满整个交叉轴。</span><br></pre></td></tr></table></figure></li><li><p>项目的属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">order: 定义项目的排列顺序。数值越小，排列越靠前，默认为0。</span><br><span class="line"> </span><br><span class="line">flex-grow: 定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</span><br><span class="line"></span><br><span class="line">flex-shrink: 定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</span><br><span class="line"></span><br><span class="line">flex-basis: 定义了在分配多余空间之前，项目占据的主轴空间（main size）。</span><br><span class="line">浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flex: 是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</span><br><span class="line"></span><br><span class="line">align-self: 允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。</span><br><span class="line">默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</span><br></pre></td></tr></table></figure></li></ol></li><li><p>3Dtransform变换</p><p>transform-style：flat(默认，二维效果)，preserve-3d(三维效果)。要写给父元素变成3D容器；</p><p>translate3d(x,y,z) 使元素在这三个纬度中移动,也可以分开写，如：translateX(length),translateY(length),   translateZ(length)。注意z轴的值只能为px;</p><p>scale3d(number,number,number) 使元素在这三个纬度中缩放，也可分开写，如：scaleX(),scaleY(),scaleY()</p><p>rotateX(angle) 是元素依照x轴旋转；rotateY(angle) 是元素依照y轴旋转；rotateZ(angle) 是元素依照z轴旋转。</p><p>perspective(length) 景深, 就是你在多远的地方观看。</p></li><li><p>多列布局 Columns：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> width: 500px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    border: 1px solid green;</span><br><span class="line">    margin: 20px auto;</span><br><span class="line"></span><br><span class="line">    /* 每列宽度, 默认auto */</span><br><span class="line">    column-width: auto;</span><br><span class="line"></span><br><span class="line">    /* 分成几列? */</span><br><span class="line">    column-count: 4;</span><br><span class="line"></span><br><span class="line">    /* 列间距 */</span><br><span class="line">    column-gap: 3em;</span><br><span class="line"></span><br><span class="line">    /* 列边框 */</span><br><span class="line">    column-rule: 1px solid #08c;</span><br><span class="line"></span><br><span class="line">/* 跨列设置, 默认是none, 不跨列. all, 跨列*/</span><br><span class="line">    -webkit-column-span: all;</span><br></pre></td></tr></table></figure></li><li><p>盒子模型</p><p>content-box 默认值, 定义宽和高, 以内容为标准 border-box , 定义宽和高, 以边框为标准 inherit, 继承父元素的盒子模型</p></li><li><p>媒体查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* 当屏幕小于或等于指定宽度，样式生效 */</span><br><span class="line">@media (max-width:480px)&#123;</span><br><span class="line">    .ads &#123;display:none;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">/* 当屏幕大于或等于指定宽度，样式生效 */</span><br><span class="line">@media (min-width:900px)&#123;</span><br><span class="line">    .wrapper&#123;width: 980px;&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>vertical-align</p></li><li><p>只显示三行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 只显示三行</span><br><span class="line">max-height: 65px;</span><br><span class="line">overflow: hidden;</span><br><span class="line">display: -webkit-box;</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">-webkit-line-clamp: 3;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex与Vue传参的基本内容</title>
      <link href="/2022/01/11/Vue%E4%BC%A0%E5%8F%82%E3%80%81Vuex%E7%AD%89/"/>
      <url>/2022/01/11/Vue%E4%BC%A0%E5%8F%82%E3%80%81Vuex%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="vue传参的几中基本用法，以及vue的用法。"><a href="#vue传参的几中基本用法，以及vue的用法。" class="headerlink" title="vue传参的几中基本用法，以及vue的用法。"></a>vue传参的几中基本用法，以及vue的用法。</h2><hr><h1 id="root-根组件"><a href="#root-根组件" class="headerlink" title="$root 根组件"></a>$root 根组件</h1><p>使用<code>$root</code>可以访问到<code>new Vue</code>根实例中的数据和方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// main.js文件</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: &#x27;默谐&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;);</span><br><span class="line">// 其他页面读取</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;&#123; $root.name &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="ref-refs"><a href="#ref-refs" class="headerlink" title="ref refs"></a>ref refs</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 父组件中</span><br><span class="line">&lt;One :data=&quot;&#x27;传给子&#x27;&quot; ref=&quot;RZ&quot;&gt;&lt;/One&gt;</span><br><span class="line">// 需要在mounted中找组件，created中还未加载；</span><br><span class="line">mounted()&#123;</span><br><span class="line">  console.log(this.$refs) // 普通元素加ref没有名字</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><hr><h1 id="event"><a href="#event" class="headerlink" title="$event"></a>$event</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 父组件中</span><br><span class="line">&lt;button v-on:click=&quot;submit($event)&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">  submit(val) &#123;</span><br><span class="line">    console.log(val)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><hr><h1 id="emit"><a href="#emit" class="headerlink" title="$emit"></a>$emit</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 子组件中</span><br><span class="line">created()&#123;</span><br><span class="line">    this.send() // 放到mounted里面也可以</span><br><span class="line">&#125;</span><br><span class="line">methods: &#123;</span><br><span class="line">  send()&#123;</span><br><span class="line">      this.$emit(&#x27;自定义的事件名字&#x27;,&#x27;你要传的参数&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">// 父组件中</span><br><span class="line">&lt;One @自定义的事件名字=&quot;方法名字&quot;&gt;&lt;/One&gt;</span><br><span class="line">// 或者</span><br><span class="line">&lt;One @自定义的事件名字=&quot;方法名字($event)&quot;&gt;&lt;/One&gt;</span><br><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        Data=&#x27;&#x27;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  方法名字(x)&#123;</span><br><span class="line">    this.Data = x</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><hr><h1 id="on"><a href="#on" class="headerlink" title="$on"></a>$on</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// main.js中创建一个bus的Vue中转站</span><br><span class="line">Vue.prototype.bus = new Vue()</span><br><span class="line">// 组件1</span><br><span class="line">mounted()&#123;</span><br><span class="line">  this.send() // 必须放在这里，放在created不行；</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  send() &#123;</span><br><span class="line">    this.bus.$emit(&#x27;oneComponent&#x27;, &#x27;第一个组件的数据&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">// 组件2</span><br><span class="line">created()&#123;</span><br><span class="line">  // 必须放在这里</span><br><span class="line">  this.bus.$on(&#x27;oneComponent&#x27;, val =&gt; &#123;</span><br><span class="line">    this.message = val</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="parent-和-children"><a href="#parent-和-children" class="headerlink" title="$parent 和 $children"></a>$parent 和 $children</h1><ol><li><p>ref为子组件指定一个索引名称，通过索引来操作子组件；</p></li><li><p>this.$parent 可以直接访问该组件的父实例或组件；</p></li><li><p>父组件也可以通过this.$children 访问它所有的子组件； 需要注意 $children 并不保证顺序，也不是响应式的。</p></li></ol><hr><h1 id="父传子props"><a href="#父传子props" class="headerlink" title="父传子props"></a>父传子props</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">父元素中组件上</span><br><span class="line">&lt;component :xx=&#x27;xxx&#x27;&gt;&lt;/component&gt;</span><br><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        xxx:&#x27;&#x27;</span><br><span class="line">    &#125;&#125;</span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line">props：[&#x27;xx&#x27;]</span><br></pre></td></tr></table></figure><hr><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>父传子：v-bind属性绑定；再使用props属性接收</p><p>子传父：v-on事件绑定；不相干组件：EvenBus；</p><p>Vuex：是实现组件全局状态（数据）管理的一种机制，可以方便的实现组件之间的数据的共享；（响应式）        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// Vuex安装</span><br><span class="line">npm install vuex --save</span><br><span class="line">// Vuex引用</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">// 创建store对象</span><br><span class="line">const Counter = new Vuex.Store(&#123;</span><br><span class="line">  // state中存放的就是全局共享的数据</span><br><span class="line">  state:&#123;count : 0&#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 将store对象挂载到vue实例中，所有的组件，就可以直接从store中获取全局的数据了。</span><br><span class="line">import store from &#x27;./store&#x27; // main.js文件里面引用；</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#x27;#app&#x27;,</span><br><span class="line">  render:h=&gt;h(app),</span><br><span class="line">  store,</span><br><span class="line">  router,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 直接访问</span><br><span class="line">this.$store.state.count</span><br><span class="line">// 在组件中引用，后映射为计算属性；</span><br><span class="line">import &#123;mapState&#125; from &#x27;vuex&#x27;</span><br><span class="line">computed:&#123;</span><br><span class="line">    ...mapState([&#x27;count&#x27;])</span><br><span class="line">    // ...表示展开运算符；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h2><p>用于变更Store的数据；（有个Payload就是后面带的参数，但是只能接受一个可以使用对象接受）。</p><p>（不推荐直接在组件中修改Store的数据，不利于维护，在项目较大时，不知道哪个地方修改了数据。</p><p>mutation不要写异步的代码，（如：vue插件会显示出问题。)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 定义mutation（store中）</span><br><span class="line">mutations: &#123;</span><br><span class="line">   add (state) &#123;</span><br><span class="line">     // 变更状态</span><br><span class="line">     state.count++</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> // 触发mutation(组件中)</span><br><span class="line"> // 第一种</span><br><span class="line"> methods:&#123;</span><br><span class="line">     handlel()&#123;</span><br><span class="line">         this.$store.commit(&#x27;add&#x27;)      </span><br><span class="line">     &#125;  </span><br><span class="line"> &#125;</span><br><span class="line"> // 第二种</span><br><span class="line"> import &#123;mapMutations&#125; from &#x27;vuex&#x27;</span><br><span class="line"> methods:&#123;</span><br><span class="line">     ...mapMutations([&#x27;add&#x27;]) </span><br><span class="line">     handlel()&#123;</span><br><span class="line">         this.add()</span><br><span class="line">     &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>用于处理异步任务；在Action中触发mutation中的函数，间接的处理变更数据；</p><p>在Action中不能直接修改state的数据；必须context.commit()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 定义Action</span><br><span class="line">actions:&#123;</span><br><span class="line">  addAsync(context)&#123;</span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">      context.commit(&#x27;add&#x27;)</span><br><span class="line">    &#125;,1000)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 触发Action</span><br><span class="line">// 第一种</span><br><span class="line">  methods:&#123;</span><br><span class="line">      handlel()&#123;</span><br><span class="line">          this.$store.dispatch(&#x27;addAsync&#x27;)</span><br><span class="line">      &#125;  </span><br><span class="line">  &#125;</span><br><span class="line">  // 第二种</span><br><span class="line">    import &#123;mapActions&#125; from &#x27;vuex&#x27;</span><br><span class="line">    methods:&#123;</span><br><span class="line">      ...mapActions([&#x27;addAsync&#x27;]) </span><br><span class="line">      handlel()&#123;</span><br><span class="line">          this.addAsync()</span><br><span class="line">      &#125;        </span><br><span class="line">  &#125;</span><br><span class="line">  // 可以直接上面写addAsync不需要handlel这个</span><br></pre></td></tr></table></figure><h2 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h2><p>用于对Store中的数据进行加工处理形成新的数据；</p><p>类似于vue的计算属性，store数据发生变化，Getter的数据也会更着变化；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 定义Getter</span><br><span class="line">  getters: &#123;</span><br><span class="line">   showNum:state=&gt;&#123;</span><br><span class="line">       retuen &#x27;当前最新的数量是&#x27;+ state.count</span><br><span class="line">   &#125;</span><br><span class="line">  // 触发Getter</span><br><span class="line">  this.$store.getters.名称</span><br><span class="line">  // 在组件中引用，后映射为计算属性；</span><br><span class="line">  import &#123;mapGetters&#125; from &#x27;vuex&#x27;</span><br><span class="line">  computed:&#123;</span><br><span class="line">  ...mapGetters([&#x27;showNum&#x27;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：使用按需触发后，再组件修改state的数据，调试工具当前页的vuex bindings中改变，而vuex中未改变，</p><p>不要误导了；</p><h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><p>将store拆分成几个不同模块；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// 定义不同的module</span><br><span class="line">const moduleA = &#123;</span><br><span class="line">  state: &#123; a: &#x27;modules测试&#x27;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//直接使用</span><br><span class="line">this.$store.state.moduleA.a // 可以得到&#x27;modules测试&#x27;</span><br><span class="line">// 按需使用</span><br><span class="line">import &#123; mapState &#125; from &#x27;vuex&#x27;</span><br><span class="line">computed: &#123;</span><br><span class="line">  ...mapState(&#123;</span><br><span class="line">    A:  state =&gt; state.moduleA.a,</span><br><span class="line">    B:  state =&gt; state.moduleB.a,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在modules中添加属性，单独的命名空间</span><br><span class="line">// 否者直接触发方法，如：this.$store.commit(&#x27;a&#x27;)</span><br><span class="line">namespaced: true,</span><br><span class="line">// 调用</span><br><span class="line">this.$store.commit(&#x27;moduleA/a&#x27;)</span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapMutations(&#123;</span><br><span class="line">    A:  commit =&gt; commit(&#x27;moduleA/a&#x27;),</span><br><span class="line">    B:  commit =&gt; commit(&#x27;moduleB/b&#x27;),</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">// 单个调用</span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapMutations(&#x27;moduleA&#x27;,[&#x27;a&#x27;])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用mapAcitons</span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapAcitons(&#123;</span><br><span class="line">    A:  dispatch =&gt; dispatch(&#x27;moduleA/a&#x27;),</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用mapGetters</span><br><span class="line">...mapGetters(&#123;</span><br><span class="line">  A: &#x27;moduleA/a&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 展开运算符</span><br><span class="line">var arr = [1, 2, 3, 4, 5]</span><br><span class="line">arr = [0, ...arr, 6]</span><br><span class="line">console.log(arr)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios、echarts等</title>
      <link href="/2022/01/11/axios%E3%80%81echarts%E7%AD%89/"/>
      <url>/2022/01/11/axios%E3%80%81echarts%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>该文主要记录在项目实战需要用到的一部分知识。以及项目中遇到的问题。</p><hr><h1 id="定义别名"><a href="#定义别名" class="headerlink" title="定义别名"></a>定义别名</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 定义路径</span><br><span class="line">const path = require(&#x27;path&#x27;)</span><br><span class="line">// resolve函数</span><br><span class="line">function resolve(dir) &#123;</span><br><span class="line">    return path.join(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    configureWebpack: &#123;</span><br><span class="line">        resolve: &#123;</span><br><span class="line">            alias: &#123;</span><br><span class="line">                &#x27;@&#x27;: resolve(&#x27;src&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="api-js"><a href="#api-js" class="headerlink" title="api.js"></a>api.js</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">// 新建 src/api目录</span><br><span class="line">// 先引用</span><br><span class="line">import request from &#x27;@/utils/request&#x27;</span><br><span class="line">// 查询</span><br><span class="line">export function fetchList(data) &#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url: &#x27;/articles&#x27;,</span><br><span class="line">    method: &#x27;get&#x27;,</span><br><span class="line">    params: data</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">// 查询单条</span><br><span class="line">export function fetchArticle(id) &#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url: `/articles/$&#123;id&#125;`,</span><br><span class="line">    method: &#x27;get&#x27;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">// 创建</span><br><span class="line">export function createArticle(data) &#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url: &#x27;/articles&#x27;,</span><br><span class="line">    method: &#x27;post&#x27;,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">// 修改</span><br><span class="line">export function updateArticle(id, data) &#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url: `/articles/$&#123;id&#125;`,</span><br><span class="line">    method: &#x27;put&#x27;,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">// 使用api</span><br><span class="line">// 先引用</span><br><span class="line">import &#123;fetchList&#125; from &#x27;@/api/api&#x27;</span><br><span class="line">// 查询</span><br><span class="line">fetchList(&#123;currentPage:this.page.currentPage,pageSize:this.page.pageSize,</span><br><span class="line">    content:this.form.content,title:this.form.title&#125;).then(res=&gt;&#123;&#125;)</span><br><span class="line">// 或者在封装里面写好要查询的，不过在调用时就要传递的就固定了（实参里的对象值就要固定了）</span><br><span class="line">// 推荐上面的，因为只params需要的对象data里面只有一个时，可以直接写this.对象名</span><br><span class="line">export default &#123;fetchList&#125; // 这个可加可不加（目前不清楚）</span><br><span class="line">// 注意这个封装做完后，需要从新启动项目（否者没有用）</span><br></pre></td></tr></table></figure><hr><h1 id="Echarts"><a href="#Echarts" class="headerlink" title="Echarts"></a>Echarts</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 安装</span><br><span class="line">yarn add echarts</span><br><span class="line">// 使用</span><br><span class="line">import * as echarts from &#x27;echarts&#x27;;</span><br><span class="line">// 使用api的名字</span><br><span class="line">import &#123;productsChart as xinmingzi&#125; from &quot;@/api/charts&quot;;</span><br><span class="line">// 必须使用id，和要渲染的元素给定宽高次才可以出现图表</span><br><span class="line">&lt;div id=&quot;chart&quot; style=&quot;width=100%;height=500px&quot;&gt;&lt;/div&gt;</span><br><span class="line">// js下面Echarts</span><br><span class="line">// （赋值需要放到mounted里面，需要找到当前的Dom）</span><br></pre></td></tr></table></figure><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import &#123;MessageBox, Message&#125; from &#x27;element-ui&#x27;</span><br><span class="line">// import store from &#x27;@/store&#x27;</span><br><span class="line">// import &#123; getToken &#125; from &#x27;@/utils/auth&#x27;</span><br><span class="line"></span><br><span class="line">// 创建axios实例</span><br><span class="line">const service = axios.create(&#123;</span><br><span class="line">  // 接口不用写&#x27;/api&#x27;了</span><br><span class="line">  baseURL: &#x27;/api&#x27;, // url = base url + request url</span><br><span class="line">  // withCredentials: true, // 当跨域请求时，发送 cookies</span><br><span class="line">  timeout: 5000 // 请求超时时间</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// request 请求</span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    // do something 在发送请求前</span><br><span class="line">    const token = localStorage.token</span><br><span class="line"></span><br><span class="line">    if (token) &#123;</span><br><span class="line">      // 让每个请求携带token</span><br><span class="line">      config.headers[&#x27;token&#x27;] = token</span><br><span class="line">    &#125;</span><br><span class="line">    return config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    // do something 当请求错误</span><br><span class="line">    console.log(error) // for debug</span><br><span class="line">    return Promise.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// respone 响应</span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  /**</span><br><span class="line">   * 如果你想获取 http 信息，例如 headers 或 status</span><br><span class="line">   * 请 return  response =&gt; response</span><br><span class="line">   */</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 下面的注释为通过response自定义code来标示请求状态，当code返回如下情况为权限有问题，登出并返回到登录页</span><br><span class="line">   * 如通过xmlhttprequest 状态码标识 逻辑可写在下面error中</span><br><span class="line">   */</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    const res = response.data</span><br><span class="line"></span><br><span class="line">    // 如果返回的自定义code不是20000, 认定为error。</span><br><span class="line">    if (res.code !== 20000) &#123;</span><br><span class="line">      Message(&#123;</span><br><span class="line">        message: res.message || &#x27;Error&#x27;,</span><br><span class="line">        type: &#x27;error&#x27;,</span><br><span class="line">        duration: 5 * 1000</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      // 50008:非法的token; 50012:其他客户端登录了;  50014:Token 过期了;</span><br><span class="line">      if (res.code === 50008 || res.code === 50012 || res.code === 50014) &#123;</span><br><span class="line">        // 重新登录</span><br><span class="line">        MessageBox.confirm(&#x27;你已被登出，可以取消继续留在该页面，或者重新登录&#x27;, &#x27;确定登出&#x27;, &#123;</span><br><span class="line">          confirmButtonText: &#x27;重新登录&#x27;,</span><br><span class="line">          cancelButtonText: &#x27;取消&#x27;,</span><br><span class="line">          type: &#x27;warning&#x27;</span><br><span class="line">        &#125;).then(() =&gt; &#123;</span><br><span class="line">          // 为了重新实例化vue-router对象 避免bug</span><br><span class="line">          localStorage.removeItem(&#x27;token&#x27;)</span><br><span class="line">          location.reload()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      return Promise.reject(new Error(res.message || &#x27;Error&#x27;))</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return res</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    console.log(&#x27;err&#x27; + error) // for debug</span><br><span class="line">    Message(&#123;</span><br><span class="line">      message: error.message,</span><br><span class="line">      type: &#x27;error&#x27;,</span><br><span class="line">      duration: 5 * 1000</span><br><span class="line">    &#125;)</span><br><span class="line">    return Promise.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">export default service</span><br></pre></td></tr></table></figure><hr><h1 id="七牛上传"><a href="#七牛上传" class="headerlink" title="七牛上传"></a>七牛上传</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 地址（文档表单上传）</span><br><span class="line">// 需要参数</span><br><span class="line">http://up-z2.qiniup.com // 请求地址</span><br><span class="line">key = xxx // 上传的名字</span><br><span class="line">token = uploadToken // 需要带上token</span><br><span class="line">// 测试接口使用post，以及选择from Data,file选择上传图片文件</span><br><span class="line"></span><br><span class="line">//安装uuid</span><br><span class="line">yarn add uuid</span><br><span class="line">// 引用</span><br><span class="line">import &#123;v4 as uuidv4&#125; from &#x27;uuid&#x27;;</span><br><span class="line">// 图片上传</span><br><span class="line">// element ui中:data=&#x27;xxx&#x27;，上传表单</span><br><span class="line"></span><br><span class="line">&lt;el-upload</span><br><span class="line">    class=&quot;upload-demo&quot;</span><br><span class="line">    :limit=&quot;1&quot;</span><br><span class="line">    action=&quot;http://up-z2.qiniup.com&quot;</span><br><span class="line">    :before-upload=&quot;beforeUpload&quot; // 上传图片之前，判断文件类型，和七牛云参数赋值</span><br><span class="line">    :on-success=&quot;handleSuccess&quot; // 图片上传成功，赋值给表单</span><br><span class="line">    :on-error=&quot;handleAvatarError&quot; // 图片post上传失败，提示；</span><br><span class="line">    :on-exceed=&quot;handleExceed&quot; // 图片上传过载提示；（只上传1个等）</span><br><span class="line">    :before-remove=&quot;beforeRemove&quot; // 上传文件后点击删除上传文件，提示是否删除，（注意异步）</span><br><span class="line">    :on-remove=&quot;handleRemove&quot; // 删除成功后，表单赋值为空，提示成功；</span><br><span class="line">    :on-preview=&quot;handlePreview&quot; // 图片放大（注意使用element ui的放大标签）</span><br><span class="line">    :data=&quot;qiniuFrom&quot;</span><br><span class="line">    :file-list=&quot;fileList&quot;</span><br><span class="line">    list-type=&quot;picture&quot;&gt;</span><br><span class="line">  &lt;el-button size=&quot;small&quot; type=&quot;primary&quot;&gt;点击上传&lt;/el-button&gt;</span><br><span class="line">&lt;/el-upload&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="表单重置无效"><a href="#表单重置无效" class="headerlink" title="表单重置无效"></a>表单重置无效</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 将赋值放在mounted后，原因是使用模态框，赋值在Dom生成之前</span><br><span class="line">// 表单重置是在mounted上设置为初始值，在这之前赋值会导致重置无效</span><br><span class="line">// 必须先打开模态框，再赋值没有影响</span><br><span class="line">this.formVisible = true </span><br><span class="line">// 值会立刻改变，但是 DOM 是异步更新的</span><br><span class="line">// 保险放在上方，异步请求本就是慢一点，并且可以使用nextTick方法保险；</span><br><span class="line">// 使用nextTick方法是在里面等DOM加载完之后，再执行；</span><br><span class="line">this.$nextTick(() =&gt; &#123;&#125;)</span><br><span class="line">// 里面赋值在外面找不到的bug，在函数里面赋值</span><br><span class="line">this.$nextTick(() =&gt; &#123;&#125;) // 外面打印不出结果</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级与ES6</title>
      <link href="/2022/01/11/JavaScript%E9%AB%98%E7%BA%A7%E4%B8%8EES6/"/>
      <url>/2022/01/11/JavaScript%E9%AB%98%E7%BA%A7%E4%B8%8EES6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文记录JavaScript的高级语法，和ES6新增语法。</p><h1 id="一点介绍"><a href="#一点介绍" class="headerlink" title="一点介绍"></a>一点介绍</h1><p>面向过程：就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次调用就可以了；按照我们分析好了的步骤，按照步骤解决问题。</p><p>面向对象：是把事务分解成为一个个对象，然后由对象之间分工与合作，是以对象功能来划分问题。</p><hr><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><p>类抽象了对象的公共部分，它泛指某一大类（class）</p><p>对象特指某一个，通过类实例化一个具体的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建类 class  创建一个明星类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Star</span> &#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法，不需要写function</span></span><br><span class="line">    <span class="comment">// 多个函数方法之间不要用,隔开会报错</span></span><br><span class="line">    <span class="title function_">sing</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">999</span>)    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 利用类创建对象 new</span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zxy);</span><br><span class="line"><span class="comment">//(1) 通过class 关键字创建类, 类名我们还是习惯性定义首字母大写</span></span><br><span class="line"><span class="comment">//(2) 类里面有个constructor 函数,可以接受传递过来的参数,同时返回实例对象</span></span><br><span class="line"><span class="comment">//(3) constructor 函数 只要 new 生成实例时,就会自动调用这个函数, </span></span><br><span class="line">   <span class="comment">// 如果我们不写这个函数,类也会自动生成这个函数</span></span><br><span class="line"><span class="comment">//(4) 生成实例 new 不能省略</span></span><br><span class="line"><span class="comment">//(5) 最后注意语法规范, 创建类 类名后面不要加小括号,生成实例类名后面加小括号, </span></span><br><span class="line">   <span class="comment">// 构造函数不需要加function</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 类的继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="title function_">money</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">son.<span class="title function_">money</span>() <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// super关键字</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">        <span class="comment">// 调用了父类中的构造函数</span></span><br><span class="line">        <span class="comment">// 如果不写调用sum报错，父的this.x和this.y是没有值的</span></span><br><span class="line">        <span class="variable language_">super</span>(x, y)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 先调用父的方法super.xxx()</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">super</span>.<span class="title function_">sum</span>() + <span class="string">&#x27;Son&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">son.<span class="title function_">sum</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类有加法方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类继承父类加法方法 同时 扩展减法方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">        <span class="comment">// 利用super 调用父类的构造函数</span></span><br><span class="line">        <span class="comment">// super 必须在子类this之前调用</span></span><br><span class="line">        <span class="variable language_">super</span>(x, y);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">subtract</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span> - <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">son.<span class="title function_">subtract</span>();</span><br><span class="line">son.<span class="title function_">sum</span>();</span><br></pre></td></tr></table></figure><p><strong>class的其他属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class的静态成员</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">eat</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 静态方法直接通过类方法名来调用</span></span><br><span class="line"><span class="title class_">Animal</span>.<span class="title function_">eat</span>(<span class="string">&#x27;猫&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// get 和 set  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">price</span>() &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;价格属性被读取了&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;返回值&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set 必须要有参数</span></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">price</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal) <span class="comment">// free</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;价格属性被修改了&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"><span class="keyword">let</span> result = s.<span class="property">price</span> <span class="comment">// 价格属性被读取了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// 返回值</span></span><br><span class="line">s.<span class="property">price</span> = <span class="string">&#x27;free&#x27;</span>; <span class="comment">// 价格属性被修改了</span></span><br></pre></td></tr></table></figure><p>注意：this指向</p><ol><li><p>在 ES6 中类没有变量提升，所以必须先定义类，才能通过类实例化对象.</p></li><li><p>类里面的共有属性和方法一定要加this使用.</p></li><li><p>类里面的this指向问题. </p></li><li><p>constructor里面的this指向实例对象, 方法里面的this 指向这个方法的调用者</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;点击&lt;/button&gt;</span><br><span class="line"><span class="keyword">var</span> that;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Star</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">        <span class="comment">// constructor 里面的this指向的是创建的实例对象</span></span><br><span class="line">        that = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">        <span class="comment">// this.sing();</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">btn</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">btn</span>.<span class="property">onclick</span> = <span class="variable language_">this</span>.<span class="property">sing</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="comment">// 或者 this.btn.onclick = this.sing;// 下面写that，不推荐封装不了完整的函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sing</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 这个sing方法里面的this指向的是btn这个按钮,因为这个按钮调用了这个函数</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">uname</span>);</span><br><span class="line">       <span class="comment">// console.log(that.uname); //that里面存储的是constructor里面的this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(that === ldh);</span><br></pre></td></tr></table></figure><h1 id="apply、call与bind"><a href="#apply、call与bind" class="headerlink" title="apply、call与bind"></a>apply、call与bind</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">color</span>: <span class="string">&quot;blue&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayColor.<span class="title function_">call</span>(<span class="variable language_">window</span>);  <span class="comment">//red</span></span><br><span class="line">sayColor.<span class="title function_">call</span>(o);       <span class="comment">//blue</span></span><br><span class="line">sayColor.<span class="title function_">apply</span>(o);      <span class="comment">//blue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// apply、call区别</span></span><br><span class="line"><span class="comment">// thisObj：call 和 apply 第一个参数是一样的，该参数将替代 function 类里面的 this。</span></span><br><span class="line"><span class="comment">// arg1, arg2....：是一个个的参数</span></span><br><span class="line"><span class="comment">// [args]：一个数组</span></span><br><span class="line"><span class="title function_">call</span>(thisObj, arg1, arg2, arg3, arg4);</span><br><span class="line"><span class="title function_">apply</span>(thisObj, [args]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bind</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">color</span>: <span class="string">&quot;blue&quot;</span>&#125;</span><br><span class="line"><span class="comment">// bind不会立即调用，而是返回一个新函数</span></span><br><span class="line"><span class="comment">// 注意不能直接在立即调用的函数后面加bind会报错</span></span><br><span class="line"><span class="keyword">var</span> sayColor = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">color</span>);</span><br><span class="line">&#125;.<span class="title function_">bind</span>(o)</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayColor</span>();             <span class="comment">//blue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 总结</span></span><br><span class="line"><span class="comment">// 当我们使用一个函数需要改变this指向的时候才会用到call,apply,bind</span></span><br><span class="line"><span class="comment">// 如果你要传递的参数不多，则可以使用fn.call(thisObj, arg1, arg2 ...)</span></span><br><span class="line"><span class="comment">// 如果你要传递的参数很多，则可以用数组将参数整理好调用fn.apply(thisObj, [arg1, arg2 ...])</span></span><br><span class="line"><span class="comment">// 如果你想生成一个新的函数长期绑定某个函数给某个对象使用，则可以使用bind</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;.<span class="title function_">bind</span>()</span><br><span class="line"><span class="title function_">fn</span>(xx,xx)  </span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line"><span class="comment">// 自动直接调用</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="title function_">a</span>()</span><br><span class="line"><span class="comment">// 点击才会调用</span></span><br><span class="line">btn.<span class="property">onclick</span> = a</span><br><span class="line"><span class="comment">// 放在匿名函数中，这个函数不会自动触发</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">a</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Json格式的转化"><a href="#Json格式的转化" class="headerlink" title="Json格式的转化"></a>Json格式的转化</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;Q&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">var</span> strJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj) <span class="comment">//对象变成了json字符串</span></span><br><span class="line"><span class="keyword">var</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(strJson) <span class="comment">//json字符串变成了对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON.parse()必须使用双引号包裹</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;[&quot;1&quot;,&quot;2&quot;]&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&quot;[&#x27;1&#x27;,&#x27;2&#x27;]&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(a));<span class="comment">// Array [1,2]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(b));<span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><hr><h1 id="构造函数和原型导读"><a href="#构造函数和原型导读" class="headerlink" title="构造函数和原型导读"></a>构造函数和原型导读</h1><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>构造函数的成员：实例成员-静态成员。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数中的属性和方法我们称为成员, 成员可以添加</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">// 1.实例成员就是构造函数内部通过this添加的成员 uname age sing 就是实例成员</span></span><br><span class="line"><span class="comment">// 实例成员只能通过实例化的对象来访问</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">uname</span>);</span><br><span class="line">ldh.<span class="title function_">sing</span>();</span><br><span class="line"><span class="comment">// console.log(Star.uname); // 不可以通过构造函数来访问实例成员</span></span><br><span class="line"><span class="comment">// 2. 静态成员 在构造函数本身上添加的成员  sex 就是静态成员</span></span><br><span class="line"><span class="title class_">Star</span>.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="comment">// 静态成员只能通过构造函数来访问</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property">sex</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">sex</span>); <span class="comment">// 不能通过对象来访问，为undefined</span></span><br></pre></td></tr></table></figure><p>注意：构造函数每次实例化生成的函数会开辟新的内存来储存，造成存在浪费内存的问题</p><p>解决：采用prototype。</p><h4 id="原型：prototype"><a href="#原型：prototype" class="headerlink" title="原型：prototype"></a>原型：prototype</h4><p>构造函数通过原型分配的函数是所有对象所共享的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数使用原型（存方法），不会存在内存的浪费；</span></span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">ldh.<span class="title function_">sing</span>(); </span><br><span class="line"><span class="comment">// 不能console.log(ldh.prototype)，直接报错；</span></span><br></pre></td></tr></table></figure><h4 id="对象原型-proto"><a href="#对象原型-proto" class="headerlink" title="对象原型 proto"></a>对象原型 <strong>proto</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">__proto__</span>)</span><br><span class="line"><span class="comment">// 注意有两个下划线，指向我们构造函数的原型对象 prototype</span></span><br><span class="line"><span class="comment">// 方法的查找规则: 首先先看ldh 对象身上是否有 sing 方法,如果有就执行这个对象上的sing</span></span><br><span class="line"><span class="comment">// 如果么有sing 这个方法,因为有__proto__ 的存在,</span></span><br><span class="line"><span class="comment">// 就去构造函数原型对象prototype身上去查找sing这个方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">__proto__</span> === <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure><h4 id="原型的constructor构造函数"><a href="#原型的constructor构造函数" class="headerlink" title="原型的constructor构造函数"></a>原型的constructor构造函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 很多情况下，我们需要手动的利用constructor 这个属性指回原来的构造函数</span></span><br><span class="line"><span class="comment">// 原型里面的constructor是构造函数本身</span></span><br><span class="line"><span class="comment">// 一个为构造函数、一个为函数里面的构造函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Star</span>.<span class="property">constructor</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法放在一个对象里面</span></span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="comment">// 如果我们修改了原来的原型对象,给原型对象赋值的是一个对象，</span></span><br><span class="line">    <span class="comment">// 则必须手动的利用constructor指回原来的构造函数。</span></span><br><span class="line">    <span class="attr">constructor</span>: <span class="title class_">Star</span>,</span><br><span class="line">    <span class="attr">sing</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">movie</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会演电影&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p><img src="https://pic.imgdb.cn/item/61ecefb32ab3f51d91f85883.jpg"></p><h4 id="成员查找规则："><a href="#成员查找规则：" class="headerlink" title="成员查找规则："></a>成员查找规则：</h4><ol><li><p>当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</p></li><li><p>如果没有就查找它的原型（也就是 <code>__proto__</code>指向的 <code>prototype</code> 原型对象）。</p></li><li><p>如果还没有就查找原型对象的原型（<code>Object</code>的原型对象）。</p></li><li><p>依此类推一直找到 <code>Object</code> 为止（<code>null</code>）。</p></li><li><p><code>__proto__</code>对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。</p></li></ol><hr><h4 id="构造函数的继承"><a href="#构造函数的继承" class="headerlink" title="构造函数的继承"></a>构造函数的继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 借用父构造函数继承属性</span></span><br><span class="line"><span class="comment">// 1. 父构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">uname</span>) &#123;</span><br><span class="line">    <span class="comment">// this 指向父构造函数的对象实例</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">money</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100000</span>);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 2 .子构造函数 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">uname, score</span>) &#123;</span><br><span class="line">    <span class="comment">// this 指向子构造函数的对象实例</span></span><br><span class="line">    <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, uname);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">score</span> = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Son.prototype = Father.prototype;  </span></span><br><span class="line"><span class="comment">// 这样直接赋值会有问题,如果修改了子原型对象,父原型对象也会跟着一起变化</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line"><span class="comment">// 如果利用对象的形式修改了原型对象,别忘了利用constructor 指回原来的构造函数</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Son</span>;</span><br><span class="line"><span class="comment">// 这个是子构造函数专门的方法</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">exam</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;孩子要考试&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="JavaScript中的新增方法"><a href="#JavaScript中的新增方法" class="headerlink" title="JavaScript中的新增方法"></a>JavaScript中的新增方法</h1><h4 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h4><p>迭代(遍历)方法：<code>forEach()</code>、<code>map()</code>、<code>filter()</code>、<code>some()</code>、<code>every()</code>；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">currentValue,index, arr</span>)&#123;</span><br><span class="line"><span class="comment">// forEach()允许callback更改原始数组的元素</span></span><br><span class="line"><span class="comment">// 不能使用break</span></span><br><span class="line">arr1[index] = item/<span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = array.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">currentValue,index, arr</span>)&#123;</span><br><span class="line"><span class="comment">// map()会分配内存空间存储新数组并返回</span></span><br><span class="line"><span class="keyword">return</span> currentValue % <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = array.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">currentValue,index, arr</span>)&#123;</span><br><span class="line"><span class="comment">// 也是查找满足条件的元素 返回的是一个数组 而且是把所有满足条件的元素返回回来</span></span><br><span class="line"><span class="comment">// filter会将结果为true的数组存到新的数组里面，而map返回的是true和false。</span></span><br><span class="line"><span class="keyword">return</span> currentValue % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flag = array.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">currentValue,index, arr</span>)&#123;</span><br><span class="line"><span class="comment">// 查找满足条件的元素是否存在,返回的是一个布尔值,如果查找到第一个满足条件的元素就终止循环</span></span><br><span class="line"><span class="keyword">return</span> currentValue == <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line"><span class="comment">// 在some里面遇到return true就会退出循环</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h4><p><code>trim()</code>方法会从一个字符串的两端删除空白字符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">trim</span>()</span><br></pre></td></tr></table></figure><h4 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.keys() </span></span><br><span class="line"><span class="comment">// 效果类似 for…in，返回一个由属性名组成的数组</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(o))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.defineProperty() </span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,prop, descriptor)</span><br><span class="line"><span class="comment">// obj：必需。目标对象</span></span><br><span class="line"><span class="comment">// prop：必需。需定义或修改的属性的名字</span></span><br><span class="line"><span class="comment">// descriptor：必需。目标属性所拥有的特性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// descriptor是一个对象&#123;&#125;,包含四个参数。</span></span><br><span class="line"><span class="comment">// value:设置属性的值  默认为undefined</span></span><br><span class="line"><span class="comment">// writable:值是否可以重写。true |false  默认为false</span></span><br><span class="line"><span class="comment">// enumerable:目标属性是否可以被枚举。true |false 默认为 false</span></span><br><span class="line"><span class="comment">// configurable:目标属性是否可以被删除或是否可以再次修改特性 true|false  默认为false</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">a</span>; <span class="comment">// 删除对象的某个属性</span></span><br></pre></td></tr></table></figure><hr><h1 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h1><h4 id="函数的定义方式"><a href="#函数的定义方式" class="headerlink" title="函数的定义方式"></a>函数的定义方式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 函数声明方式 function 关键字 (命名函数)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="comment">// 2. 函数表达式 (匿名函数)</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="comment">// 3. 利用 new Function(&#x27;参数1&#x27;,&#x27;参数2&#x27;, &#x27;函数体&#x27;);</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;console.log(a + b)&#x27;</span>);</span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 4. 所有函数都是 Function 的实例(对象)</span></span><br><span class="line"><span class="comment">// 5. 函数也属于对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true // 数组、函数都属于对象 </span></span><br></pre></td></tr></table></figure><h4 id="函数的调用方式"><a href="#函数的调用方式" class="headerlink" title="函数的调用方式"></a>函数的调用方式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 普通函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人生的巅峰&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fn();   fn.call()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 对象的方法</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人生的巅峰&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">o.<span class="title function_">sayHi</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Star</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 绑定事件函数</span></span><br><span class="line"><span class="comment">// btn.onclick = function() &#123;&#125;;   // 点击了按钮就可以调用这个函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 定时器函数</span></span><br><span class="line"><span class="comment">// setInterval(function() &#123;&#125;, 1000);  这个函数是定时器自动1秒钟调用一次</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 立即执行函数</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人生的巅峰&#x27;</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 立即执行函数是自动调用</span></span><br></pre></td></tr></table></figure><h4 id="改变函数this指向"><a href="#改变函数this指向" class="headerlink" title="改变函数this指向"></a>改变函数this指向</h4><p>常用的有 <code>bind()</code>、<code>call()</code>、<code>apply()</code> 三种方法。</p><ol><li><p><code>call</code>方法调用一个对象，可以改变函数的this指向。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fun.call(thisArg,arg1, arg2, ...) </span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">&#125;;</span><br><span class="line">fn.<span class="title function_">call</span>(o, <span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>apply</code>方法，参数必须是数组(伪数组)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fun.apply(thisArg,[argsArray])</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// &#x27;pink&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">fn.<span class="title function_">apply</span>(o, [<span class="string">&#x27;pink&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Math.max();</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">66</span>, <span class="number">3</span>, <span class="number">99</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> max = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr);</span><br><span class="line"><span class="keyword">var</span> max = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, arr);</span><br><span class="line"><span class="keyword">var</span> max = <span class="title class_">Math</span>.<span class="title function_">max</span>(...arr)</span><br></pre></td></tr></table></figure></li><li><p><code>bind</code>方法不会调用函数，改变函数内部<code>this</code> 指向</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fun.bind(thisArg,arg1, arg2, ...) </span></span><br><span class="line"></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="comment">// bind写在定时器函数的外面，this指向btn</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">1000</span>)</span><br><span class="line">    <span class="comment">// 使用箭头函数    </span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在面向对象中，传递参数改变this</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">that</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(that)</span><br><span class="line">&#125;</span><br><span class="line">btn.<span class="property">onclick</span> = f.<span class="title function_">bind</span>(btn,<span class="variable language_">window</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h4><p><code>JavaScript</code>除正常模式外，还有严格模式<code>（strict mode）</code>，在严格的条件下运行 JS 代码。</p><p>严格模式有两种情况，应用到整个脚本或个别函数中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整个脚本的严格模式</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="comment">// 单个函数里面使用严格模式</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;use strict&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="严格模式的规范"><a href="#严格模式的规范" class="headerlink" title="严格模式的规范"></a>严格模式的规范</h5><ul><li><p>变量规定</p><ol><li><p>我们的变量名必须先声明再使用。</p></li><li><p>我们不能随意删除已经声明好的变量，<code>delete num</code>。</p></li></ol></li><li><p>this 指向问题</p><ol><li><p>严格模式下全局作用域中函数中的 <code>this</code> 是 <code>undefined</code>。</p></li><li><p>严格模式下,如果构造函数不加<code>new</code>调用, <code>this</code>指向的是<code>undefined</code> 如果给他赋值则会报错。</p></li><li><p>定时器<code>this</code>还是指向<code>window</code>。</p></li></ol></li><li><p>函数变化</p><ol><li>严格模式下函数里面的参数不允许有重名。</li><li>if、for里面不写声明函数。</li></ol></li></ul><blockquote><p>更多参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">严格模式 - JavaScript | MDN (mozilla.org)</a></p></blockquote><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><p>高阶函数是对其他函数进行操作的函数，它接收函数作为参数或将函数作为返回值输出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作为参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">callBack</span>) &#123;<span class="title function_">callBack</span>()&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)&#125;</span><br><span class="line"><span class="comment">// 返回函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;<span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>闭包<code>（closure）</code>指有权访问另一个函数作用域中变量的函数。</p><p>主要作用：延伸了变量的作用范围。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="title function_">f</span>()()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">num = <span class="literal">null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line"><span class="comment">// 闭包中数据常驻内存，不用时需要删掉，否则容易内存溢出。</span></span><br></pre></td></tr></table></figure><p>for循环是同步，而点击则是异步，里面的i已经是之后的值了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用闭包的方式得到当前小li 的索引号</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 利用for循环创建了4个立即执行函数</span></span><br><span class="line">    <span class="comment">// 立即执行函数也成为小闭包因为立即执行函数里面的任何一个函数都可以使用它的i这变量</span></span><br><span class="line">    (<span class="keyword">function</span>(<span class="params">i</span>) &#123;</span><br><span class="line">        lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上的方法有内存泄漏，创建了多个立即执行函数、古还是使用index来完成</span></span><br></pre></td></tr></table></figure><hr><h1 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h1><p>如果一个函数在内部可以调用其本身，那么这个函数就是递归函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (num === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    num++;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用递归求和，或者阶乘（+ 换成 *）</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + <span class="title function_">fn</span>(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 斐波那契数列，1、1、2、3、5、8、13、21...</span></span><br><span class="line"><span class="comment">// 前两项的和等于后面一项</span></span><br><span class="line"><span class="comment">// 用户输入第几个则得出斐波那契数列中该位置的值</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">x</span>(<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">x</span>(n - <span class="number">1</span>) + <span class="title function_">x</span>(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 递归树</span></span><br><span class="line"><span class="keyword">var</span> data = [</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;我是爸爸1&quot;</span>, <span class="attr">parent_id</span>: <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;我是爸爸2&quot;</span>, <span class="attr">parent_id</span>: <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;我是儿子3&quot;</span>, <span class="attr">parent_id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;我是孙子4&quot;</span>, <span class="attr">parent_id</span>: <span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">&quot;我是重孙5&quot;</span>, <span class="attr">parent_id</span>: <span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="number">6</span>, <span class="attr">name</span>: <span class="string">&quot;我是儿子6&quot;</span>, <span class="attr">parent_id</span>: <span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="number">7</span>, <span class="attr">name</span>: <span class="string">&quot;我是孙子7&quot;</span>, <span class="attr">parent_id</span>: <span class="number">6</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="number">8</span>, <span class="attr">name</span>: <span class="string">&quot;我是重孙8&quot;</span>, <span class="attr">parent_id</span>: <span class="number">7</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="number">9</span>, <span class="attr">name</span>: <span class="string">&quot;我是爸爸9&quot;</span>, <span class="attr">parent_id</span>: <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="number">10</span>, <span class="attr">name</span>: <span class="string">&quot;我是儿子10&quot;</span>, <span class="attr">parent_id</span>: <span class="number">9</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="number">11</span>, <span class="attr">name</span>: <span class="string">&quot;我是孙子11&quot;</span>, <span class="attr">parent_id</span>: <span class="number">10</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="number">12</span>, <span class="attr">name</span>: <span class="string">&quot;我是儿子12&quot;</span>, <span class="attr">parent_id</span>: <span class="number">1</span>&#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">tree</span>(<span class="params">x</span>) &#123;</span><br><span class="line">        <span class="comment">// x参数 接收的是我们需要规定为1级分类的id</span></span><br><span class="line">        <span class="keyword">let</span> treeArr = []</span><br><span class="line">        data.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> item.<span class="property">parent_id</span> === x;</span><br><span class="line">        &#125;).<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;   <span class="comment">//item是已经比对过的parent_id 0 的一级</span></span><br><span class="line">            treeArr.<span class="title function_">push</span>(</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">id</span>: item.<span class="property">id</span>,</span><br><span class="line">                    <span class="attr">label</span>: item.<span class="property">name</span>,</span><br><span class="line">                    <span class="attr">children</span>: <span class="title function_">tree</span>(item.<span class="property">id</span>)  <span class="comment">//这里再次调用自己</span></span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> treeArr</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">tree</span>(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><hr><h1 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h1><ol><li><p>浅拷贝只是拷贝一层, 更深层次对象级别的只拷贝引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Object.assign(target, ...sources)，对象也可以使用for in，数组forEach、push</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj1);</span><br><span class="line">obj2.<span class="property">a</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1,obj2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = [&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;]</span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="title class_">Object</span>.<span class="title function_">assign</span>([], arr1);</span><br><span class="line">arr2[<span class="number">0</span>] = &#123;<span class="attr">c</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1, arr2);</span><br></pre></td></tr></table></figure></li><li><p>深拷贝拷贝多层, 每一级别的数据都会拷贝。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用JSON转字符串，再解析成对象</span></span><br><span class="line"><span class="comment">// 注意obj中有函数、undefined、null、RegExp，会出现问题。</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: &#123;</span><br><span class="line">        <span class="attr">c</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line">o.<span class="property">b</span>.<span class="property">c</span> = <span class="number">3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj,o)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现深拷贝</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="comment">// 定义一个变量</span></span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="comment">//  如果当前需要深拷贝的是一个对象的话</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果是一个数组的话</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(target)) &#123;</span><br><span class="line">            result = []; <span class="comment">// 将result赋值为一个数组，并且执行遍历</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> target) &#123;</span><br><span class="line">                <span class="comment">// 递归克隆数组中的每一项</span></span><br><span class="line">                result.<span class="title function_">push</span>(<span class="title function_">deepClone</span>(target[i]))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断如果当前的值是null的话；直接赋值为null</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target === <span class="literal">null</span>) &#123;</span><br><span class="line">            result = <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// 判断如果当前的值是一个RegExp对象的话，直接赋值</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target.<span class="property">constructor</span> === <span class="title class_">RegExp</span>) &#123;</span><br><span class="line">            result = target;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 否则是普通对象，直接for in循环，递归赋值对象的所有值</span></span><br><span class="line">            result = &#123;&#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> target) &#123;</span><br><span class="line">                result[i] = <span class="title function_">deepClone</span>(target[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果不是对象的话，就是基本数据类型，那么直接赋值</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回最终结果</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式<code>（ Regular Expression ）</code>是用于匹配字符串中字符组合的模式。在<code>JavaScript</code>中，正则表达式也是对象。</p><h3 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 利用 RegExp对象来创建 正则表达式</span></span><br><span class="line"><span class="keyword">var</span> regexp = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/123/</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 利用字面量创建 正则表达式</span></span><br><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/123/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意//里面不需要加&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="测试正则表达式test"><a href="#测试正则表达式test" class="headerlink" title="测试正则表达式test"></a>测试正则表达式test</h3><p><code>test()</code> 正则对象方法，用于检测字符串是否符合该规则，该对象会返回 <code>true</code> 或 <code>false</code>，其参数是测试字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test 方法用来检测字符串是否符合正则表达式要求的规范</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="number">123</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="正则表达式的组成"><a href="#正则表达式的组成" class="headerlink" title="正则表达式的组成"></a>正则表达式的组成</h3><p>正则表达式可由简单和特殊字符组合，比如 <code>/ab*c/</code>，特殊字符称为元字符，如 <code>^</code> 、<code>$</code> 、<code>+</code> 。</p><blockquote><p>正则表达相关链接</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">MDN链接</a></p></li><li><p><a href="http://tool.oschina.net/regex">正则表达式测试链接</a></p></li></ul></blockquote><h4 id="正则表达式中的特殊字符"><a href="#正则表达式中的特殊字符" class="headerlink" title="正则表达式中的特殊字符"></a>正则表达式中的特殊字符</h4><p><strong>1.边界符</strong></p><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符。</p><p><img src="https://pic.imgdb.cn/item/61f646b02ab3f51d917d4e1d.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var rg = /abc/;  只要包含abc就可以 </span></span><br><span class="line"><span class="comment">// 精确匹配 要求必须是 abc字符串才符合规范</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^abc$/</span>; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abcd&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abcabc&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><strong>2.字符类</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符类: [] 表示有一系列字符可供选择，只要匹配其中一个就可以了</span></span><br><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/[abc]/</span>; </span><br><span class="line"><span class="comment">// 只要包含有a 或者、包含有b、或者包含有c，都返回为true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;andy&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;red&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rg1 = <span class="regexp">/^[abc]$/</span>; </span><br><span class="line"><span class="comment">// 三选一只有是a、或者是 b、或者是c，这三个字母才返回true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg1.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg1.<span class="title function_">test</span>(<span class="string">&#x27;aa&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg1.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-z]$/</span>; </span><br><span class="line"><span class="comment">// 26个英文字母任何一个字母返回true，-表示的是a到z的范围  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="number">1</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;A&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符组合</span></span><br><span class="line"><span class="comment">// 26个英文字母(大写和小写都可以)任何一个字母返回 true</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^[a-zA-Z0-9_-]$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="number">8</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;!&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// []加了^，就是排除里面输入的，只要有其他字符为true</span></span><br><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/^[^a-zA-Z0-9]$/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;!&#x27;</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>3.量词符</strong></p><p>量词符用来设定某个模式出现的次数。</p><p><img src="https://pic.imgdb.cn/item/61f646b02ab3f51d917d4e22.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  * 相当于 &gt;= 0 可以出现0次或者很多次 </span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a*$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaaa&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  + 相当于 &gt;= 1 可以出现1次或者很多次</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a+$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaaa&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  ?  相当于 1 || 0，只能是0、1</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a?$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaaa&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  &#123;3 &#125; 就是重复3次</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a&#123;3&#125;$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaa&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaaa&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  &#123;3, &#125;  大于等于3</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a&#123;3,&#125;$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaa&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  &#123;3,16&#125;  大于等于3 并且 小于等于16</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a&#123;3,6&#125;$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaa&#x27;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>4.括号总结</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^abc&#123;3&#125;$/</span>; </span><br><span class="line"><span class="comment">// 它只是让c重复三次，abccc</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abcabcabc&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abccc&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小括号表示优先级</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(abc)&#123;3&#125;$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abcabcabc&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abccc&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><strong>5.预定义类</strong></p><p>预定义类指的是某些常见模式的简写方式。</p><p><img src="https://pic.imgdb.cn/item/61f6476b2ab3f51d917e188e.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 座机号码验证两种格式: 010-12345678 或者 0530-1234567</span></span><br><span class="line"><span class="comment">// 正则里面的或者符号|</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;$/</span>;</span><br></pre></td></tr></table></figure><h3 id="正则替换"><a href="#正则替换" class="headerlink" title="正则替换"></a>正则替换</h3><p>正则表达式参数：<code>/表达式/[switch]</code>，有三种值：</p><ul><li>g：全局匹配</li><li>i：忽略大小写</li><li>gi：全局匹配 + 忽略大小写</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 替换 replace</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    div.<span class="property">innerHTML</span> = text.<span class="property">value</span>.<span class="title function_">replace</span>(<span class="regexp">/a|b/g</span>, <span class="string">&#x27;**&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="ES6新增"><a href="#ES6新增" class="headerlink" title="ES6新增"></a>ES6新增</h1><p><code>ES6</code>实际上是一个泛指，泛指<code>ES2015</code>及后续的版本。</p><h1 id="声明变量的关键字"><a href="#声明变量的关键字" class="headerlink" title="声明变量的关键字"></a>声明变量的关键字</h1><h3 id="let关键字"><a href="#let关键字" class="headerlink" title="let关键字"></a>let关键字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let声明的变量只在所处于的块级&#123;&#125;里面有效</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 防止循环变量变成全局变量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不存在变量提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用let关键字声明的变量具有暂时性死区特性</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 因为有let，不会受到外部影响故报错</span></span><br><span class="line">   <span class="keyword">let</span> num = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="const关键字"><a href="#const关键字" class="headerlink" title="const关键字"></a>const关键字</h3><p>声明常量，常量就是值（内存地址）不能变化的量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用const关键字声明的常量具有块级作用域</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用const关键字声明的常量必须赋初始值</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量声明后值不可更改，引用类地址不能修改但值可以。</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="variable constant_">PI</span> = <span class="number">100</span>; <span class="comment">// 不可修改</span></span><br><span class="line"><span class="keyword">const</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line">o = &#123;<span class="attr">a</span>: <span class="number">2</span>&#125; <span class="comment">// 不可修改</span></span><br><span class="line">o.<span class="property">a</span> = <span class="number">2</span> <span class="comment">// 可修改</span></span><br></pre></td></tr></table></figure><h3 id="var、let、const区别"><a href="#var、let、const区别" class="headerlink" title="var、let、const区别"></a>var、let、const区别</h3><table><thead><tr><th>var</th><th>let</th><th>const</th></tr></thead><tbody><tr><td>函数级作用域</td><td>块级作用域</td><td>块级作用域</td></tr><tr><td>变量提升</td><td>不存在变量提升</td><td>不存在变量提升</td></tr><tr><td>值可更改</td><td>值可更改</td><td>值不可更改</td></tr></tbody></table><hr><h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照一一对应的关系从数组中提取值然后将值赋值给变量。</span></span><br><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = ary;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a，b，c) <span class="comment">// 1,2,3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果解构不成功，变量的值为undefined。</span></span><br><span class="line"><span class="keyword">let</span> [d] = []; <span class="comment">// console.log(d)为undefined</span></span><br><span class="line"><span class="keyword">let</span> [d, f] = [<span class="number">1</span>]; <span class="comment">// console.log(f)为undefined</span></span><br></pre></td></tr></table></figure><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用变量的名字匹配对象的属性，匹配成功将对象属性的值赋值给变量</span></span><br><span class="line"><span class="keyword">let</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;a, b&#125; = o</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义不同的变量名称</span></span><br><span class="line"><span class="keyword">let</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>: c, <span class="attr">b</span>: d&#125; = o</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c, d)</span><br></pre></td></tr></table></figure><hr><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 箭头函数是用来简化函数定义语法的</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>) &#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一句代码结果是返回值，可以省略大括号</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">n1, n2</span>) =&gt; n1 + n2;    </span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 形参只有一个，小括号可以省略</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = v =&gt; &#123;</span><br><span class="line">    <span class="title function_">alert</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><h3 id="箭头函数不绑定this关键字"><a href="#箭头函数不绑定this关键字" class="headerlink" title="箭头函数不绑定this关键字"></a>箭头函数不绑定this关键字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指向的是函数定义位置的上下文this</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 这个this指向fn的this，如果没有就一直往上找</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;moxie&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> resFn = fn.<span class="title function_">call</span>(obj); <span class="comment">// obj</span></span><br><span class="line"><span class="title function_">resFn</span>() <span class="comment">// obj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">fn</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 这个this指向window，obj没有作用域</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fn</span>() <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">        <span class="attr">fn</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// 这个this指向f</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    obj.<span class="title function_">fn</span>() <span class="comment">// &#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">f.<span class="title function_">call</span>(&#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="箭头函数剩余参数"><a href="#箭头函数剩余参数" class="headerlink" title="箭头函数剩余参数"></a>箭头函数剩余参数</h3><p>剩余参数是实参大于形参，箭头函数没有<code>arguments</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 剩余参数使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">...args</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"><span class="comment">// 注意rest参数必须放在最后</span></span><br></pre></td></tr></table></figure><h1 id="拓展运算符"><a href="#拓展运算符" class="headerlink" title="拓展运算符"></a>拓展运算符</h1><p>扩展运算符<code>...</code>可以将数组或者对象转为用逗号分隔的参数序列。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组中的使用</span></span><br><span class="line"><span class="comment">// 1.直接使用...</span></span><br><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// ...ary代表1, 2, 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...ary) <span class="comment">// 1 2 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 1 2 3</span></span><br><span class="line"><span class="comment">// 使用 Math() 函数</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(...arr1)) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr1)) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.复制数组，注意的是这是一个浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [...arr1];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">// [ 1, 2, 3 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.合并数组</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...arr1, ...arr2]) <span class="comment">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">concat</span>(arr2)) <span class="comment">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br><span class="line"><span class="comment">// 使用push可以将arr2追加到arr1</span></span><br><span class="line">arr1.<span class="title function_">push</span>(...arr2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1) <span class="comment">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.数组添加元素</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">arr = [...arr, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.伪数组转换为真正的数组</span></span><br><span class="line"><span class="keyword">var</span> oDivs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ary = [...oDivs];</span><br><span class="line">ary.<span class="title function_">push</span>(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// 转化成真正的数组可以使用数组方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ary);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象中的使用</span></span><br><span class="line"><span class="comment">// 向对象添加属性</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line">obj = &#123;...obj, <span class="attr">c</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123;a: 1, b: 2, c: 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串的使用</span></span><br><span class="line"><span class="comment">// 1.直接使用</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="comment">// ...str代表&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.展开字符串变成数组</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> arr = [...str];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构中的使用</span></span><br><span class="line"><span class="comment">// 1.在解构对象的使用</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;a, ...rest&#125; = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, rest); <span class="comment">// 1 &#123;b: 2, c: 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.在解构数组的使用</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> [a,...rest] = arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, rest); <span class="comment">// 1 [2, 3]</span></span><br></pre></td></tr></table></figure><hr><h1 id="Array-的扩展方法"><a href="#Array-的扩展方法" class="headerlink" title="Array 的扩展方法"></a>Array 的扩展方法</h1><ul><li>Array.from()将类数组或可遍历对象转换为真正的数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须要有索引和length</span></span><br><span class="line"><span class="keyword">var</span> arr = &#123;</span><br><span class="line">    <span class="string">&quot;0&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;1&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;length&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Array.from()有两个参数，第一个为伪数组、后为一个处理函数</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="title class_">Array</span>.<span class="title function_">from</span>(arr, <span class="function"><span class="params">item</span> =&gt;</span> item * <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1) <span class="comment">// [2, 4]</span></span><br></pre></td></tr></table></figure><ul><li>Array.find()用于找出第一个符合条件的数组成员，返回为当前成员，如果没有找到返回undefined</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> target = ary.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> === <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target) <span class="comment">// &#123;id: 1, name: &#x27;张三&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = ary.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> === <span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1) <span class="comment">// [&#123;id: 1, name: &#x27;张三&#x27;&#125;,&#123;id: 1, name: &#x27;王五&#x27;&#125;]</span></span><br></pre></td></tr></table></figure><ul><li>Array.findIndex()用于找出第一个符合条件的数组成员的位置，如果没有找到返回-1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">let</span> index = ary.<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">15</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li>Array.includes()表示某个数组是否包含给定的值，返回布尔值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> result = ary.<span class="title function_">includes</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h1 id="String-的扩展方法"><a href="#String-的扩展方法" class="headerlink" title="String 的扩展方法"></a>String 的扩展方法</h1><ul><li>模板字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模板字符串使用$&#123;&#125;读取变量</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">`a<span class="subst">$&#123;str&#125;</span>`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1) <span class="comment">// ab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板字符串可以换行</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">`第一行</span></span><br><span class="line"><span class="string">第二行`</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板字符串可以调用函数得到返回值</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;我是fn函数&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> html = <span class="string">`我是模板字符串 <span class="subst">$&#123;fn()&#125;</span>`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(html) <span class="comment">// 我是模板字符串 我是fn函数</span></span><br></pre></td></tr></table></figure><ul><li>startsWith() 和 endsWith()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// startsWith()：表示参数字符串是否在原字符串的头部，返回布尔值</span></span><br><span class="line"><span class="comment">// endsWith()：表示参数字符串是否在原字符串的尾部，返回布尔值</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hello world!&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">startsWith</span>(<span class="string">&#x27;Hello&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">endsWith</span>(<span class="string">&#x27;!&#x27;</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>repeat()方法表示将原字符串重复n次，返回一个新字符串。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;y&quot;</span>.<span class="title function_">repeat</span>(<span class="number">5</span>)) <span class="comment">// &#x27;yyyyy&#x27;</span></span><br></pre></td></tr></table></figure><hr><h1 id="Set-数据结构"><a href="#Set-数据结构" class="headerlink" title="Set 数据结构"></a>Set 数据结构</h1><p><code>ES6</code>提供了新的数据结构<code>Set</code>。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Set数据，接受一个数组作为参数，用来初始化。</span></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>]);</span><br><span class="line"><span class="comment">// size代表Set数据中的个数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">size</span>) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Set来处理数组去重</span></span><br><span class="line"><span class="keyword">const</span> s3 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;b&quot;</span>]);</span><br><span class="line"><span class="keyword">const</span> ary = [...s3];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ary) <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例方法</span></span><br><span class="line"><span class="comment">// 1. add(value)：添加某个值，返回 Set 结构本身</span></span><br><span class="line"><span class="keyword">const</span> s4 = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="comment">// 向set结构中添加值 使用add方法</span></span><br><span class="line">s4.<span class="title function_">add</span>(<span class="string">&#x27;a&#x27;</span>).<span class="title function_">add</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s4.<span class="property">size</span>) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</span></span><br><span class="line"><span class="comment">// 从set结构中删除值 用到的方法是delete</span></span><br><span class="line"><span class="keyword">const</span> s4 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"><span class="keyword">const</span> r1 = s4.<span class="title function_">delete</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s4.<span class="property">size</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r1); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// has(value)：返回一个布尔值，表示该值是否为 Set 的成员</span></span><br><span class="line"><span class="comment">// 判断某一个值是否是set数据结构中的成员 使用has</span></span><br><span class="line"><span class="keyword">const</span> s4 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"><span class="keyword">const</span> r2 = s4.<span class="title function_">has</span>(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r2) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// clear()：清除所有成员，没有返回值</span></span><br><span class="line"><span class="comment">// 清空set数据结构中的值 使用clear方法</span></span><br><span class="line">s4.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s4.<span class="property">size</span>); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Set数据遍历，从中取值</span></span><br><span class="line"><span class="keyword">const</span> s5 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line">s5.<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h1 id="Map数据结构"><a href="#Map数据结构" class="headerlink" title="Map数据结构"></a>Map数据结构</h1><p>类似于对象，键名可以是各种类型的值，<code>Map</code>实现 <code>iterator</code>接口，可以使用<code>...</code>和<code>for of</code>进行遍历。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明 Map</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> key = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">m.<span class="title function_">set</span>(key, [<span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// size</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">size</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> m) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v); <span class="comment">// []形式，如：[&#x27;name&#x27;, &#x27;root&#x27;]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">m.<span class="title function_">delete</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(key)); <span class="comment">// [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空</span></span><br><span class="line">m.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure><hr><h1 id="简化对象的写法"><a href="#简化对象的写法" class="headerlink" title="简化对象的写法"></a>简化对象的写法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。</span></span><br><span class="line"><span class="comment">//这样的书写更加简洁</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;moxie&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> change = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我们可以改变你!!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name,</span><br><span class="line">    change,</span><br><span class="line">    <span class="title function_">improve</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我们可以提高你的技能&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure><hr><h1 id="函数的默认参数"><a href="#函数的默认参数" class="headerlink" title="函数的默认参数"></a>函数的默认参数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 允许给函数参数赋值初始值</span></span><br><span class="line"><span class="comment">// 1. 形参初始值具有默认值的参数, 一般位置要靠后(潜规则)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c = <span class="number">3</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 与解构赋值结合</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">&#123;a, b, c: d = <span class="number">3</span>&#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, d) <span class="comment">// admin, 18, 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><hr><h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><p><code>ES6</code> 引入了一种新的原始数据类型 <code>Symbol</code>，表示独一无二的值。它是 <code>JavaScript</code> 语言的第七种数据类型，是一种类似于字符串的数据类型。</p><p><strong>特点</strong></p><ul><li>Symbol 的值是唯一的，用来解决命名冲突的问题</li><li>Symbol 值不能与其他数据进行运算</li><li>Symbol 定义的对象属性不能使用 <code>for…in</code> 循环遍历，但是可以使用 <code>Reflect.ownKeys</code> 来获取对象的所有键名</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Symbol</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>(<span class="string">&#x27;moxie&#x27;</span>); <span class="comment">// 里面的参数相当于一个标识</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;moxie&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> s) <span class="comment">// symbol</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s === s1) <span class="comment">// false，唯一性</span></span><br><span class="line"><span class="comment">// Symbol.for 创建</span></span><br><span class="line"><span class="comment">// 上为函数，现在是函数对象之前有就返回一个，没有就创建一个</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;默谐&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;默谐&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2 === s3) <span class="comment">// true，</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能与其他数据进行运算</span></span><br></pre></td></tr></table></figure><h4 id="Symbol的使用"><a href="#Symbol的使用" class="headerlink" title="Symbol的使用"></a>Symbol的使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向对象中添加方法</span></span><br><span class="line"><span class="comment">// 场景：不清楚该对象是否拥有一个同名的可以使用Symbol</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;初始内容&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> uname = <span class="title class_">Symbol</span>(<span class="string">&#x27;uname&#x27;</span>) <span class="comment">// 或者使用一个对象let method = &#123;&#125;</span></span><br><span class="line">obj[uname] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;追加的内容&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">obj[<span class="string">&#x27;uname&#x27;</span>]() <span class="comment">// 初始内容</span></span><br><span class="line">obj[uname]() <span class="comment">// 追加的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二中方法</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;初始内容&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    [uname = <span class="title class_">Symbol</span>(<span class="string">&#x27;uname&#x27;</span>)]: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;追加的内容&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj[<span class="string">&#x27;uname&#x27;</span>]() <span class="comment">// 初始内容</span></span><br><span class="line">obj[uname]() <span class="comment">// 追加的内容</span></span><br></pre></td></tr></table></figure><h4 id="Symbol-内置值"><a href="#Symbol-内置值" class="headerlink" title="Symbol 内置值"></a>Symbol 内置值</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>Symbol.hasInstance</code></td><td>当其他对象使用 <code>instanceof</code> 运算符，判断是否为该对 象的实例时，会调用这个方法</td></tr><tr><td><code>Symbol.isConcatSpreadable</code></td><td>对象的 <code>Symbol.isConcatSpreadable</code> 属性等于的是一个 布尔值，表示该对象用<code>Array.prototype.concat()</code>时， 是否可以展开。</td></tr><tr><td><code>Symbol.species</code></td><td>创建衍生对象时，会使用该属性</td></tr><tr><td><code>Symbol.match</code></td><td>当执行 <code>str.match(myObject)</code> 时，如果该属性存在，会 调用它，返回该方法的返回值。</td></tr><tr><td><code>Symbol.replace</code></td><td>当该对象被 <code>str.replace(myObject)</code>方法调用时，会返回 该方法的返回值。</td></tr><tr><td><code>Symbol.search</code></td><td>当该对象被 <code>str.search (myObject)</code>方法调用时，会返回 该方法的返回值。</td></tr><tr><td><code>Symbol.split</code></td><td>当该对象被 <code>str.split (myObject)</code>方法调用时，会返回该 方法的返回值。</td></tr><tr><td><code>Symbol.iterator</code></td><td>对象进行 <code>for...of</code> 循环时，会调用 <code>Symbol.iterator</code> 方法， 返回该对象的默认遍历器</td></tr><tr><td><code>Symbol.toPrimitive</code></td><td>该对象被转为原始类型的值时，会调用这个方法，返 回该对象对应的原始类型值。</td></tr><tr><td><code>Symbol. toStringTag</code></td><td>在该对象上面调用 <code>toString</code> 方法时，返回该方法的返 回值</td></tr><tr><td><code>Symbol. unscopables</code></td><td>该对象指定了使用 <code>with</code> 关键字时，哪些属性会被 <code>with</code> 环境排除。</td></tr></tbody></table><hr><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>遍历器<code>Iterator</code>一种接口，用来访问不同数据结构。任何数据结构只要部署 <code>Iterator</code> 接口，就可以完成遍历操作。</p><ul><li><code>ES6</code> 创造了一种新的遍历命令 <code>for...of</code> 循环，Iterator 接口主要供 <code>for...of</code>遍历。</li><li>原生具备 <code>iterator</code> 接口的数据(可用 <code>for of</code> 遍历)，<code>Array、Arguments 、Set 、Map 、String 、TypedArray 、NodeList</code></li><li>工作原理<ol><li>创建一个指针对象，指向当前数据结构的起始位置</li><li>第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员</li><li>接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员</li><li>每调用 next 方法返回一个包含 value 和 done 属性的对象</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 for...of 遍历数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v); <span class="comment">// a b</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 工作原理</span></span><br><span class="line"><span class="keyword">let</span> iterator = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="comment">//调用对象的next方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value: &#x27;a&#x27;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value: &#x27;b&#x27;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------------</span></span><br><span class="line"><span class="comment">// 自定义对象的 for of 循环</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;默谐&quot;</span>,</span><br><span class="line">    <span class="attr">stus</span>: [</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">next</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (index &lt; _this.<span class="property">stus</span>.<span class="property">length</span>) &#123;</span><br><span class="line">                    <span class="keyword">const</span> result = &#123; <span class="attr">value</span>: _this.<span class="property">stus</span>[index], <span class="attr">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">                    index++; <span class="comment">// 下标自增</span></span><br><span class="line">                    <span class="keyword">return</span> result; <span class="comment">// 返回结果</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> banji) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><p>生成器函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成器函数的使用，声明函数加*</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">fn</span>(<span class="params">a, ...b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b); <span class="comment">// 1 [2, 3]</span></span><br><span class="line">    <span class="comment">// yield相当于分割函数，next先执行前面代码，再次next执行后面代码</span></span><br><span class="line">    <span class="keyword">let</span> c = <span class="keyword">yield</span> <span class="string">&#x27;分割&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 使用next方法传递参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数生成迭代器对象</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 调用传入实参</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value: &#x27;分割&#x27;, done: false&#125;</span></span><br><span class="line"><span class="comment">// next方法传入实参，作为上一个yield的返回值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;使用next方法传递参数&#x27;</span>)); <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">one</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">        <span class="comment">// next执行下一个yield</span></span><br><span class="line">        iterator.<span class="title function_">next</span>();</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">two</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">        iterator.<span class="title function_">next</span>();</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">one</span>();</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">two</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用生成器函数</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure><hr><h1 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h1><p>Promise 是 ES6 引入的异步编程的新解决方案。语法上 Promise 是一个构造函数， 用来封装异步操作并可以获取其成功或失败的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化 Promise 对象</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// resolve(&#x27;成功&#x27;);</span></span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;失败&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//调用 promise 对象的 then 方法</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 成功</span></span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(reason); <span class="comment">// 失败</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 直接使用catch就是失败的回调</span></span><br><span class="line">p.<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason); <span class="comment">// 失败</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式调用then方法的状态判断</span></span><br><span class="line"><span class="comment">// 1. 返回结果不是promise对象，then状态为成功</span></span><br><span class="line"><span class="comment">// 2. 返回结果是promise对象，then状态为返回的promise的状态</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = p1.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="number">3</span>)</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="promise的使用及其他"><a href="#promise的使用及其他" class="headerlink" title="promise的使用及其他"></a>promise的使用及其他</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装Promise函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetchRequest</span> = (<span class="params">url</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="title function_">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试故意将接口地址改错</span></span><br><span class="line"><span class="title function_">fetchRequest</span>(<span class="string">&#x27;xxx&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise.all 将多个 Promise 实例，包装成一个新的 Promise 实例。</span></span><br><span class="line"><span class="keyword">const</span> onePromise = <span class="title function_">fetchRequest</span>(<span class="string">&#x27;xxx1&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> twoPromise = <span class="title function_">fetchRequest</span>(<span class="string">&#x27;xxx2&#x27;</span>)</span><br><span class="line"><span class="comment">// Promise.all接受一个数组[],里面是两个Promise</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">    onePromise,</span><br><span class="line">    twoPromise</span><br><span class="line">]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise.race()里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。</span></span><br><span class="line"><span class="keyword">const</span> threePromise = <span class="title function_">fetchRequest</span>(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fourPromise = <span class="title function_">fetchRequest</span>(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"><span class="comment">// Promise.race接受一个数组[],里面是两个Promise</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([</span><br><span class="line">    threePromise,</span><br><span class="line">    fourPromise</span><br><span class="line">]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// try与catch</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 尝试执行代码块 ，检查是否有错误的代码块。</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="comment">// 捕获错误的代码块，如果 try 语句发生错误执行的代码块。</span></span><br><span class="line">        <span class="comment">// 如果 try 语句没发生错误该代码不会执行。</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a>ES6模块化</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 通用的导入方式</span></span><br><span class="line"><span class="comment">// 引入整个模块内容</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m <span class="keyword">from</span> <span class="string">&quot;./xxx.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 解构赋值形式</span></span><br><span class="line"><span class="comment">// export let m1 = &#x27;a&#x27;</span></span><br><span class="line"><span class="comment">// export let m2 = &#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;m1, m2&#125; <span class="keyword">from</span> <span class="string">&quot;./xxx.js&quot;</span>;</span><br><span class="line"><span class="comment">// 默认暴露的引入</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> m3&#125; <span class="keyword">from</span> <span class="string">&quot;./xxx.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 简便形式，针对默认暴露</span></span><br><span class="line"><span class="comment">// export default &#123;m1: &#x27;moxie&#x27;&#125;</span></span><br><span class="line"><span class="keyword">import</span> m <span class="keyword">from</span> <span class="string">&quot;./xxx.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出现重复的引入名定义别名</span></span><br><span class="line"><span class="keyword">import</span> m <span class="keyword">as</span> m3 <span class="keyword">from</span> <span class="string">&quot;./xxx.js&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>模块化方式二</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js文件模块引入</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m1 <span class="keyword">from</span> <span class="string">&quot;./m1.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m2 <span class="keyword">from</span> <span class="string">&quot;./m2.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m3 <span class="keyword">from</span> <span class="string">&quot;./m3.js&quot;</span>;</span><br><span class="line"><span class="comment">// index.js使用</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./app.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="防抖与节流"><a href="#防抖与节流" class="headerlink" title="防抖与节流"></a>防抖与节流</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 防抖</span></span><br><span class="line"><span class="comment">// 在第一次触发事件时，不立即执行函数，而是给出一个期限值</span></span><br><span class="line"><span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#input&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> timer;</span><br><span class="line">input.<span class="property">onkeyup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 停止操作后才执行1次</span></span><br><span class="line">    <span class="comment">// 如果连续操作，则之前的延迟执行都被清除了</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始执行搜索...&quot;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节流</span></span><br><span class="line"><span class="comment">// 不断触发事件，但是在指定的单位时间内只触发一次</span></span><br><span class="line"><span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#input&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> lastTime = <span class="number">0</span>;</span><br><span class="line">input.<span class="property">onkeyup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> nowTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">    <span class="keyword">if</span> (nowTime - lastTime &gt; <span class="number">3000</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始执行搜索...&quot;</span>)</span><br><span class="line">        lastTime = nowTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用教程</title>
      <link href="/2022/01/10/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2022/01/10/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><p>本文主要介绍Git的一些基本操作。</p><h1 id="Git的下载"><a href="#Git的下载" class="headerlink" title="Git的下载"></a>Git的下载</h1><ul><li><p>Windows：<a href="https://git-scm.com/">Git下载</a></p></li><li><p>Mac：在苹果商店安装<code>xcode</code></p></li></ul><hr><h1 id="Gitee-新建远程仓库"><a href="#Gitee-新建远程仓库" class="headerlink" title="Gitee 新建远程仓库"></a>Gitee 新建远程仓库</h1><ul><li><p><a href="https://gitee.com/">Gitee官网</a></p></li><li><p><a href="https://github.com/">Github官网</a></p></li><li><p><a href="https://coding.net/">coding官网</a></p></li></ul><hr><h1 id="设置用户名与邮箱"><a href="#设置用户名与邮箱" class="headerlink" title="设置用户名与邮箱"></a>设置用户名与邮箱</h1><p>windows用户<code>git bash</code>运行</p><p>mac直接开启命令行运行</p><p><strong>设置全局:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 参考你自己的地址</span><br><span class="line">git config --global user.name &quot;moxie&quot;</span><br><span class="line">git config --global user.email &quot;2287930290@qq.com&quot;</span><br></pre></td></tr></table></figure><hr><h1 id="新建本地项目与仓库"><a href="#新建本地项目与仓库" class="headerlink" title="新建本地项目与仓库"></a>新建本地项目与仓库</h1><p>自行创建一个文件夹，里面放一点代码，命令行cd 进去后，初始化本地仓库。</p><p>如：windows 切换盘符，使用命令 D: ，然后在cd xxx/learn。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><hr><h1 id="添加add"><a href="#添加add" class="headerlink" title="添加add"></a>添加add</h1><p>告诉Git，你要添加的文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 单个文件</span><br><span class="line">git add index.html</span><br><span class="line">// 全部添加</span><br><span class="line">git add -A</span><br></pre></td></tr></table></figure><hr><h1 id="提交commit"><a href="#提交commit" class="headerlink" title="提交commit"></a>提交commit</h1><p>提交到本地仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;初次提交&quot; </span><br></pre></td></tr></table></figure><hr><h1 id="秘钥的生成"><a href="#秘钥的生成" class="headerlink" title="秘钥的生成"></a>秘钥的生成</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><ul><li><p>全部按回车，注意生成好的路径。</p></li><li><p>windows用户：根据路径<code>C:\Users\用户名\.ssh</code>找到秘钥，苹果电脑：<code>open ~/.ssh</code>。</p></li><li><p>找到本地的 <code>id_rsa.pub</code>后，复制到 <code>github</code> -&gt; <code>用户头像/settings/ssh and gpg keys</code>。</p></li><li><p>Gitee也在设置Shh添加公钥即可。</p></li></ul><hr><h1 id="添加远程仓库地址"><a href="#添加远程仓库地址" class="headerlink" title="添加远程仓库地址"></a>添加远程仓库地址</h1><p>注意用ssh的则就是职业密钥，如果为HTTPS则不需要密钥，但是每次都要输入账号和密码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 提交分支</span><br><span class="line">git branch -M main</span><br><span class="line"></span><br><span class="line">git remote add origin git@gitee.com:moxiedws/learn.git</span><br></pre></td></tr></table></figure><hr><h1 id="推送push"><a href="#推送push" class="headerlink" title="推送push"></a>推送push</h1><p>推送到远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>刷新 Gitee，看看代码是否上去了</p><hr><h1 id="第二次提交代码"><a href="#第二次提交代码" class="headerlink" title="第二次提交代码"></a>第二次提交代码</h1><p>修改下本地的代码，然后重新推送到 Github 上去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add -A </span><br><span class="line">        </span><br><span class="line">git commit -m &quot;修改了，第二次提交&quot;</span><br><span class="line"></span><br><span class="line">git push   </span><br></pre></td></tr></table></figure><hr><h1 id="pull拉取代码"><a href="#pull拉取代码" class="headerlink" title="pull拉取代码"></a>pull拉取代码</h1><p>这时候，在 Github上直接修改代码，模拟第二个用户提交了新的内容。</p><p>你本地的代码，会比 Github 上的旧一些，你需要把 Github上最新代码下载下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>检查本地代码是否更新了</p><hr><h1 id="代码克隆clone"><a href="#代码克隆clone" class="headerlink" title="代码克隆clone"></a>代码克隆clone</h1><p>将本地的项目直接删掉（或者你找一个新的目录开始操作，不能和刚才的项目放在一起，不然clone项目文件夹会重名的），现在模拟第二个用户操作，先克隆。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@gitee.com:moxiedws/learn.git</span><br></pre></td></tr></table></figure><hr><h1 id="Git排除文件"><a href="#Git排除文件" class="headerlink" title="Git排除文件"></a>Git排除文件</h1><p>在根目录中<code>.gitignore</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 排除一些文件</span><br><span class="line">.idea</span><br></pre></td></tr></table></figure><p>上传到Gitee则会没有这些排除的文件</p><h1 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h1><h4 id="创建分支进行版本的控制"><a href="#创建分支进行版本的控制" class="headerlink" title="创建分支进行版本的控制"></a>创建分支进行版本的控制</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 新建分支并转移到此位置</span><br><span class="line">git checkout -b NewBranch</span><br><span class="line"></span><br><span class="line">// 查看所有分支</span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line">// 切换分支切换到master</span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">// 删除本地分支NewBranch</span><br><span class="line">git branch -D NewBranch</span><br><span class="line"></span><br><span class="line">// 上传分支(注意需要在分支目录中进行)</span><br><span class="line">git add -A (或文件名)</span><br><span class="line">git commit -m &quot;new branch&quot;</span><br><span class="line">git push origin NewBrLanch</span><br></pre></td></tr></table></figure><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 回到主分支 master</span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">// 将主分支数据拉到本地</span><br><span class="line">git pull</span><br><span class="line">// 强行合并 (可能会出错，master很有可能也更新)</span><br><span class="line">git merge NewBranch</span><br><span class="line"></span><br><span class="line">// 假设说上面的和合并出现问题，那就手动合并</span><br><span class="line">vim Readme   // 手动合并标识文件</span><br><span class="line">git add -A</span><br><span class="line">git push origin master    // 合并之后就可以提交到master了</span><br><span class="line"></span><br><span class="line">// 查看从什么地方出现的分支</span><br><span class="line">git log -graph</span><br></pre></td></tr></table></figure><hr><h1 id="使用Sourcetree软件"><a href="#使用Sourcetree软件" class="headerlink" title="使用Sourcetree软件"></a>使用Sourcetree软件</h1><p><a href="https://www.sourcetreeapp.com/">Sourcetree地址</a></p><p><strong>Sourcetree添加密钥</strong>：工具选项里面添加密钥，选择<code>Openssh</code>。</p><p><img src="https://pic.imgdb.cn/item/61dc4f422ab3f51d91f81e73.png"></p><p><strong>博主建议</strong>：首次使用命令行连接远程仓库进行推送，之后使用软件可以看到每次修改的具体文件，并且只会提交这些修改的文件，方面查看与维护。</p><p>另外关于软件的教程：可参考网上的教程文档。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo优化教程</title>
      <link href="/2022/01/09/Hexo%E4%BC%98%E5%8C%96%E6%95%99%E7%A8%8B/"/>
      <url>/2022/01/09/Hexo%E4%BC%98%E5%8C%96%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Hexo优化使你的博客更加好看，同时方便阅读。</p><p>本文记录了本人在Hexo博客优化的相关配置，以及遇到的一些问题。</p><hr><h1 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h1><p>你可以在官方<a href="https://hexo.io/themes/">Hexo主题</a>网页中选择你喜爱的主题，并进行相关优化。</p><blockquote><p>注：本人使用的是Butterfly主题，选择一个好的主题是非常必要的。</p><p>如果选择的主题不好，出现一些问题是无法解决的；</p><p>博主之前踩过坑：比如本地配置完后没有任何问题，但是部署却发生意外的问题。</p></blockquote><p>推荐选择比较火热的主题，出现问题也方面网上查询相关问题。</p><p><strong>下文以<code>butterfly</code>主题开展重要的一些配置，希望对你有帮助！</strong></p><hr><h1 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 安装butterfly</span><br><span class="line">cnpm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure><hr><h1 id="主配置"><a href="#主配置" class="headerlink" title="主配置"></a>主配置</h1><h4 id="修改-Hexo-根目錄下的-config-yml，把主題改為butterfly"><a href="#修改-Hexo-根目錄下的-config-yml，把主題改為butterfly" class="headerlink" title="修改 Hexo 根目錄下的 _config.yml，把主題改為butterfly"></a>修改 Hexo 根目錄下的 <code>_config.yml</code>，把主題改為butterfly</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><h4 id="检查根目录package-json文件"><a href="#检查根目录package-json文件" class="headerlink" title="检查根目录package.json文件"></a>检查根目录package.json文件</h4><p>如果没有 pug 以及 stylus 的渲染器，则需要安裝</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h4 id="主题文件"><a href="#主题文件" class="headerlink" title="主题文件"></a>主题文件</h4><p>在 hexo 的根目录创建一个文件 <code>_config.butterfly.yml</code>，并把主题目录的 <code>_config.yml</code> 内容复制到 <code>_config.butterfly.yml</code> 去。</p><p>当然你也可以选择直接在主题目录<code>_config.yml</code>修改，但是考虑到减少升级主题后带来的不便，这样规范的做法更合理。</p><h4 id="主配置的其他项"><a href="#主配置的其他项" class="headerlink" title="主配置的其他项"></a>主配置的其他项</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: 网页标题</span><br><span class="line">subtitle: 副标题</span><br><span class="line">description: 描述信息</span><br><span class="line">keywords: 关键词</span><br><span class="line">author: 作者</span><br><span class="line">language: zh-CN          // 语言：中文</span><br><span class="line">timezone: Asia/Shanghai  // 时间：选择中国</span><br></pre></td></tr></table></figure><p>其他的可以不用配置</p><hr><h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><p>以下的<code>_config.butterfly.yml</code>配置为博主本人的部分配置，以及在butterfly文档中没有的一部分讲解，其中更加具体配置的您可以参考官方文档<a href="https://butterfly.js.org/">Butterfly主题</a></p><h4 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 创建页面</span><br><span class="line">hexo new page 页面名称</span><br></pre></td></tr></table></figure><p><code>Front-matter</code>是markdown文档中最上方使用<code>---</code>隔开的部分，是用来配置页面可文章的地方。</p><p><strong>其中：</strong>页面<code>Front-matter</code>一些重要的参数</p><table><thead><tr><th align="left">字段</th><th align="left">值</th></tr></thead><tbody><tr><td align="left">title</td><td align="left">【必需】页面标题</td></tr><tr><td align="left">date</td><td align="left">【必需】页面创建日期（一般自动生成）</td></tr><tr><td align="left">type</td><td align="left">【必需】标签、分类和友情链接三个页面需要配置（其他自定也页面不需要）</td></tr><tr><td align="left">top_img</td><td align="left">【可选】页面顶部图片</td></tr></tbody></table><p><strong>404页面</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// http://localhost:4000/404.html(主题设置开启)</span><br><span class="line">error_404:</span><br><span class="line">  enable: true</span><br><span class="line">  subtitle: &quot;页面没有找到&quot;</span><br><span class="line">  background: </span><br></pre></td></tr></table></figure><h4 id="文章配置"><a href="#文章配置" class="headerlink" title="文章配置"></a>文章配置</h4><table><thead><tr><th align="left">字段</th><th align="left">值</th></tr></thead><tbody><tr><td align="left">title</td><td align="left">【必需】文章标题</td></tr><tr><td align="left">date</td><td align="left">【必需】文章创建日期（一般自动生成）</td></tr><tr><td align="left">tags</td><td align="left">【可选】文章标签</td></tr><tr><td align="left">categories</td><td align="left">【可选】文章分类</td></tr><tr><td align="left">top_img</td><td align="left">【可选】页面顶部图片</td></tr><tr><td align="left">description</td><td align="left">【可选】文章描述</td></tr></tbody></table><blockquote><p><strong>设置文章分类categories的写法</strong>：</p></blockquote><ul><li>嵌套分类（这样会使分类 <code>Life</code> 成为 <code>Diary</code> 的子分类。）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">categories:</span><br><span class="line">  - Diary</span><br><span class="line">  - Life</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ul><li>并列分类（这样会使分类 <code>Life</code> 成为 <code>Diary</code> 的子分类。）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">categories:</span><br><span class="line">  - [Diary]</span><br><span class="line">  - [Life]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ul><li>并列嵌套分类</li></ul><p>这样会使 <code>PlayStation</code> 和 <code>Games</code> 同为 <code>Diary</code> 的子分类，而 <code>Life</code> 和 <code>Diary</code> 是并列分类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">categories:</span><br><span class="line">  - [Diary, PlayStation]</span><br><span class="line">  - [Diary, Games]</span><br><span class="line">  - [Life]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><blockquote><p><strong>设置文章标签tags写法</strong>：</p></blockquote><p>标签没有顺序性和层次性，<strong>只能设置为同级的</strong>。也就是说，标签只有一种用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">tags:</span><br><span class="line">  - PlayStation</span><br><span class="line">  - Games</span><br><span class="line">  - [Diary, Life]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>这样会被解析为 <code>PlayStation</code>、<code>Games</code>、<code>Diary,Life</code> 三个并列标签。</p><blockquote><p><strong>description</strong>：需要配置生效。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 选择method: 2，表示优先选择description，如果没有配置description，则显示自动节选的内容。</span><br><span class="line">index_post_content:</span><br><span class="line">  method: 2</span><br><span class="line">  length: 500</span><br></pre></td></tr></table></figure><hr><h1 id="实现Hexo的本地搜索"><a href="#实现Hexo的本地搜索" class="headerlink" title="实现Hexo的本地搜索"></a>实现Hexo的本地搜索</h1><ol><li><p>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-generator-search --save</span><br></pre></td></tr></table></figure></li><li><p>配置根目录下的 <code>_config.yml</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br></pre></td></tr></table></figure></li><li><p>修改主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></li></ol><h1 id="本地图片引用和图床"><a href="#本地图片引用和图床" class="headerlink" title="本地图片引用和图床"></a>本地图片引用和图床</h1><h4 id="本地图片引用"><a href="#本地图片引用" class="headerlink" title="本地图片引用"></a>本地图片引用</h4><p>在<code>/source</code>目录中新建images的文件夹，可以将图片放在里面。</p><p>在配置文件或者其他文章中图片的引用地址则：<code>/images/xxx.jpg</code>这样的路径，</p><p>进行<code>hexo g</code>后会发现<code>public</code>中出现一个images的文件夹，上方是按照这个路径来引用的。</p><h4 id="图床搭建"><a href="#图床搭建" class="headerlink" title="图床搭建"></a>图床搭建</h4><p>利用第三的库，将图片上传到别人的服务器获取外链，可以直接通过浏览器访问。</p><p>博主使用的是免费<a href="https://www.superbed.cn/">聚合图床</a>这一款服务，你也可以使用其他的服务。</p><p>注意：使用第三方一定需要做好备份！！！</p><hr><h1 id="Hexo文档中的跳转"><a href="#Hexo文档中的跳转" class="headerlink" title="Hexo文档中的跳转"></a>Hexo文档中的跳转</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 上下文的跳转（地址就是文章标题）</span><br><span class="line">[](#前言)</span><br><span class="line"></span><br><span class="line">// 跳转到Hexo中的某文章</span><br><span class="line">&#123;% post_link Hexo搭建个人博客 %&#125;</span><br><span class="line">&#123;% post_link Hexo搭建个人博客 %&#125;</span><br><span class="line"></span><br><span class="line">// 跳转到某文章的特定标题瞄点处</span><br><span class="line">&lt;a href=&quot;&#123;% post_path &#x27;文章名称&#x27; %&#125;#标题名称&quot;&gt;显示文本&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;&#123;% post_path &#x27;Hexo搭建个人博客&#x27; %&#125;#参考&quot;&gt;hexo搭建个人博客参考&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>效果展示</strong></p><p><a href="#%E5%89%8D%E8%A8%80">跳转前言</a></p><a href="/2021/12/05/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" title="Hexo搭建个人博客">Hexo搭建个人博客</a><p><a href="/2021/12/05/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#参考">hexo搭建个人博客参考</a></p><hr><h1 id="实现版本控制"><a href="#实现版本控制" class="headerlink" title="实现版本控制"></a>实现版本控制</h1><p>可能你会发现上传到Gitee上，部署的只是一个静态的文件。</p><p>如果需要通过其他电脑实现开发，这就需要用到Git的版本控制。</p><p>具体实现参考<a href="/2022/01/10/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/#Git分支">Git分支</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://hexo.io/zh-cn/">Hexo</a></li><li><a href="https://butterfly.js.org/">Butterfly主题</a></li><li><a href="https://theme-stun.github.io/docs/zh-CN/">hexo-theme-stun</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReactNative基础</title>
      <link href="/2021/12/05/ReactNative%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/12/05/ReactNative%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>官方文档： <a href="https://www.react-native.cn/docs/environment-setup">react native</a></p></blockquote><hr><h1 id="windows环境搭建"><a href="#windows环境搭建" class="headerlink" title="windows环境搭建"></a>windows环境搭建</h1><p>没有<code>Node</code>和<code>yarn</code>的需要安装</p><h4 id="一、安装JDK"><a href="#一、安装JDK" class="headerlink" title="一、安装JDK"></a>一、安装JDK</h4><p>注意必须选择JDK的版本必须是1.8，并且是x64的版本</p><blockquote><p><a href="https://www.oracle.com/java/technologies/downloads/#java8-windows">https://www.oracle.com/java/technologies/downloads/#java8-windows</a></p></blockquote><h4 id="二、配置JDK的环境变量"><a href="#二、配置JDK的环境变量" class="headerlink" title="二、配置JDK的环境变量"></a>二、配置JDK的环境变量</h4><p>此电脑的属性里面选择高级系统设置，选择环境变量；</p><p>系统环境变量里面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 新建JAVA_HOME环境（下为默认地址），注意是JDK不是JRE的目录；</span><br><span class="line">C:\Program Files\Java\Jdk1.8.0_xxxx（版本号）</span><br><span class="line">// 新建CLASSPATH环境（如下）</span><br><span class="line">.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</span><br><span class="line">// 在Path中添加下面两个路径</span><br><span class="line">%JAVA_HOME%\bin</span><br><span class="line">%JAVA_HOME%\jre\bin</span><br><span class="line">// java -version 查看版本信息</span><br></pre></td></tr></table></figure><h4 id="三、Android-Studio-安装"><a href="#三、Android-Studio-安装" class="headerlink" title="三、Android Studio 安装"></a>三、Android Studio 安装</h4><blockquote><p><a href="https://developer.android.google.cn/studio/">https://developer.android.google.cn/studio/</a></p></blockquote><h4 id="四、配置android-sdk环境"><a href="#四、配置android-sdk环境" class="headerlink" title="四、配置android sdk环境"></a>四、配置android sdk环境</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// ANDROID_HOME环境（注意路径不能有中文）</span><br><span class="line">C:\Users\你的用户名\AppData\Local\Android\Sdk</span><br><span class="line">// PATH里面添加</span><br><span class="line">%ANDROID_HOME%\platform-tools</span><br><span class="line">%ANDROID_HOME%\emulator</span><br><span class="line">%ANDROID_HOME%\tools</span><br><span class="line">%ANDROID_HOME%\tools\bin</span><br><span class="line">// 软件创建真机模拟器要选择Q开头的（Q API Level 29 image）</span><br></pre></td></tr></table></figure><h4 id="注意：一些问题"><a href="#注意：一些问题" class="headerlink" title="注意：一些问题"></a>注意：一些问题</h4><ol><li><p>在启动安卓模拟器会出现Unable to locate adb报错？</p><p>解决：打开Android Studio软件上方file - Project Structure 里面设置Project SDK开始为No SDK，改为Add Android SDK…选择你的android sdk的目录即可（修改默认地址的也是自己的SDK目录）</p></li><li><p>android sdk不是默认安装C盘，启动不了模拟器？</p><p>首先确保Tools-&gt;SDK manager-&gt;Appearance&amp;Behavior-&gt;System Settings-&gt;Android SDK的一些选项打上了对勾</p><p><img src="https://pic.imgdb.cn/item/61e531a62ab3f51d9119046f.png"></p><p><img src="https://pic.imgdb.cn/item/61e531c72ab3f51d91191fac.png"></p><p>解决：将C盘.android目录下的avd复制到你的android sdk的目录下，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 新建ANDROID_SDK_HOME环境</span><br><span class="line">// 路径为你复制后的avd路径</span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://blog.csdn.net/qq_48435252/article/details/114446668">https://blog.csdn.net/qq_48435252/article/details/114446668</a></p></blockquote></li><li><p>启动模拟器后出现弹框提示？</p><p><img src="https://pic.imgdb.cn/item/61e5322e2ab3f51d91197fdf.png"></p><p> 解决：可能是你不是默认的android sdk地址，点击虚拟机右侧引导栏最下方的···按钮后-模拟器手机右下方；Settings设置，右下图的地址关闭按钮选择目录（为你的android sdk地址目录-platform-tools-adb.exe）</p><p><img src="https://pic.imgdb.cn/item/61e5322e2ab3f51d91197fd7.png"></p><blockquote><p>参考：<a href="https://blog.csdn.net/qq_45951779/article/details/119742277">https://blog.csdn.net/qq_45951779/article/details/119742277</a></p></blockquote></li></ol><hr><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 新建项目</span><br><span class="line">npx react-native init AwesomeProject</span><br><span class="line">// 打开模拟器或者真机</span><br><span class="line">// 真机需要打开发者模式，开发选项中选择usb线调试（模拟器和真机二选一）</span><br><span class="line">// 启动命令</span><br><span class="line">yarn android</span><br></pre></td></tr></table></figure><hr><h1 id="查看连接的设备"><a href="#查看连接的设备" class="headerlink" title="查看连接的设备"></a>查看连接的设备</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br><span class="line">显示 emulator-5554 offline</span><br><span class="line">解决：模拟器选择Wipe Data （擦除数据即可）</span><br><span class="line">启动模拟器界面的右侧下拉三角里包含此项</span><br></pre></td></tr></table></figure><hr><h2 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// ScrollView组件，在超出页面会上下滚动条，一般在最外面包裹</span><br><span class="line">// FlatList循环</span><br><span class="line">// 文本字符串必须在&lt;Text&gt;&lt;/Text&gt;组件中</span><br><span class="line">// ScrollView和FlatList不能同时存在，否者报错</span><br></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 原生的fetch（读取数据需要转换成json格式）</span><br><span class="line">function getMoviesFromApiAsync() &#123;</span><br><span class="line">  return fetch(</span><br><span class="line">    &#x27;xxx&#x27;</span><br><span class="line">  )</span><br><span class="line">    .then((response) =&gt; response.json())</span><br><span class="line">    .then((responseJson) =&gt; &#123;</span><br><span class="line">      return responseJson.movies;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((error) =&gt; &#123;</span><br><span class="line">      console.error(error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="React-Navigation路由"><a href="#React-Navigation路由" class="headerlink" title="React Navigation路由"></a>React Navigation路由</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 安装navigatin</span><br><span class="line">yarn add @react-navigation/native</span><br><span class="line">yarn add react-native-screens react-native-safe-area-context // 解决屏幕适配</span><br><span class="line">yarn add @react-navigation/native-stack</span><br><span class="line"></span><br><span class="line">// 安卓配置</span><br><span class="line">// 编辑android/app/src/main/java/你的包名/MainActivity.java</span><br><span class="line">// 顶部引用</span><br><span class="line">import android.os.Bundle</span><br><span class="line">// 增加到MainActivity Class内部</span><br><span class="line">@Override</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">  super.onCreate(null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// iOS安装包后需要跑这个</span><br><span class="line">npx pod-install ios</span><br></pre></td></tr></table></figure><table><thead><tr><th>用法</th><th>说明</th></tr></thead><tbody><tr><td>navigation.navigate(‘Details’)</td><td>Details是另一页面的name如果已经在Details页面了，则不能再次跳转</td></tr><tr><td>navigation.push(‘Details’)</td><td>已经在Details页面了，还可以继续跳转Details</td></tr><tr><td>navigation.goBack()</td><td>返回上一页</td></tr><tr><td>navigation.popToTop()</td><td>返回到一个 Stack 的第一个页面</td></tr></tbody></table><table><thead><tr><th>用法</th><th>说明</th></tr></thead><tbody><tr><td><code>navigation.navigate(&#39;Details&#39;, &#123;   id: 12, otherParam: &#39;还可以同时传递其他参数&#39;&#125;);</code></td><td>传id和其他参数到Details页面</td></tr><tr><td><code>navigation.setParams(&#123; id: 2&#125;)</code></td><td>通过代码，手动设置参数</td></tr><tr><td><code>initialParams=&#123;&#123; id: 99 &#125;&#125;</code></td><td>初始参数，需要配置到中</td></tr><tr><td><code>navigation.navigate(&#123;   name: &#39;Home&#39;, params: &#123; post: postText &#125;, merge: true&#125;)</code></td><td>传递参数到上一个页面接收：<code>React.useEffect(() =&gt; &#123; if (route.params?.post) &#123;&#125;&#125;, [route.params?.post])</code></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// 基本路由</span><br><span class="line">import * as React from &#x27;react&#x27;;</span><br><span class="line">import &#123; View, Text, Button &#125; from &#x27;react-native&#x27;;</span><br><span class="line">import &#123; NavigationContainer &#125; from &#x27;@react-navigation/native&#x27;;</span><br><span class="line">import &#123; createNativeStackNavigator &#125; from &#x27;@react-navigation/native-stack&#x27;;</span><br><span class="line">// 接受navigation用来跳转</span><br><span class="line">function Home(&#123; navigation &#125;) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;View&gt;</span><br><span class="line">      &lt;Text&gt;这里是首页&lt;/Text&gt;</span><br><span class="line">      &lt;Button</span><br><span class="line">        title=&quot;跳转到详情页&quot;</span><br><span class="line">        onPress=&#123;() =&gt; &#123;</span><br><span class="line">        navigation.navigate(&quot;Details&quot;, &#123;</span><br><span class="line">          id: 12,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;&#125;/&gt;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">// 需要接收route</span><br><span class="line">function Details(&#123; route &#125;) &#123;</span><br><span class="line">  // 接收id</span><br><span class="line">  const &#123; id &#125; = route.params;</span><br><span class="line">  return (</span><br><span class="line">    &lt;View&gt;</span><br><span class="line">      &lt;Text&gt;这里是详情页&lt;/Text&gt;</span><br><span class="line">      &lt;Text&gt;你传过来的id是: &#123;JSON.stringify(id)&#125;&lt;/Text&gt;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const Stack = createNativeStackNavigator();</span><br><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    // 导航器容器</span><br><span class="line">    &lt;NavigationContainer&gt;</span><br><span class="line">     &#123;/* 堆栈导航器 */&#125;</span><br><span class="line">      &lt;Stack.Navigator&gt;</span><br><span class="line">       &#123;/* 堆栈导航屏幕 */&#125;</span><br><span class="line">        &lt;Stack.Screen name=&quot;Home&quot; component=&#123;Home&#125; options=&#123;&#123; title: &#x27;首页&#x27; &#125;&#125;/&gt;</span><br><span class="line">        &lt;Stack.Screen name=&quot;Details&quot; component=&#123;Details&#125; /&gt;</span><br><span class="line">      &lt;/Stack.Navigator&gt;</span><br><span class="line">    &lt;/NavigationContainer&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><hr><h1 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h1><h4 id="顶部-Header-Bar"><a href="#顶部-Header-Bar" class="headerlink" title="顶部 Header Bar"></a>顶部 Header Bar</h4><table><thead><tr><th align="left">用法</th><th>说明</th></tr></thead><tbody><tr><td align="left">options={({ route }) =&gt; ({ title: route.params.title })}</td><td>在stack中配置，会取得上一页传递过来的title参数</td></tr><tr><td align="left">navigation.setOptions({ title: ‘标题更新了!’ })}</td><td>通过代码，手动设置title</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">// 组件里面跳转设置参数</span><br><span class="line">&lt;Button</span><br><span class="line">  title=&quot;跳转到详情页&quot;</span><br><span class="line">  onPress=&#123;() =&gt;</span><br><span class="line">    navigation.navigate(&#x27;Details&#x27;, &#123; title: &#x27;我自定义的标题&#x27; &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">/&gt;</span><br><span class="line">// 自定义组件，设置Header Bar</span><br><span class="line">function LogoTitle() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Image</span><br><span class="line">      style=&#123;&#123; width: 150, height: 38 &#125;&#125;</span><br><span class="line">      source=&#123;&#123; uri: &#x27;xxx&#x27; &#125;&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">// 导出App</span><br><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;NavigationContainer&gt;</span><br><span class="line">      &lt;Stack.Navigator</span><br><span class="line">        screenOptions=&#123;&#123;</span><br><span class="line">          headerStyle: &#123;</span><br><span class="line">            backgroundColor: &#x27;#f4511e&#x27;,</span><br><span class="line">          &#125;,</span><br><span class="line">          headerTintColor: &#x27;#fff&#x27;,</span><br><span class="line">          headerTitleStyle: &#123;</span><br><span class="line">            fontWeight: &#x27;bold&#x27;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;&#125;&gt;</span><br><span class="line">        &lt;Stack.Screen</span><br><span class="line">          name=&quot;Home&quot;</span><br><span class="line">          component=&#123;HomeScreen&#125;</span><br><span class="line">          options=&#123;&#123; headerTitle: props =&gt; &lt;LogoTitle &#123;...props&#125; /&gt; &#125;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;Stack.Screen</span><br><span class="line">          name=&quot;Details&quot;</span><br><span class="line">          component=&#123;DetailsScreen&#125;</span><br><span class="line">          // 接收route，只能放在这里</span><br><span class="line">          options=&#123;(&#123; route &#125;) =&gt; (&#123; title: route.params.title &#125;)&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/Stack.Navigator&gt;</span><br><span class="line">    &lt;/NavigationContainer&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// js修改标题</span><br><span class="line"> &lt;Button</span><br><span class="line">     title=&quot;修改标题&quot;</span><br><span class="line">     onPress=&#123;() =&gt; navigation.setOptions(&#123; title: &#x27;标题更新了!&#x27; &#125;)&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h4 id="顶部按钮"><a href="#顶部按钮" class="headerlink" title="顶部按钮"></a>顶部按钮</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &#x27;react&#x27;;</span><br><span class="line">import &#123; Text, Button &#125; from &#x27;react-native&#x27;;</span><br><span class="line">import &#123; NavigationContainer &#125; from &#x27;@react-navigation/native&#x27;;</span><br><span class="line">import &#123; createNativeStackNavigator &#125; from &#x27;@react-navigation/native-stack&#x27;;</span><br><span class="line"></span><br><span class="line">function HomeScreen(&#123; navigation &#125;) &#123;</span><br><span class="line">  const [count, setCount] = React.useState(0);</span><br><span class="line"></span><br><span class="line">  React.useLayoutEffect(() =&gt; &#123;</span><br><span class="line">    navigation.setOptions(&#123;</span><br><span class="line">      headerRight: () =&gt; (</span><br><span class="line">        &lt;Button onPress=&#123;() =&gt; setCount(c =&gt; c + 1)&#125; title=&quot;增加计数&quot; /&gt;</span><br><span class="line">      ),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, [navigation]);</span><br><span class="line"></span><br><span class="line">  return &lt;Text style=&#123;&#123; fontSize: 24 &#125;&#125;&gt;计数: &#123;count&#125;&lt;/Text&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const Stack = createNativeStackNavigator();</span><br><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;NavigationContainer&gt;</span><br><span class="line">      &lt;Stack.Navigator&gt;</span><br><span class="line">        &lt;Stack.Screen</span><br><span class="line">          name=&quot;Home&quot;</span><br><span class="line">          component=&#123;HomeScreen&#125;</span><br><span class="line">          options=&#123;&#123; title: &#x27;首页&#x27; &#125;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/Stack.Navigator&gt;</span><br><span class="line">    &lt;/NavigationContainer&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><h4 id="底部-Tab-栏"><a href="#底部-Tab-栏" class="headerlink" title="底部 Tab 栏"></a>底部 Tab 栏</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">// 安装</span><br><span class="line">yarn add @react-navigation/bottom-tabs</span><br><span class="line">// 安装图标</span><br><span class="line">// 地址：https://oblador.github.io/react-native-vector-icons/</span><br><span class="line">yarn add react-native-vector-icons</span><br><span class="line">// 安卓配置android/app/build.gradle</span><br><span class="line">// 增加以下内容到最底部</span><br><span class="line">apply from: &quot;../../node_modules/react-native-vector-icons/fonts.gradle&quot;</span><br><span class="line">// iOS配置-修改/ios/Podfile</span><br><span class="line">// 增加以下内容到最底部</span><br><span class="line">pod &#x27;RNVectorIcons&#x27;, :path =&gt; &#x27;../node_modules/react-native-vector-icons&#x27;</span><br><span class="line">// cd ios 进入ios目录，执行</span><br><span class="line">pod update</span><br><span class="line">// 修改 index.js</span><br><span class="line">// ...</span><br><span class="line">import Ionicons from &#x27;react-native-vector-icons/Ionicons&#x27;;</span><br><span class="line">AppRegistry.registerComponent(appName, () =&gt; App);</span><br><span class="line">Ionicons.loadFont();</span><br><span class="line"></span><br><span class="line">// Tab 里都有多个页面</span><br><span class="line">import * as React from &#x27;react&#x27;;</span><br><span class="line">import &#123; Text, View, Button &#125; from &#x27;react-native&#x27;;</span><br><span class="line">// 引用图标库</span><br><span class="line">import Ionicons from &#x27;react-native-vector-icons/Ionicons&#x27;;</span><br><span class="line">import &#123; createNativeStackNavigator &#125; from &#x27;@react-navigation/native-stack&#x27;;</span><br><span class="line">// 引用Tab</span><br><span class="line">import &#123; createBottomTabNavigator &#125; from &#x27;@react-navigation/bottom-tabs&#x27;;</span><br><span class="line">import &#123; NavigationContainer &#125; from &#x27;@react-navigation/native&#x27;;</span><br><span class="line">// 详情页</span><br><span class="line">function DetailsScreen() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;View style=&#123;&#123; flex: 1, justifyContent: &#x27;center&#x27;, alignItems: &#x27;center&#x27; &#125;&#125;&gt;</span><br><span class="line">      &lt;Text&gt;这里是详情页!&lt;/Text&gt;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">// 主页</span><br><span class="line">function HomeScreen(&#123; navigation &#125;) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;View style=&#123;&#123; flex: 1, justifyContent: &#x27;center&#x27;, alignItems: &#x27;center&#x27; &#125;&#125;&gt;</span><br><span class="line">      &lt;Text&gt;这里是首页!&lt;/Text&gt;</span><br><span class="line">      &lt;Button</span><br><span class="line">        title=&quot;跳转到详情页&quot;</span><br><span class="line">        onPress=&#123;() =&gt; navigation.navigate(&#x27;Details&#x27;)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">// 设置页</span><br><span class="line">function SettingsScreen(&#123; navigation &#125;) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;View style=&#123;&#123; flex: 1, justifyContent: &#x27;center&#x27;, alignItems: &#x27;center&#x27; &#125;&#125;&gt;</span><br><span class="line">      &lt;Text&gt;这里是设置页!&lt;/Text&gt;</span><br><span class="line">      &lt;Button</span><br><span class="line">        title=&quot;跳转到详情页&quot;</span><br><span class="line">        onPress=&#123;() =&gt; navigation.navigate(&#x27;Details&#x27;)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">// 首页里面的跳转</span><br><span class="line">const HomeStack = createNativeStackNavigator();</span><br><span class="line">function HomeStackScreen() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;HomeStack.Navigator&gt;</span><br><span class="line">      &lt;HomeStack.Screen name=&quot;Home&quot; component=&#123;HomeScreen&#125; /&gt;</span><br><span class="line">      &lt;HomeStack.Screen name=&quot;Details&quot; component=&#123;DetailsScreen&#125; /&gt;</span><br><span class="line">    &lt;/HomeStack.Navigator&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">// 设置页里面的跳转</span><br><span class="line">const SettingsStack = createNativeStackNavigator();</span><br><span class="line">function SettingsStackScreen() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;SettingsStack.Navigator&gt;</span><br><span class="line">      &lt;SettingsStack.Screen name=&quot;Settings&quot; component=&#123;SettingsScreen&#125; /&gt;</span><br><span class="line">      &lt;SettingsStack.Screen name=&quot;Details&quot; component=&#123;DetailsScreen&#125; /&gt;</span><br><span class="line">    &lt;/SettingsStack.Navigator&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">// Tab跳转</span><br><span class="line">const Tab = createBottomTabNavigator();</span><br><span class="line">export default function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;NavigationContainer&gt;</span><br><span class="line">      &lt;Tab.Navigator</span><br><span class="line">        screenOptions=&#123;(&#123; route &#125;) =&gt; (&#123;</span><br><span class="line">          headerShown: false,</span><br><span class="line">          tabBarIcon: (&#123; focused, color, size &#125;) =&gt; &#123;</span><br><span class="line">            let iconName;</span><br><span class="line">            if (route.name === &#x27;HomeStack&#x27;) &#123;</span><br><span class="line">              iconName = focused ? &#x27;home&#x27; : &#x27;home-outline&#x27;;</span><br><span class="line">            &#125; else if (route.name === &#x27;SettingsStack&#x27;) &#123;</span><br><span class="line">              iconName = focused ? &#x27;settings&#x27; : &#x27;settings-outline&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">            // 返回Ionicons图标</span><br><span class="line">            return &lt;Ionicons name=&#123;iconName&#125; size=&#123;size&#125; color=&#123;color&#125; /&gt;;</span><br><span class="line">          &#125;,</span><br><span class="line">          // 激活</span><br><span class="line">          tabBarActiveTintColor: &#x27;#1f99b0&#x27;,</span><br><span class="line">          // 未选中</span><br><span class="line">          tabBarInactiveTintColor: &#x27;gray&#x27;,</span><br><span class="line">        &#125;)&#125;&gt;</span><br><span class="line">        &lt;Tab.Screen</span><br><span class="line">          name=&quot;HomeStack&quot;</span><br><span class="line">          component=&#123;HomeStackScreen&#125;</span><br><span class="line">          options=&#123;&#123;</span><br><span class="line">            // 小徽章</span><br><span class="line">            tabBarBadge: 4,</span><br><span class="line">            tabBarBadgeStyle: &#123;</span><br><span class="line">              color: &#x27;#fff&#x27;,</span><br><span class="line">              backgroundColor: &#x27;#67c1b5&#x27;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;Tab.Screen name=&quot;SettingsStack&quot; component=&#123;SettingsStackScreen&#125; /&gt;</span><br><span class="line">      &lt;/Tab.Navigator&gt;</span><br><span class="line">    &lt;/NavigationContainer&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全屏模态框-Modal"><a href="#全屏模态框-Modal" class="headerlink" title="全屏模态框 Modal"></a>全屏模态框 Modal</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;NavigationContainer&gt;</span><br><span class="line">      &lt;Stack.Navigator&gt;</span><br><span class="line">        &lt;Stack.Group&gt;</span><br><span class="line">          &lt;Stack.Screen name=&quot;Home&quot; component=&#123;HomeScreen&#125; /&gt;</span><br><span class="line">          &lt;Stack.Screen name=&quot;Details&quot; component=&#123;DetailsScreen&#125; /&gt;</span><br><span class="line">        &lt;/Stack.Group&gt;</span><br><span class="line">        &#123;/*模态框*/&#125;</span><br><span class="line">        &lt;Stack.Group screenOptions=&#123;&#123; presentation: &#x27;modal&#x27; &#125;&#125;&gt;</span><br><span class="line">          &lt;Stack.Screen name=&quot;MyModal&quot; component=&#123;ModalScreen&#125; /&gt;</span><br><span class="line">        &lt;/Stack.Group&gt;</span><br><span class="line">      &lt;/Stack.Navigator&gt;</span><br><span class="line">&lt;/NavigationContainer&gt;</span><br></pre></td></tr></table></figure><h4 id="深层嵌套-Stack-的跳转、传参"><a href="#深层嵌套-Stack-的跳转、传参" class="headerlink" title="深层嵌套 Stack 的跳转、传参"></a>深层嵌套 Stack 的跳转、传参</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 跳转其他Tab页的某页</span><br><span class="line"> &lt;Button</span><br><span class="line">    title=&quot;跳转到SettingsStack的详情页&quot;</span><br><span class="line">    onPress=&#123;() =&gt;</span><br><span class="line">    navigation.navigate(&#x27;SettingsStack&#x27;, &#123; screen: &#x27;Details&#x27;,params: &#123; title: &#x27;xx&#x27; &#125;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h4 id="项目中注意"><a href="#项目中注意" class="headerlink" title="项目中注意"></a>项目中注意</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 在拆分出去的组件中</span><br><span class="line">import &#123; useNavigation &#125; from &#x27;@react-navigation/native&#x27;;</span><br><span class="line">// 组件接收props必须放在前面，且不能放在&#123;&#125;里面</span><br><span class="line">// 里面不接收&#123;navigation&#125;，是无效的</span><br><span class="line">const Slides = (props,&#123;xxx&#125;) =&gt; &#123;</span><br><span class="line">    const navigation = useNavigation();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 安装webview</span><br><span class="line">yarn add react-native-webview</span><br><span class="line">// 使用</span><br><span class="line">import &#123; WebView &#125; from &#x27;react-native-webview&#x27;;</span><br><span class="line">&lt;WebView</span><br><span class="line">        onLoadProgress=&#123;(&#123; nativeEvent &#125;) =&gt; &#123;</span><br><span class="line">          // 设置 percent 为 0...1，有小数</span><br><span class="line">          setProgress(nativeEvent.progress);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        source=&#123;&#123; uri: &#x27;xxx&#x27; &#125;&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">// 参数source里面接收网页地址，onLoadProgress为加载进度</span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 滚动Tab栏安装</span><br><span class="line">yarn add react-native-scrollable-tab-view @react-native-community/viewpager</span><br><span class="line">// 在点击 Tab 栏的时候会报错</span><br><span class="line">// 删除node_modules/react-native-scrollable-tab-view/index.js中，</span><br><span class="line">// 所有getNode()方法的调用</span><br><span class="line">// 使用</span><br><span class="line">import ScrollableTabView, &#123; ScrollableTabBar &#125; from &#x27;react-native-scrollable-tab-view&#x27;;</span><br><span class="line">&lt;ScrollableTabView</span><br><span class="line">  style=&#123;styles.container&#125;</span><br><span class="line">  initialPage=&#123;0&#125;</span><br><span class="line">  renderTabBar=&#123;() =&gt; &lt;ScrollableTabBar /&gt;&#125;</span><br><span class="line">     tabBarUnderlineStyle=&#123;&#123; xxx &#125;&#125;</span><br><span class="line">     tabBarBackgroundColor=&#123;xxx&#125;</span><br><span class="line">     tabBarInactiveTextColor=&#123;xxx&#125;</span><br><span class="line">     tabBarActiveTextColor=&#123;xxx&#125;</span><br><span class="line">     tabBarTextStyle=&#123;&#123; xxx &#125;&#125;&gt;</span><br><span class="line">     &lt;Text tabLabel=&quot;xxx&quot;&gt;生活的内容&lt;/Text&gt;</span><br><span class="line">&lt;/ScrollableTabView&gt;</span><br><span class="line"></span><br><span class="line">// 表格</span><br><span class="line">yarn add react-native-tableview-simple</span><br><span class="line">// 使用</span><br><span class="line">import &#123; Cell, Section, TableView &#125; from &#x27;react-native-tableview-simple&#x27;;</span><br><span class="line">&lt;TableView appearance=&#123;&#x27;light&#x27;&#125;&gt;</span><br><span class="line">  &lt;Section header=&quot;浏览&quot;&gt;</span><br><span class="line">    &lt;Cell title=&quot;xxx&quot;/&gt;</span><br><span class="line">    &lt;Cell title=&quot;xxx&quot;/&gt;</span><br><span class="line">  &lt;/Section&gt;</span><br><span class="line">&lt;/TableView&gt;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">// 安装-展开更多</span><br><span class="line">yarn add react-native-collapsible react-native-linear-gradient</span><br><span class="line">// 使用</span><br><span class="line">import React, &#123; useState &#125; from &#x27;react&#x27;;</span><br><span class="line">import &#123; Dimensions, StyleSheet, View, Text, TouchableOpacity &#125; from &#x27;react-native&#x27;;</span><br><span class="line">import Collapsible from &#x27;react-native-collapsible&#x27;;</span><br><span class="line">import LinearGradient from &#x27;react-native-linear-gradient&#x27;;</span><br><span class="line">import Ionicons from &#x27;react-native-vector-icons/Ionicons&#x27;;</span><br><span class="line">// 获取宽度</span><br><span class="line">const screen = Dimensions.get(&#x27;window&#x27;);</span><br><span class="line"></span><br><span class="line">const HomeScreen = () =&gt; &#123;</span><br><span class="line">  const [collapsed, setCollapsed] = useState(true);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">      &lt;View style=&#123;&#123; position: &#x27;relative&#x27; &#125;&#125;&gt;</span><br><span class="line">        &lt;Collapsible collapsed=&#123;collapsed&#125; collapsedHeight=&#123;62&#125; duration=&#123;300&#125;&gt;</span><br><span class="line">          &lt;Text style=&#123;styles.body&#125;&gt;xxx&lt;/Text&gt;</span><br><span class="line">        &lt;/Collapsible&gt;</span><br><span class="line">        &lt;LinearGradient</span><br><span class="line">          colors=&#123;[&#x27;rgba(255, 255, 255, 0.1)&#x27;, &#x27;rgba(255, 255, 255,1)&#x27;]&#125;</span><br><span class="line">          style=&#123;[styles.linearGradient, &#123; height: collapsed ? 42 : 0 &#125;]&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">      &lt;TouchableOpacity </span><br><span class="line">      onPress=&#123;() =&gt; setCollapsed(!collapsed)&#125; </span><br><span class="line">      style=&#123;&#123; marginTop: 12 &#125;&#125;&gt;</span><br><span class="line">        &lt;Ionicons</span><br><span class="line">          name=&#123;collapsed ? &#x27;chevron-down&#x27; : &#x27;chevron-up&#x27;&#125;</span><br><span class="line">          size=&#123;25&#125;</span><br><span class="line">          color=&#123;collapsed ? Colors.primary : &#x27;#8F8C90&#x27;&#125;</span><br><span class="line">          style=&#123;styles.collapseIcon&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/TouchableOpacity&gt;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    backgroundColor: &#x27;#fff&#x27;,</span><br><span class="line">    flex: 1,</span><br><span class="line">  &#125;,</span><br><span class="line">  body: &#123;</span><br><span class="line">    fontSize: 13,</span><br><span class="line">    color: &#x27;#241F25&#x27;,</span><br><span class="line">    lineHeight: 20,</span><br><span class="line">  &#125;,</span><br><span class="line">  linearGradient: &#123;</span><br><span class="line">    position: &#x27;absolute&#x27;,</span><br><span class="line">    bottom: 0,</span><br><span class="line">    width: screen.width,</span><br><span class="line">  &#125;,</span><br><span class="line">  collapseIcon: &#123;</span><br><span class="line">    textAlign: &#x27;center&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 安装react-native-share</span><br><span class="line">yarn add react-native-share</span><br><span class="line">// 使用</span><br><span class="line">import * as React from &#x27;react&#x27;;</span><br><span class="line">import &#123; TouchableOpacity &#125; from &#x27;react-native&#x27;;</span><br><span class="line">import Share from &#x27;react-native-share&#x27;;</span><br><span class="line"></span><br><span class="line">const HomeScreen = () =&gt; &#123;</span><br><span class="line">  // 定义分享参数</span><br><span class="line">  const shareOptions = &#123;</span><br><span class="line">    title: &#x27;分享的标题&#x27;,</span><br><span class="line">    message: &#x27;分享的消息&#x27;,</span><br><span class="line">    url: &#x27;https://clwy.cn&#x27;,</span><br><span class="line">    subject: `来自「长乐未央」的分享`,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">      // 点击触发分享</span><br><span class="line">      &lt;TouchableOpacity</span><br><span class="line">        onPress=&#123;() =&gt; &#123;</span><br><span class="line">          Share.open(shareOptions).then(res =&gt; &#123;</span><br><span class="line">              console.log(res);</span><br><span class="line">            &#125;).catch(err =&gt; &#123;</span><br><span class="line">              err &amp;&amp; console.log(err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;&#125;&gt;</span><br><span class="line">      &lt;/TouchableOpacity&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// 安装视频播放</span><br><span class="line">yarn add react-native-video</span><br><span class="line">// ios同理npx pod-install</span><br><span class="line">// Android修改android/build.gradle</span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        .... # 保留其他的，添加下面的</span><br><span class="line">        jcenter() &#123;</span><br><span class="line">            content &#123;</span><br><span class="line">                includeModule(&quot;com.yqritc&quot;, &quot;android-scalablevideoview&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 使用，对于android播放兼容</span><br><span class="line">// 安装</span><br><span class="line">yarn add react-native-orientation-locker </span><br><span class="line">yarn add @sayem314/react-native-keep-awake </span><br><span class="line">yarn add react-native-vector-icons </span><br><span class="line">yarn add react-native-clwy-video-player</span><br><span class="line">// 使用</span><br><span class="line">import Video from &#x27;react-native-clwy-video-player&#x27;</span><br><span class="line"></span><br><span class="line">const [fullscreen, setFullscreen] = React.useState(false);</span><br><span class="line">    useLayoutEffect(() =&gt; &#123;</span><br><span class="line">    navigation.setOptions(&#123; headerShown: !fullscreen &#125;);</span><br><span class="line">&#125;, [fullscreen, navigation]);</span><br><span class="line">const logo = &#x27;xxx&#x27;;</span><br><span class="line">const image = &#x27;xxx&#x27;;</span><br><span class="line">const source = &#x27;xxx&#x27;;</span><br><span class="line">&lt;Video</span><br><span class="line">    url=&#123;source&#125;</span><br><span class="line">    autoPlay</span><br><span class="line">    logo=&#123;logo&#125;</span><br><span class="line">    placeholder=&#123;image&#125;</span><br><span class="line">    hideFullScreenControl=&#123;false&#125;</span><br><span class="line">    onFullScreen=&#123;status =&gt; setFullscreen(status)&#125;</span><br><span class="line">    rotateToFullScreen</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">// 侧边栏安装</span><br><span class="line">yarn add react-native-side-menu-updated</span><br><span class="line">// 使用</span><br><span class="line">import SideMenu from &#x27;react-native-side-menu-updated&#x27;;</span><br><span class="line">// 左侧列表组件</span><br><span class="line">const Menu = props =&gt; &#123;</span><br><span class="line">  const &#123; onItemSelected &#125; = props;</span><br><span class="line">    return (</span><br><span class="line">      &lt;TouchableHighlight </span><br><span class="line">          underlayColor=&quot;#ddd&quot; </span><br><span class="line">          onPress=&#123;() =&gt; onItemSelected(&#x27;选择了列表&#x27;)&#125;&gt;</span><br><span class="line">          &lt;Text&gt;列表&lt;/Text&gt;</span><br><span class="line">      &lt;/TouchableHighlight&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 父组件</span><br><span class="line">const HomeScreen = () =&gt; &#123;</span><br><span class="line">  const [title, setTitle] = useState(&#x27;选择了列表&#x27;);</span><br><span class="line">  const [isOpen, setIsOpen] = useState(false);</span><br><span class="line">  // 切换选择</span><br><span class="line">  const onMenuItemSelected = item =&gt; &#123;</span><br><span class="line">    setTitle(item);</span><br><span class="line">    setIsOpen(false);</span><br><span class="line">  &#125;;</span><br><span class="line">  // 左侧菜单</span><br><span class="line">  const menu = &lt;Menu onItemSelected=&#123;onMenuItemSelected&#125; /&gt;;</span><br><span class="line">  // 展开左侧菜单</span><br><span class="line">  const updateMenuState = menuState =&gt; &#123;</span><br><span class="line">    setIsOpen(menuState);</span><br><span class="line">  &#125;;</span><br><span class="line">  return (</span><br><span class="line">    &lt;SideMenu</span><br><span class="line">      menu=&#123;menu&#125;</span><br><span class="line">      isOpen=&#123;isOpen&#125;</span><br><span class="line">      onChange=&#123;menuState =&gt; updateMenuState(menuState)&#125;</span><br><span class="line">      disableGestures=&#123;true&#125;&gt;</span><br><span class="line">      &lt;View&gt;</span><br><span class="line">        &lt;Text&gt;&#123;title&#125;&lt;/Text&gt;</span><br><span class="line">        &#123;/*切换按钮*/&#125;</span><br><span class="line">        &lt;TouchableWithoutFeedback</span><br><span class="line">          onPress=&#123;() =&gt; &#123;</span><br><span class="line">            setIsOpen(!isOpen);</span><br><span class="line">          &#125;&#125;&gt;</span><br><span class="line">          &lt;Text&gt;点这里展开&lt;/Text&gt;</span><br><span class="line">        &lt;/TouchableWithoutFeedback&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    &lt;/SideMenu&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// 选项卡切换</span><br><span class="line">yarn add @react-native-segmented-control/segmented-control</span><br><span class="line">// 存储</span><br><span class="line">yarn add @react-native-async-storage/async-storage</span><br><span class="line">// 使用</span><br><span class="line">import AsyncStorage from &#x27;@react-native-async-storage/async-storage&#x27;;</span><br><span class="line">// 存字符串</span><br><span class="line">const storeData = async () =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    // name 是你自定义的 key 名</span><br><span class="line">    await AsyncStorage.setItem(&#x27;name&#x27;, &#x27;aaron&#x27;)</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    // 保存错误</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 读取字符串</span><br><span class="line">const getData = async () =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    // name 是之前存入的值</span><br><span class="line">    const name = await AsyncStorage.getItem(&#x27;name&#x27;)</span><br><span class="line">    if(name !== null) &#123;</span><br><span class="line">      console.log(name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch(e) &#123;</span><br><span class="line">    // 读取 name 错误</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 存对象</span><br><span class="line">const storeData = async () =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const user = &#123;</span><br><span class="line">       name: &#x27;aaron&#x27;,</span><br><span class="line">       sex: &#x27;male&#x27;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 将对象，转为json格式的字符串</span><br><span class="line">    const jsonValue = JSON.stringify(user)</span><br><span class="line"></span><br><span class="line">    await AsyncStorage.setItem(&#x27;user&#x27;, jsonValue)</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    // 保存错误</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 读取对象</span><br><span class="line">const getData = async () =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const jsonValue = await AsyncStorage.getItem(&#x27;user&#x27;)</span><br><span class="line"></span><br><span class="line">    // 把 json 格式的字符串，转回对象</span><br><span class="line">    const user != null ? JSON.parse(jsonValue) : null</span><br><span class="line"></span><br><span class="line">    console.log(user.name, user.sex)</span><br><span class="line">  &#125; catch(e) &#123;</span><br><span class="line">    // 读取 user 错误</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript练习</title>
      <link href="/2021/12/05/JavaScript%E7%BB%83%E4%B9%A0/"/>
      <url>/2021/12/05/JavaScript%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要记录博主遇到的JavaScrprt的案例练习。</p><h1 id="js中打印为undefined及与null区别"><a href="#js中打印为undefined及与null区别" class="headerlink" title="js中打印为undefined及与null区别"></a>js中打印为undefined及与null区别</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量声明了的但是未初始化</span></span><br><span class="line"><span class="comment">// 在声明变量的时候，如果没有初始化变量，即给变量赋值，那么打印出 undefined。</span></span><br><span class="line"><span class="comment">// var a</span></span><br><span class="line"><span class="comment">// console.log(a)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给变量赋值 undefined</span></span><br><span class="line"><span class="comment">// 直接给变量赋值一个undefined</span></span><br><span class="line"><span class="comment">// var a = undefined</span></span><br><span class="line"><span class="comment">// console.log(a)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量声明提升返回 undefined</span></span><br><span class="line"><span class="comment">// 把打印语句写在了声明变量之前，由于变量声明提前，就算赋值了，也是 undefined</span></span><br><span class="line"><span class="comment">// console.log(a)</span></span><br><span class="line"><span class="comment">// var a = 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问对象中的属性时，如果对象中没有对应的属性，会打印 undefined</span></span><br><span class="line"><span class="comment">// var obj = &#123;&#125;</span></span><br><span class="line"><span class="comment">// console.log(obj[&#x27;a&#x27;])</span></span><br><span class="line"><span class="comment">// console.log(obj.a)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数中定义了形参，但是执行函数时没有传入实参</span></span><br><span class="line"><span class="comment">// 在我们的函数中，如果定义了形参，但是你执行的时候没有传入实参时，会 undefined。</span></span><br><span class="line"><span class="comment">// 具体原因是因为a作为局部变量被声明提前了。</span></span><br><span class="line"><span class="comment">// function f(a) &#123;</span></span><br><span class="line"><span class="comment">//     console.log(a)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// f()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象中的方法中的匿名函数的函数体为空</span></span><br><span class="line"><span class="comment">// 一个方法(函数)中如果它的函数体为空时，在调用时会返回 undefined</span></span><br><span class="line"><span class="comment">// var obj =&#123; test:function () &#123;&#125; &#125;</span></span><br><span class="line"><span class="comment">// console.log(obj.test())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印函数的调用时，该函数的函数体为空</span></span><br><span class="line"><span class="comment">// 一个函数的函数体为空时，在打印它的调用时，打印出 undefined</span></span><br><span class="line"><span class="comment">// function f() &#123;&#125;</span></span><br><span class="line"><span class="comment">// console.log(f())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印函数的调用时，函数体不为空</span></span><br><span class="line"><span class="comment">// 这里test()相当于1，先打印1，</span></span><br><span class="line"><span class="comment">// 然后console.log()在打印函数时，默认会打印返回值，如果没有设定返回值，会返回 undefined。</span></span><br><span class="line"><span class="comment">// function test() &#123; console.log(1) &#125;</span></span><br><span class="line"><span class="comment">// console.log(test())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数作为返回值时，其返回值函数没有设置返回值</span></span><br><span class="line"><span class="comment">// 这里test()调用自身，然后再()调用内部的返回函数，打印出1，</span></span><br><span class="line"><span class="comment">// console.log()默认接受函数时会打印返回值，如果没有设定，会返回 undefined。</span></span><br><span class="line"><span class="comment">// function test() &#123;</span></span><br><span class="line"><span class="comment">//     return function () &#123;</span></span><br><span class="line"><span class="comment">//         console.log(1)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(test()())</span></span><br></pre></td></tr></table></figure><p><strong>null和undefined的区别</strong></p><p>null是一个表示”无”的对象（空对象指针），转为数值时为0；undefined是一个表示”无”的原始值，转为数值时为NaN</p><hr><h1 id="统计最多次数"><a href="#统计最多次数" class="headerlink" title="统计最多次数"></a>统计最多次数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcdagnasjgnlqcanzaa&#x27;</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 或者直接使用str[i]</span></span><br><span class="line">    <span class="keyword">var</span> chars = str.<span class="title function_">charAt</span>(i)</span><br><span class="line">    <span class="keyword">if</span> (o[chars]) &#123;</span><br><span class="line">        o[chars]++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        o[chars] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> max = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> ch = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (k <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o[k] &gt; max) &#123;</span><br><span class="line">        max = o[k]</span><br><span class="line">        ch = k</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ch,max)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;djrtgjjednvjkdsabvkjjsuds&#x27;</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> num = -<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">    num = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;j&#x27;</span>,[num + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span>(num === -<span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;testthisprojecthelloworld!&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> a) &#123;</span><br><span class="line">    <span class="title class_">Number</span>(b[a[i]]++) || (b[a[i]] = <span class="number">1</span>);</span><br><span class="line">    c = b[a[i]] &gt; c ? a[i] : c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(c + <span class="string">&quot;:&quot;</span> + b[c]);</span><br></pre></td></tr></table></figure><hr><h1 id="数组排序去重"><a href="#数组排序去重" class="headerlink" title="数组排序去重"></a>数组排序去重</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> arrObj = [<span class="number">2</span>, <span class="number">56</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">36</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> arr = []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">compare</span>(<span class="params">a, b</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> a - b</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> arrNew = arrObj.<span class="title function_">sort</span>(compare)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 第一种方法(推荐，可以不排序清除)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    arrNew.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//注意这里用arr，当判断相等的时候，代表这个值第一次出现，就插入</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (arrNew.<span class="title function_">indexOf</span>(item) === index) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            arr.<span class="title function_">push</span>(item);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 第二种方法（必须排序了清除）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// for (var i = 0; i &lt; arrNew.length; i++) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//     if (arrNew[i] === arrNew[i - 1]) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//     &#125; else &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//         arr.push(arrNew[i])</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//     &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 第三种方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; arrObj.<span class="property">length</span>; i++)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span>(arr.<span class="title function_">indexOf</span>(arrObj[i])===-<span class="number">1</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            arr.<span class="title function_">push</span>(arrObj[i])        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//（去除数组中重复的项）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// arrObj.forEach(function (item, index) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//     if (arrObj.indexOf(item) === arrObj.lastIndexOf(item)) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//         arr.push(item);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//     &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="js对象类型的判断方法"><a href="#js对象类型的判断方法" class="headerlink" title="js对象类型的判断方法"></a>js对象类型的判断方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typeof</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lee&#x27;</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(typeo f o) <span class="comment">// Object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// intanceof</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lee&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;reg&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isType</span>(<span class="params">o</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Array&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Object&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;参数不是对象类型&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isType</span>(o)) <span class="comment">// Object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isType</span>(a)) <span class="comment">// Array</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// constructor</span></span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;lee&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;reg&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o.<span class="property">constructor</span> == <span class="title class_">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">constructor</span> == <span class="title class_">Array</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用tostring()方法</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;reg&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> b = &#123;<span class="attr">name</span>: <span class="string">&#x27;D&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">&#x27;string&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isType</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> type = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj);</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">&#x27;[object Array]&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Array&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;[object Object]&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Object&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;参数不是对象类型&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isType</span>(a)) <span class="comment">// Array</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isType</span>(b)) <span class="comment">// Object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isType</span>(c)) <span class="comment">// 参数不是对象类型</span></span><br></pre></td></tr></table></figure><hr><h1 id="匀速动画"><a href="#匀速动画" class="headerlink" title="匀速动画"></a>匀速动画</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        * &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="selector-tag">div</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">background</span>: pink;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params">obj, target</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> num = <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        obj.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            num = num + <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            div.<span class="property">style</span>.<span class="property">left</span> = num + <span class="string">&#x27;px&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (num === target) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">animate</span>(div, <span class="number">500</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="缓速动画"><a href="#缓速动画" class="headerlink" title="缓速动画"></a>缓速动画</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        * &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="selector-tag">div</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">background</span>: pink;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    target = <span class="number">500</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    button.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> step = (target - div.<span class="property">offsetLeft</span>) / <span class="number">10</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            step = step &gt; <span class="number">0</span> ? <span class="title class_">Math</span>.<span class="title function_">ceil</span>(step) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(step)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            div.<span class="property">style</span>.<span class="property">left</span> = (div.<span class="property">offsetLeft</span> + step) + <span class="string">&#x27;px&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (div.<span class="property">offsetLeft</span> === <span class="number">500</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="built_in">clearInterval</span>(timer)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="判断新增字段"><a href="#判断新增字段" class="headerlink" title="判断新增字段"></a>判断新增字段</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断新增字段</span></span><br><span class="line"><span class="keyword">var</span> message = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">var</span> checkArr = [<span class="string">&#x27;body&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;userId&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> (k <span class="keyword">in</span> req.<span class="property">body</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (checkArr.<span class="title function_">indexOf</span>(k) === -<span class="number">1</span>) &#123;</span><br><span class="line">        message += k + <span class="string">&#x27;、&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> index = checkArr.<span class="title function_">indexOf</span>(k)</span><br><span class="line">        checkArr.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (message.<span class="title function_">charAt</span>(message.<span class="property">length</span> - <span class="number">1</span>) === <span class="string">&#x27;、&#x27;</span>) &#123;</span><br><span class="line">    message = message.<span class="title function_">substr</span>(<span class="number">0</span>, (message.<span class="property">length</span> - <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">error</span>(res, <span class="string">&#x27;有多的键名&#x27;</span> + message)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (checkArr.<span class="property">length</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">    checkArr.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        message += <span class="string">&#x27;没有&#x27;</span> + item + <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">error</span>(res, message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="普通轮播图"><a href="#普通轮播图" class="headerlink" title="普通轮播图"></a>普通轮播图</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;link href=&quot;//netdna.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css&quot; </span><br><span class="line">    rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .clear:after &#123;</span><br><span class="line">            clear: both;</span><br><span class="line">            display: block;</span><br><span class="line">            content: &#x27;&#x27;;</span><br><span class="line">            height: 0;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            visibility: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div &#123;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            position: relative;</span><br><span class="line">            width: 600px;</span><br><span class="line">            height: 260px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .prev &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            line-height: 40px;</span><br><span class="line">            left: 0;</span><br><span class="line">            top: calc(50% - 20px);</span><br><span class="line">            z-index: 1;</span><br><span class="line">            width: 20px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .next &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            display: block;</span><br><span class="line">            line-height: 40px;</span><br><span class="line">            right: 0;</span><br><span class="line">            top: calc(50% - 20px);</span><br><span class="line">            width: 20px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            z-index: 1;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .prev:hover, .next:hover &#123;</span><br><span class="line">            background: rgba(0, 0, 0, 0.1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .pic &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            width: 5000px;</span><br><span class="line">            list-style-type: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .pic li &#123;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .pic li img &#123;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .point &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: 15px;</span><br><span class="line">            left: calc(50% - 56px);</span><br><span class="line">            list-style-type: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .point li &#123;</span><br><span class="line">            background: silver;</span><br><span class="line">            float: left;</span><br><span class="line">            width: 8px;</span><br><span class="line">            height: 8px;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            margin-right: 12px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .point .choose &#123;</span><br><span class="line">            width: 20px;</span><br><span class="line">            border-radius: 5px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;prev fa fa-chevron-circle-left&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;next fa fa-chevron-circle-right&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;ul class=&quot;pic clear&quot;&gt;</span><br><span class="line">        &lt;li&gt;&lt;img src=&quot;img/css.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;img src=&quot;img/h5.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;img src=&quot;img/js.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;img src=&quot;img/php.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;img src=&quot;img/rails.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;ul class=&quot;point clear&quot;&gt;</span><br><span class="line">        &lt;li class=&quot;choose&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    window.onload = function () &#123;</span><br><span class="line">        var next = document.getElementsByClassName(&#x27;next&#x27;)[0]</span><br><span class="line">        var prev = document.getElementsByClassName(&#x27;prev&#x27;)[0]</span><br><span class="line">        var pic = document.getElementsByClassName(&#x27;pic&#x27;)[0]</span><br><span class="line">        var lis = document.getElementsByClassName(&#x27;point&#x27;)[0].children</span><br><span class="line">        var index = 0</span><br><span class="line">        var run = false</span><br><span class="line">        function running() &#123;</span><br><span class="line">            run = true</span><br><span class="line">            var timer = setInterval(function () &#123;</span><br><span class="line">                var target = -600 * index</span><br><span class="line">                var step = (target - pic.offsetLeft) / 20</span><br><span class="line">                step = step &gt; 0 ? Math.ceil(step) : Math.floor(step)</span><br><span class="line">                pic.style.left = (step + pic.offsetLeft) + &#x27;px&#x27;</span><br><span class="line">                if (pic.offsetLeft === target) &#123;</span><br><span class="line">                    clearInterval(timer)</span><br><span class="line">                    run = false</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            for (var i = 0; i &lt; lis.length; i++) &#123;</span><br><span class="line">                lis[i].className = &#x27;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">            lis[index].className = &#x27;choose&#x27;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        next.onclick = function () &#123;</span><br><span class="line">            if (run) &#123;</span><br><span class="line">                return false</span><br><span class="line">            &#125;</span><br><span class="line">            index++</span><br><span class="line">            if (index === 5) &#123;</span><br><span class="line">                index = 0</span><br><span class="line">            &#125;</span><br><span class="line">            running()</span><br><span class="line">            // 或者</span><br><span class="line">     // if(!run)&#123;</span><br><span class="line">     //     index++</span><br><span class="line">     //     if (index === 5) &#123;</span><br><span class="line">     //         index = 0</span><br><span class="line">     //     &#125;</span><br><span class="line">     //     running()</span><br><span class="line">     // &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        prev.onclick = function () &#123;</span><br><span class="line">            if (run) &#123;</span><br><span class="line">                return false</span><br><span class="line">            &#125;</span><br><span class="line">            index--</span><br><span class="line">            if (index === -1) &#123;</span><br><span class="line">                index = 4</span><br><span class="line">            &#125;</span><br><span class="line">            running()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="无限轮播图"><a href="#无限轮播图" class="headerlink" title="无限轮播图"></a>无限轮播图</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;link href=&quot;//netdna.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css&quot; </span><br><span class="line">    rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .clear:after &#123;</span><br><span class="line">            clear: both;</span><br><span class="line">            display: block;</span><br><span class="line">            content: &#x27;&#x27;;</span><br><span class="line">            height: 0;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            visibility: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div &#123;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            position: relative;</span><br><span class="line">            width: 600px;</span><br><span class="line">            height: 260px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .prev &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            line-height: 40px;</span><br><span class="line">            left: 0;</span><br><span class="line">            top: calc(50% - 20px);</span><br><span class="line">            z-index: 1;</span><br><span class="line">            width: 20px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .next &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            display: block;</span><br><span class="line">            line-height: 40px;</span><br><span class="line">            right: 0;</span><br><span class="line">            top: calc(50% - 20px);</span><br><span class="line">            width: 20px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            z-index: 1;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .prev:hover, .next:hover &#123;</span><br><span class="line">            background: rgba(0, 0, 0, 0.1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .pic &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: -600px;</span><br><span class="line">            width: 5000px;</span><br><span class="line">            list-style-type: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .pic li &#123;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .pic li img &#123;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .point &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: 15px;</span><br><span class="line">            left: calc(50% - 56px);</span><br><span class="line">            list-style-type: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .point li &#123;</span><br><span class="line">            background: silver;</span><br><span class="line">            float: left;</span><br><span class="line">            width: 8px;</span><br><span class="line">            height: 8px;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            margin-right: 12px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .point .choose &#123;</span><br><span class="line">            width: 20px;</span><br><span class="line">            border-radius: 5px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;prev fa fa-chevron-circle-left&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;next fa fa-chevron-circle-right&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;ul class=&quot;pic clear&quot;&gt;</span><br><span class="line">        &lt;li&gt;&lt;img src=&quot;img/rails.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;img src=&quot;img/css.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;img src=&quot;img/h5.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;img src=&quot;img/js.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;img src=&quot;img/php.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;img src=&quot;img/rails.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;img src=&quot;img/css.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;ul class=&quot;point clear&quot;&gt;</span><br><span class="line">        &lt;li class=&quot;choose&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    window.onload = function () &#123;</span><br><span class="line">        var container = document.getElementsByClassName(&#x27;container&#x27;)[0]</span><br><span class="line">        var next = document.getElementsByClassName(&#x27;next&#x27;)[0]</span><br><span class="line">        var prev = document.getElementsByClassName(&#x27;prev&#x27;)[0]</span><br><span class="line">        var pic = document.getElementsByClassName(&#x27;pic&#x27;)[0]</span><br><span class="line">        var lis = document.getElementsByClassName(&#x27;point&#x27;)[0].children</span><br><span class="line">        var index = 1</span><br><span class="line">        var run = false</span><br><span class="line"></span><br><span class="line">        function running() &#123;</span><br><span class="line">            run = true</span><br><span class="line">            var timer = setInterval(function () &#123;</span><br><span class="line">                var target = -600 * index</span><br><span class="line">                var step = (target - pic.offsetLeft) / 20</span><br><span class="line">                step = step &gt; 0 ? Math.ceil(step) : Math.floor(step)</span><br><span class="line">                pic.style.left = (step + pic.offsetLeft) + &#x27;px&#x27;</span><br><span class="line">                if (pic.offsetLeft === target) &#123;</span><br><span class="line">                    clearInterval(timer)</span><br><span class="line">                    run = false</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            for (var i = 0; i &lt; lis.length; i++) &#123;</span><br><span class="line">                lis[i].className = &#x27;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">            lis[index - 1].className = &#x27;choose&#x27;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        next.onclick = function () &#123;</span><br><span class="line">            if (run) &#123;</span><br><span class="line">                return false</span><br><span class="line">            &#125;</span><br><span class="line">            index++</span><br><span class="line">            if (index === 6) &#123;</span><br><span class="line">                pic.style.left = &#x27;0px&#x27;</span><br><span class="line">                index = 1</span><br><span class="line">            &#125;</span><br><span class="line">            running()</span><br><span class="line">            // 或者</span><br><span class="line">            // if(!run)&#123;</span><br><span class="line">            //     index++</span><br><span class="line">            //     if (index === 5) &#123;</span><br><span class="line">            //         index = 0</span><br><span class="line">            //     &#125;</span><br><span class="line">            //     running()</span><br><span class="line">            // &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        prev.onclick = function () &#123;</span><br><span class="line">            if (run) &#123;</span><br><span class="line">                return false</span><br><span class="line">            &#125;</span><br><span class="line">            index--</span><br><span class="line">            if (index === 0) &#123;</span><br><span class="line">                pic.style.left = &#x27;-3600px&#x27;</span><br><span class="line">                index = 5</span><br><span class="line">            &#125;</span><br><span class="line">            running()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (var j = 0; j &lt; lis.length; j++) &#123;</span><br><span class="line">            lis[j].index = j        //必须要先赋值给index，否者取不到索引；</span><br><span class="line">            lis[j].onclick = function () &#123;</span><br><span class="line">                for (var k = 0; k &lt; lis.length; k++) &#123;</span><br><span class="line">                    lis[k].className = &#x27;&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">                this.className = &#x27;choose&#x27;</span><br><span class="line">                index = this.index + 1</span><br><span class="line">                running()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function f() &#123;</span><br><span class="line">            index++</span><br><span class="line">            if (index === 6) &#123;</span><br><span class="line">                pic.style.left = &#x27;0px&#x27;</span><br><span class="line">                index = 1</span><br><span class="line">            &#125;</span><br><span class="line">            running()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var play = setInterval(f, 1500)</span><br><span class="line">        container.onmouseover = function () &#123;</span><br><span class="line">            clearInterval(play)</span><br><span class="line">        &#125;</span><br><span class="line">        container.onmouseout = function () &#123;</span><br><span class="line">            play = setInterval(f, 1500)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="参数处理成对象"><a href="#参数处理成对象" class="headerlink" title="参数处理成对象"></a>参数处理成对象</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;https://clwy.cn/admin?</span></span><br><span class="line"><span class="string">id=8&amp;name=loushengyue&amp;age=18&amp;sex=男&amp;parent_id=112&amp;is_recommend=true&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> newArr = arr[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">    newArr.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> str = item.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">        obj[str[<span class="number">0</span>]]=str[<span class="number">1</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>(url))</span><br></pre></td></tr></table></figure><hr><h1 id="查找字符串、数组重复的值"><a href="#查找字符串、数组重复的值" class="headerlink" title="查找字符串、数组重复的值"></a>查找字符串、数组重复的值</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcdagnasjgnlqcanzaa&#x27;</span></span><br><span class="line"><span class="keyword">let</span> arr = str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="comment">// 第一种</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item === <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">        i++</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(index)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line"><span class="keyword">var</span> index = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index)</span><br><span class="line">    index = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>, [index + <span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第三种</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(str[i]===<span class="string">&#x27;a&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .container &#123;</span><br><span class="line">            width: 500px;</span><br><span class="line">            margin: 50px auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        textarea &#123;</span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ul &#123;</span><br><span class="line">            list-style-type: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        li &#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            padding: 10px 0 10px;</span><br><span class="line">            border-bottom: 2px solid #de964b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        li span &#123;</span><br><span class="line">            display: block;</span><br><span class="line">            width: 460px;</span><br><span class="line">            word-break: break-all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        li a &#123;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            color: #de964b;</span><br><span class="line">            float: right;</span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: 10px;</span><br><span class="line">            right: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;label&gt;&lt;textarea&gt;&lt;/textarea&gt;&lt;/label&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;button&gt;发布&lt;/button&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    window.onload = function () &#123;</span><br><span class="line">        var button = document.getElementsByTagName(&#x27;button&#x27;)[0]</span><br><span class="line">        var textarea = document.getElementsByTagName(&#x27;textarea&#x27;)[0]</span><br><span class="line">        var ul = document.getElementsByTagName(&#x27;ul&#x27;)[0]</span><br><span class="line">        var li = document.getElementsByTagName(&#x27;li&#x27;)</span><br><span class="line">        button.onclick = function () &#123;</span><br><span class="line">            var val = textarea.value.trim()</span><br><span class="line">            if (val.length === 0) &#123;</span><br><span class="line">                alert(&#x27;不能为空&#x27;)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                var add_li = document.createElement(&#x27;li&#x27;)</span><br><span class="line">                add_li.innerHTML = &#x27;&lt;span&gt;&lt;/span&gt;&lt;a href=&quot;javascript:;&quot;&gt;删除&lt;/a&gt;&#x27;</span><br><span class="line">                add_li.getElementsByTagName(&#x27;span&#x27;)[0].innerText = val</span><br><span class="line">                // var span = add_li.children[0]</span><br><span class="line">                // ul.appendChild(add_li)</span><br><span class="line">                ul.insertBefore(add_li,ul.firstChild)</span><br><span class="line">                textarea.value = &#x27;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">            for (var i = 0; i &lt; li.length; i++) &#123;</span><br><span class="line">                var a = li[i].children[1]</span><br><span class="line">                a.onclick = function () &#123;</span><br><span class="line">                    this.parentNode.parentNode.removeChild(this.parentNode)</span><br><span class="line">                    // this.parentNode.remove()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="switch封装选择器"><a href="#switch封装选择器" class="headerlink" title="switch封装选择器"></a>switch封装选择器</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">$</span>(<span class="params">str</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> output</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> str0 = str.<span class="title function_">charAt</span>(<span class="number">0</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> result</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">switch</span> (str0) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">case</span> <span class="string">&#x27;.&#x27;</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    result = str.<span class="title function_">slice</span>(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    output = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(result)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">break</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">case</span> <span class="string">&#x27;#&#x27;</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    result = str.<span class="title function_">slice</span>(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    output = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(result)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">break</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">default</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    result = str</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    output = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(result)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(output)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> output</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&#x27;.one&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&#x27;#two&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&#x27;div&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="不用class选择器封装"><a href="#不用class选择器封装" class="headerlink" title="不用class选择器封装"></a>不用class选择器封装</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one two three&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;three&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;three&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">$</span>(<span class="params">str</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> dom = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;*&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> arr = []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dom.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">var</span> check = dom[i].<span class="property">className</span>.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; check.<span class="property">length</span>; j++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">if</span> (check[j] === str) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        arr.<span class="title function_">push</span>(dom[i])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> arr</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&#x27;one&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="时间处理"><a href="#时间处理" class="headerlink" title="时间处理"></a>时间处理</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">num</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            now.<span class="title function_">setDate</span>(now.<span class="title function_">getDate</span>() + num)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 这个day不能放前面，需要先设置了再取它的值（总之需要再获取）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> day = now.<span class="title function_">getDate</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> mon = now.<span class="title function_">getMonth</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> year = now.<span class="title function_">getFullYear</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(year + <span class="string">&#x27;年&#x27;</span> + (mon + <span class="number">1</span>) + <span class="string">&#x27;月&#x27;</span> + day + <span class="string">&#x27;日&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// var myDate=new Date();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// myDate.setDate(myDate.getDate()+5);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// document.write(myDate.toLocaleString());</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">f</span>(<span class="number">5</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h1 id="全选和反选"><a href="#全选和反选" class="headerlink" title="全选和反选"></a>全选和反选</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button&gt;全选&lt;/button&gt;</span><br><span class="line">&lt;button&gt;反选&lt;/button&gt;</span><br><span class="line">&lt;button&gt;取消&lt;/button&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked&gt;选项1&lt;/label&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot;&gt;选项2&lt;/label&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot;&gt;选项3&lt;/label&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot;&gt;选项4&lt;/label&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot;&gt;选项5&lt;/label&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot;&gt;选项6&lt;/label&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot;&gt;选项7&lt;/label&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot;&gt;选项8&lt;/label&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot;&gt;选项9&lt;/label&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot;&gt;选项10&lt;/label&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    window.onload=function () &#123;</span><br><span class="line">        var button = document.getElementsByTagName(&#x27;button&#x27;)</span><br><span class="line">        var input = document.getElementsByTagName(&#x27;input&#x27;)</span><br><span class="line">        button[0].onclick = function () &#123;</span><br><span class="line">            for (var i = 0; i &lt; input.length; i++) &#123;</span><br><span class="line">                input[i].checked = true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        button[1].onclick = function () &#123;</span><br><span class="line">            for (var i = 0; i &lt; input.length; i++) &#123;</span><br><span class="line">                input[i].checked = !input[i].checked</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        button[2].onclick = function () &#123;</span><br><span class="line">            for (var i = 0; i &lt; input.length; i++) &#123;</span><br><span class="line">                input[i].checked = false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="选项卡"><a href="#选项卡" class="headerlink" title="选项卡"></a>选项卡</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .content &#123;</span><br><span class="line">            width: 380px;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        span &#123;</span><br><span class="line">            margin: 0 0 10px 40px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .choose &#123;</span><br><span class="line">            border-bottom: 1px solid;</span><br><span class="line">            color: coral;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .content div &#123;</span><br><span class="line">            margin: 10px;</span><br><span class="line">            width: 380px;</span><br><span class="line">            display: none;</span><br><span class="line">            text-align: center;</span><br><span class="line">            border-top: 1px solid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .content div img &#123;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .content .box &#123;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;choose&quot;&gt;体育&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;NBA/CBA&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;中超/国际&lt;/span&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot;&gt;体育&lt;img src=&quot;image/1.webp&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;NBA/CBA&lt;img src=&quot;image/2.webp&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;中超/国际&lt;img src=&quot;image/3.webp&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    window.onload = function () &#123;</span><br><span class="line">        var span = document.getElementsByTagName(&#x27;span&#x27;)</span><br><span class="line">        var div = document.getElementsByTagName(&#x27;div&#x27;)</span><br><span class="line">        for (var i = 0; i &lt; span.length; i++) &#123;</span><br><span class="line">            span[i].index = i</span><br><span class="line">            span[i].onclick = function () &#123;</span><br><span class="line">                for (var j = 0; j &lt; span.length; j++) &#123;</span><br><span class="line">                    span[j].className = &#x27;&#x27;</span><br><span class="line">                    div[j + 1].className = &#x27;&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">                this.className = &#x27;choose&#x27;</span><br><span class="line">                div[this.index + 1].className = &#x27;box&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="id和传参"><a href="#id和传参" class="headerlink" title="id和传参"></a>id和传参</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .clear:after &#123;</span><br><span class="line">            clear: both;</span><br><span class="line">            height: 0;</span><br><span class="line">            display: block;</span><br><span class="line">            content: &quot;&quot;;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            visibility: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #box &#123;</span><br><span class="line">            margin: 50px auto;</span><br><span class="line">            width: 360px;</span><br><span class="line">            height: 360px;</span><br><span class="line">            background-image: url(&quot;img/li01big.jpg&quot;);</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ul &#123;</span><br><span class="line">            list-style-type: none;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 360px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ul li &#123;</span><br><span class="line">            float: left;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;box&quot;&gt;</span><br><span class="line">    &lt;ul class=&quot;clear&quot;&gt;</span><br><span class="line">        &lt;li id=&quot;li01&quot;&gt;&lt;img src=&quot;img/01.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li id=&quot;li02&quot;&gt;&lt;img src=&quot;img/02.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li id=&quot;li03&quot;&gt;&lt;img src=&quot;img/03.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li id=&quot;li04&quot;&gt;&lt;img src=&quot;img/04.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li id=&quot;li05&quot;&gt;&lt;img src=&quot;img/05.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    window.onload = function () &#123;</span><br><span class="line">        // var box = document.getElementById(&#x27;box&#x27;)</span><br><span class="line">        // var li = document.getElementsByTagName(&#x27;li&#x27;)</span><br><span class="line">        // for (var i = 0; i &lt; li.length; i++) &#123;</span><br><span class="line">        //     li[i].onclick = function () &#123;</span><br><span class="line">        //         // box.style.backgroundImage =&#x27;url(&quot;img/&#x27;+this.id+&#x27;big.jpg&quot;)&#x27;</span><br><span class="line">        //         console.log(i)</span><br><span class="line">        //     &#125;</span><br><span class="line">        // &#125;</span><br><span class="line">        //第一种方法结束</span><br><span class="line">        var box = document.getElementById(&#x27;box&#x27;)</span><br><span class="line">        var li = document.getElementsByTagName(&#x27;li&#x27;)</span><br><span class="line"></span><br><span class="line">        function f(id, bg) &#123;</span><br><span class="line">            li[id].onclick = function () &#123;</span><br><span class="line">                box.style.backgroundImage = bg</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // f(&#x27;0&#x27;, &#x27;url(&quot;img/li01big.jpg&quot;)&#x27;)</span><br><span class="line">        // f(&#x27;1&#x27;, &#x27;url(&quot;img/li02big.jpg&quot;)&#x27;)</span><br><span class="line">        // f(&#x27;2&#x27;, &#x27;url(&quot;img/li03big.jpg&quot;)&#x27;)</span><br><span class="line">        // f(&#x27;3&#x27;, &#x27;url(&quot;img/li04big.jpg&quot;)&#x27;)</span><br><span class="line">        // f(&#x27;4&#x27;, &#x27;url(&quot;img/li05big.jpg&quot;)&#x27;)</span><br><span class="line">        //第二种方法结束</span><br><span class="line">        for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">            f(i, &#x27;url(&quot;img/li0&#x27;+(i+1)+&#x27;big.jpg&quot;)&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;input id=&quot;inp0&quot; type=&quot;text&quot;&gt;</span><br><span class="line">&lt;select name=&quot;&quot; id=&quot;se&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;+&quot;&gt;+&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;-&quot;&gt;-&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;*&quot;&gt;*&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;/&quot;&gt;/&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;input id=&quot;inp1&quot; type=&quot;text&quot;&gt;</span><br><span class="line">&lt;button id=&quot;but&quot;&gt;计算&lt;/button&gt;</span><br><span class="line">&lt;input id=&quot;inp2&quot; type=&quot;text&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    window.onload = function () &#123;</span><br><span class="line"></span><br><span class="line">        function $(x) &#123;</span><br><span class="line">            return document.getElementById(x)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $(&quot;but&quot;).onclick = function () &#123;</span><br><span class="line">            var x = parseFloat($(&quot;inp0&quot;).value)</span><br><span class="line">            var y = parseFloat($(&quot;inp1&quot;).value)</span><br><span class="line">            var z = $(&quot;se&quot;).value</span><br><span class="line">            switch (z) &#123;</span><br><span class="line">                case &quot;+&quot;:</span><br><span class="line">                    $(&quot;inp2&quot;).value = x + y;</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;-&quot;:</span><br><span class="line">                    $(&quot;inp2&quot;).value = x - y;</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;*&quot;:</span><br><span class="line">                    $(&quot;inp2&quot;).value = x * y;</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    $(&quot;inp2&quot;).value = x / y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="字节计算"><a href="#字节计算" class="headerlink" title="字节计算"></a>字节计算</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;label&gt;&lt;input type=&quot;text&quot;&gt;&lt;/label&gt;</span><br><span class="line">&lt;button&gt;取值计算&lt;/button&gt;</span><br><span class="line">&lt;span&gt;&lt;/span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    window.onload = function () &#123;</span><br><span class="line">        var button = document.getElementsByTagName(&quot;button&quot;)[0]</span><br><span class="line">        var inp = document.getElementsByTagName(&quot;input&quot;)[0]</span><br><span class="line">        var span = document.getElementsByTagName(&quot;span&quot;)[0]</span><br><span class="line"></span><br><span class="line">        button.onclick = function () &#123;</span><br><span class="line">            var num = 0</span><br><span class="line">            var val = inp.value</span><br><span class="line">            for (var i = 0; i &lt; val.length; i++) &#123;</span><br><span class="line">                if (val.charCodeAt(i) &lt;= 255) &#123;</span><br><span class="line">                    num = num + 1</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    num = num + 2</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            span.innerHTML = num + &quot;字节&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;label&gt;</span><br><span class="line">    &lt;input class=&quot;inp&quot; value=&quot;请输入用户名&quot; type=&quot;text&quot;&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">&lt;span class=&quot;sp&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    window.onload = function () &#123;</span><br><span class="line">        function $(x) &#123;</span><br><span class="line">            return document.getElementsByClassName(x)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $(&quot;inp&quot;)[0].onfocus = function () &#123;</span><br><span class="line">            var val = this.value</span><br><span class="line">            if (val === &quot;请输入用户名&quot;) &#123;</span><br><span class="line">                this.value = &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $(&quot;inp&quot;)[0].onblur = function () &#123;</span><br><span class="line">            var val = this.value</span><br><span class="line">            if (val === &quot;&quot;) &#123;</span><br><span class="line">                this.value = &quot;请输入用户名&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $(&quot;inp&quot;)[0].onkeyup = function () &#123;</span><br><span class="line">            var l = this.value.length</span><br><span class="line">            var val = this.value</span><br><span class="line">            if (!isNaN(val)) &#123;</span><br><span class="line">                $(&quot;sp&quot;)[0].innerHTML = &quot;不能只为数字&quot;</span><br><span class="line">            &#125; else if (l &lt; 6) &#123;</span><br><span class="line">                $(&quot;sp&quot;)[0].innerHTML = &quot;不能小于6位&quot;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $(&quot;sp&quot;)[0].innerHTML = &quot;输入正确&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery知识</title>
      <link href="/2021/12/05/Jquery%E7%9F%A5%E8%AF%86/"/>
      <url>/2021/12/05/Jquery%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记录学习JQuery遇到的问题。</p><hr><h1 id="知识部分"><a href="#知识部分" class="headerlink" title="知识部分"></a>知识部分</h1><blockquote><p>更新中……</p></blockquote><hr><h1 id="使用json文件"><a href="#使用json文件" class="headerlink" title="使用json文件"></a>使用json文件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;https://clwy.cn/api/v2/home.json&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="comment">// 这个eash是jquery的循环</span></span><br><span class="line">        $.<span class="title function_">each</span>(data.<span class="property">introductory_courses</span>, <span class="keyword">function</span> (<span class="params">key, value</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> html = <span class="comment">//插入的html</span></span><br><span class="line">            $(<span class="string">&#x27;选择器&#x27;</span>).<span class="title function_">append</span>(html)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;, <span class="string">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="页面不跳转更新内容"><a href="#页面不跳转更新内容" class="headerlink" title="页面不跳转更新内容"></a>页面不跳转更新内容</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前一个页面传输id</span></span><br><span class="line">&lt;a href=<span class="string">&quot;details.html?id=$&#123;value.id&#125;&quot;</span>&gt;</span><br><span class="line"><span class="comment">// 后一个页面接受id</span></span><br><span class="line"><span class="keyword">var</span> id = location.<span class="property">href</span>.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">$.<span class="title function_">get</span>(<span class="string">`https://clwy.cn/video/api/v2/categories/<span class="subst">$&#123;id&#125;</span>.json`</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;&#125;,<span class="string">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="JQuery遇到的问题"><a href="#JQuery遇到的问题" class="headerlink" title="JQuery遇到的问题"></a>JQuery遇到的问题</h1><ul><li><p>Script的位置：head中的JS代码会在页面加载完成之前就读取，而放在body中的JS代码，会在整个页面加载完成之后读取。（如果我们想定义一个全局对象，而这个对象是页面中的某个按钮时，我们必须将其放入body中，道理很明显：如果放入head，那当你定义的时候，那个按钮都没有被加载，可能获得的是一个undefind）</p></li><li><p>基础：加表示时字符串（String是由数字、字母、下划线组成的一串字符。）</p></li><li><p>不使用定义var时，直接赋值也是可以的，（但是还不明白为什么）。</p></li><li><p>Console.log放到上面时，网页输出不成功显示undefined。</p></li><li><p>使用appendTo等前面要加标签。</p></li><li><p>多个添加CSS的样式时，下面的生效。</p></li><li><p>Is范围大，需要加点.class，：为checked的用法（另外它的使用方法还需要加深）。</p></li></ul><p>如果一个div里面有多个p等标签使用html和text修改，里面的都会改。</p><ul><li><p>使用prop时true和false不需要加引号（“”）。使用if时记得多个等号（= = =）。</p></li><li><p>return false防止刷新和停止执行作用。</p></li><li><p>自增++，和自减–，计算器和数字比大小，转化为整数，小数的计算有精度问题，可以将变量*1转化为数字，目前不清楚原理以及其他影响。</p></li><li><p>Prop用来判断含ed的属性，利用true和false两个来判断。</p></li><li><p>定时器setInterval(,)先用函数封装，再调用，重要的是setInterval用个函数相当于容器放里面，为下面的清除提供方法。删除clearInterval。利用hover写。</p></li><li><p>switch语句只能判断=，case后面是判断等于值，字符串加引号。</p></li><li><p>使用select时候，option必须要写value，不写就会直接获取内容文本。</p></li><li><p>先定义一个变量后，后面不用var，直接赋值。</p></li><li><p>setTimeout延时执行。</p></li><li><p>追加的标签不能绑定事件，例如：$(document).on(click, a, function () {})。</p></li><li><p>If判断，比大小，假设一个为最大值对比，之后将大的赋值为最大。</p></li><li><p>Hover为mouseenter和mouseleave的和</p></li><li><p>Offset偏移相对于body，输出是像素。Position位置相对于父元素，输出是像素。两个获取左右都是要在（）后面加点.来实现。 </p></li><li><p>Scroll滚动，是父元素的位置改变，输出的不是像素。</p></li><li><p>Position不会和边距有关系，只有定位相联系。</p></li><li><p>使用moment时间插件，利用定时器时先调用一次，显示出来后每秒执行一次。（设置好样式）</p></li><li><p>Silde动画没有slideTo，（）后面写时间，fadeTo()写时间，透明度。</p></li><li><p>HTML的元素element.style的权值比在css里面写的要优先。</p></li><li><p>dl不能设置前面的圆点</p></li><li><p>对元素取索引值时，一个父元素有其他的元素，同辈索引值为在整个父元素的位置，当利用其他的元素给它们设置时其索引值是重新从0开始。</p></li><li><p>animate里面的left和top要写定位。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JQuery知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js</title>
      <link href="/2021/12/05/Node-js%E7%9A%84Express%E4%B8%8ESequelize/"/>
      <url>/2021/12/05/Node-js%E7%9A%84Express%E4%B8%8ESequelize/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记录使用Node.js的Express与Sequelize开发后端接口方法。</p><hr><h1 id="yarn工具"><a href="#yarn工具" class="headerlink" title="yarn工具"></a>yarn工具</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 全局安装；</span><br><span class="line">npm i -g yarn</span><br><span class="line">// 安装国内镜像文件，三个命令行；</span><br><span class="line">yarn config set registry https://registry.npm.taobao.org --global</span><br><span class="line">yarn config set disturl https://npm.taobao.org/dist --global</span><br><span class="line">yarn config set sass_binary_site http://cdn.npm.taobao.org/dist/node-sass -g</span><br><span class="line">// 基本命令格式</span><br><span class="line">yarn add//安装</span><br><span class="line">yarn global add//全局安装</span><br></pre></td></tr></table></figure><hr><h1 id="Hello-word项目"><a href="#Hello-word项目" class="headerlink" title="Hello word项目"></a>Hello word项目</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 初始化，建立package.json文件</span><br><span class="line">npm init</span><br><span class="line">// 注意使用yarn init好像有问题（具体不清楚原因，推荐还是npm init）</span><br><span class="line"></span><br><span class="line">// 安装express</span><br><span class="line">yarn add express</span><br><span class="line"></span><br><span class="line">// 建立main里面的js入口文件</span><br><span class="line">// 引用express</span><br><span class="line">var express = require(&#x27;express&#x27;);</span><br><span class="line">// 使用</span><br><span class="line">var app = express();</span><br><span class="line">// req是前端发送，res是后端返回</span><br><span class="line">app.get(&#x27;/&#x27;, function (req, res) &#123;</span><br><span class="line">    res.send(&#x27;Hello World!&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">// 命令行提示</span><br><span class="line">app.listen(3000, function () &#123;</span><br><span class="line">    console.log(&#x27;成功启动&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 注意，package.json文件中，启动命令是serve时；</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;serve&quot;: &quot;node index.js&quot;</span><br><span class="line">&#125;,</span><br><span class="line">npm run serve// 需要加run（其他不需要）</span><br><span class="line">yarn serve// 直接输入</span><br></pre></td></tr></table></figure><hr><h1 id="快速构建node项目"><a href="#快速构建node项目" class="headerlink" title="快速构建node项目"></a>快速构建node项目</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 安装命令</span><br><span class="line">cnpm install express-generator -g</span><br><span class="line">// 新建项目</span><br><span class="line">express --view=ejs blog</span><br><span class="line">cd blog</span><br><span class="line">cnpm install</span><br><span class="line">// 启动项目</span><br><span class="line">npm start</span><br><span class="line">// 修改端口号（app.js里面修改）可选</span><br><span class="line">process.env.PORT = 2000</span><br><span class="line">// 使用nodemon监听代码变动</span><br><span class="line">cnpm i nodemon -S</span><br><span class="line">// 在package.json文件修改为</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;nodemon ./bin/www&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><hr><h1 id="安装sequelize连接数据库"><a href="#安装sequelize连接数据库" class="headerlink" title="安装sequelize连接数据库"></a>安装sequelize连接数据库</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 安装sequelize和mysql2</span><br><span class="line">cnpm install sequelize -S</span><br><span class="line">cnpm install mysql2 -S</span><br><span class="line">// 全局安装sequelize-cli（下次不要安装了）</span><br><span class="line">cnpm install sequelize-cli -g</span><br><span class="line">// 初始化项目</span><br><span class="line">sequelize init</span><br><span class="line">// 配置数据库</span><br><span class="line">&quot;development&quot;: &#123;</span><br><span class="line">    &quot;database&quot;: &quot;blog_development&quot;,</span><br><span class="line">&#125;</span><br><span class="line">// 使用命令行创建数据库（报错就手动，推荐手动），后面迁移不成功就输入下面的代码</span><br><span class="line">sequelize db:create --charset &#x27;utf8mb4&#x27;</span><br><span class="line">// 手动创建</span><br><span class="line">// 使用软件创建数据库：先创建连接，后建立和config文件中名字相同的库；</span><br><span class="line">// 排序选择utf8mb4_general_ci；</span><br><span class="line"></span><br><span class="line">// 创建模型</span><br><span class="line">sequelize model:generate --name Article --attributes title:string,content:text</span><br><span class="line">// 运行迁移</span><br><span class="line">sequelize db:migrate</span><br></pre></td></tr></table></figure><hr><h1 id="实现增删改查"><a href="#实现增删改查" class="headerlink" title="实现增删改查"></a>实现增删改查</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">// 在routes中创建路由，并在app.js入口文件引入和使用；（如下）</span><br><span class="line">var articlesRouter = require(&#x27;./routes/articles&#x27;);</span><br><span class="line">app.use(&#x27;/articles&#x27;,articlesRouter)</span><br><span class="line"></span><br><span class="line">// 先引入</span><br><span class="line">var models = require(&#x27;../models&#x27;);</span><br><span class="line"></span><br><span class="line">// get请求</span><br><span class="line">router.get(&#x27;/&#x27;, function (req, res, next) &#123;</span><br><span class="line">    models.Article.findAll().then(articles =&gt; &#123;</span><br><span class="line">        res.json(&#123;articles: articles&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">// 第二种写法</span><br><span class="line">router.get(&#x27;/&#x27;, async function (req, res, next) &#123;</span><br><span class="line">    var articles = await models.Article.findAll(&#123;</span><br><span class="line">        order: [[&#x27;id&#x27;, &#x27;DESC&#x27;]],// 这里是倒叙</span><br><span class="line">    &#125;)</span><br><span class="line">    res.json(&#123;articles: articles&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 查询</span><br><span class="line">router.get(&#x27;/:id&#x27;, async function (req, res, next) &#123;</span><br><span class="line">    var article = await models.Article.findByPk(req.params.id);</span><br><span class="line">    res.json(&#123;article: article&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 新增</span><br><span class="line">router.post(&#x27;/&#x27;, async function (req, res, next) &#123;</span><br><span class="line">    var article = await models.Article.create(req.body)</span><br><span class="line">    res.json(&#123;article: article&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 删除</span><br><span class="line">router.delete(&#x27;/:id&#x27;, async function (req, res, next) &#123;</span><br><span class="line">    var article = await models.Article.findByPk(req.params.id)</span><br><span class="line">    article.destroy();</span><br><span class="line">    res.json(&#123;msg: &#x27;删除成功&#x27;&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 修改</span><br><span class="line">router.put(&#x27;/:id&#x27;, async function (req, res, next) &#123;</span><br><span class="line">    var article = await models.Article.findByPk(req.params.id);</span><br><span class="line">    article.update(req.body);</span><br><span class="line">    res.json(&#123;article: article&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="跨域：读取不了数据"><a href="#跨域：读取不了数据" class="headerlink" title="跨域：读取不了数据"></a>跨域：读取不了数据</h1><p>这个配置方法只在开发环境有效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1、vue的跨域配置</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123; // 增加一个api的前缀（proxyTable代理服务器）</span><br><span class="line">      &#x27;/api&#x27;: &#123;</span><br><span class="line">        target: process.env.VUE_APP_BASE_API, // 后台接口域名</span><br><span class="line">        ws: true, // 如果要代理 websockets，配置这个参数</span><br><span class="line">        secure: false, // 如果是https接口，需要配置这个参数</span><br><span class="line">        changeOrigin: true, // 是否跨域</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          &#x27;^/api&#x27;: &#x27;&#x27; //用&#x27;/api&#x27;代替target里面的地址</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2、CORS</span><br><span class="line">通过自定义请求头来让服务器和浏览器进行沟通</span><br><span class="line"></span><br><span class="line">3、nginx代理跨域</span><br><span class="line">nginx模拟一个虚拟服务器，因为服务器与服务器之间是不存在跨域的，</span><br><span class="line">发送数据时 ，客户端-&gt;nginx-&gt;服务端</span><br><span class="line">返回数据时，服务端-&gt;nginx-&gt;客户端</span><br></pre></td></tr></table></figure><hr><h1 id="模糊搜索和分页"><a href="#模糊搜索和分页" class="headerlink" title="模糊搜索和分页"></a>模糊搜索和分页</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">router.get(&#x27;/&#x27;, async function (req, res, next) &#123;</span><br><span class="line">    var where = &#123;&#125;;</span><br><span class="line">    var title = req.query.title;</span><br><span class="line">    var content = req.query.content;</span><br><span class="line">    var currentPage = parseInt(req.query.currentPage) || 1;</span><br><span class="line">    var pageSize = parseInt(req.query.pageSize) || 2;</span><br><span class="line">    // 查询关联id字段时，就不要使用[Op.like]了，否者查询1出现11的bug</span><br><span class="line">    if (title) &#123;</span><br><span class="line">        where.title = &#123;</span><br><span class="line">            [Op.like]: `%$&#123;title&#125;%`</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (content) &#123;</span><br><span class="line">        where.content = &#123;</span><br><span class="line">            [Op.like]: `%$&#123;content&#125;%`</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    var result = await models.Article.findAndCountAll(&#123;</span><br><span class="line">        order: [[&#x27;id&#x27;, &#x27;DESC&#x27;]],</span><br><span class="line">        where: where,</span><br><span class="line">        offset: (currentPage - 1) * pageSize,</span><br><span class="line">        limit: pageSize,</span><br><span class="line">    &#125;)</span><br><span class="line">    res.json(&#123;</span><br><span class="line">        articles: result.rows,</span><br><span class="line">        pagination: &#123;</span><br><span class="line">            currentPage: currentPage,</span><br><span class="line">            pageSize: pageSize,</span><br><span class="line">            total: result.count</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 创建模型</span><br><span class="line">sequelize model:generate --name Category --attributes name:string,sort:integer</span><br><span class="line">// 在迁移文件添加默认值</span><br><span class="line">allowNull: false,</span><br><span class="line">defaultValue: &#x27;0&#x27;</span><br><span class="line">// 迁移</span><br><span class="line">sequelize db:migrate</span><br><span class="line">// 回滚</span><br><span class="line">npx sequelize-cli db:migrate:undo</span><br><span class="line">// 或者（网上看的还未验证）sequelize db:migrate:undo</span><br><span class="line">// 新的模型为添加字段</span><br><span class="line">sequelize-cli migration:create --name add-categoryID-to-userID</span><br><span class="line">// 在新的迁移文件中</span><br><span class="line">// up里面</span><br><span class="line">await queryInterface.addColumn(&#x27;articles&#x27;, &#x27;categoryId&#x27;, &#123;</span><br><span class="line">    type: Sequelize.INTEGER</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">await queryInterface.addColumn(&#x27;articles&#x27;, &#x27;userId&#x27;, &#123;</span><br><span class="line">    type: Sequelize.INTEGER</span><br><span class="line">&#125;)</span><br><span class="line">// down里面</span><br><span class="line">await queryInterface.removeColumn(&#x27;articles&#x27;, &#x27;categoryId&#x27;)</span><br><span class="line">await queryInterface.removeColumn(&#x27;articles&#x27;, &#x27;userId&#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 模型里面从属</span><br><span class="line">models.Category.hasMany(models.Article)</span><br><span class="line">models.Article.belongsTo(models.Category)</span><br><span class="line">// articles中关联模型</span><br><span class="line">include: [models.Category, models.User],</span><br><span class="line">// categories中使用sort排序</span><br><span class="line">order: [[&#x27;id&#x27;, &#x27;DESC&#x27;]], // 正序ASC</span><br></pre></td></tr></table></figure><p>在下拉读取时分类时，接口里面写分页写大，不然在读取只能读第一页</p><hr><h1 id="数据库密码加密"><a href="#数据库密码加密" class="headerlink" title="数据库密码加密"></a>数据库密码加密</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">// 安装bcryptjs</span><br><span class="line">npm install bcryptjs</span><br><span class="line">// 在users里面引用</span><br><span class="line">var bcrypt = require(&#x27;bcryptjs&#x27;);</span><br><span class="line">// 用户新增里面</span><br><span class="line">// 密码需要转化为字符串</span><br><span class="line">var password = req.body.password ? req.body.password.toString().trim() : false</span><br><span class="line">var name = req.body.name ? req.body.name.toString().trim() : false</span><br><span class="line">// 判断填写的密码和用户名</span><br><span class="line">if (!name) &#123;</span><br><span class="line">    return res.json(&#123;</span><br><span class="line">    code: 20000,</span><br><span class="line">    data: &#123;status: false,msg: &quot;用户名必须填写&quot;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">if (!password) &#123;</span><br><span class="line">    return res.json(&#123;</span><br><span class="line">        code: 20000,</span><br><span class="line">        data: &#123;status: false,msg: &quot;密码必须填写&quot;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">// 查询单条属性findOne</span><br><span class="line">var user = await models.User.findOne(&#123;</span><br><span class="line">    where: &#123;name: req.body.name&#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 判断用户名已经存在（这里可以写return,必须要在函数里面，当前if在一个函数里面）</span><br><span class="line">if (user) &#123;</span><br><span class="line">    return res.json(&#123;</span><br><span class="line">       code: 20000,</span><br><span class="line">       data: &#123;</span><br><span class="line">    status: false,</span><br><span class="line">    msg: &quot;用户名已经存在&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">// 生成盐（加密用）</span><br><span class="line">var salt = bcrypt.genSaltSync(10);</span><br><span class="line">// 将密码加密转化</span><br><span class="line">var hash = bcrypt.hashSync(password, salt);</span><br><span class="line">// 推到数据库（...为展开下面可以直接覆盖）</span><br><span class="line">var body = &#123;</span><br><span class="line">    ...req.body,</span><br><span class="line">    password: hash</span><br><span class="line">&#125;</span><br><span class="line">user = await models.User.create(body)</span><br><span class="line">// 返回结果</span><br><span class="line">res.json(&#123;</span><br><span class="line">    code: 20000,</span><br><span class="line">    data: &#123;</span><br><span class="line">        status: true,</span><br><span class="line">        user: user</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="登录生成token"><a href="#登录生成token" class="headerlink" title="登录生成token"></a>登录生成token</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 检查输入的密码是否正确</span><br><span class="line">var password = req.body.password // 这里</span><br><span class="line">var hash = user.password // 数据库保存的乱码</span><br><span class="line">var check = bcrypt.compareSync(password, hash);</span><br><span class="line">// 安装生成token的包</span><br><span class="line">yarn add jsonwebtoken</span><br><span class="line">// 引用jwt</span><br><span class="line">var jwt = require(&#x27;jsonwebtoken&#x27;);</span><br><span class="line">// 生成token，将id和name生成token，其中有个环境变量，最后的生成有效期为7天的token；</span><br><span class="line">// 注意这里生成token时，如果有多个中间件，后台和前台的token都会验证成功（bug）</span><br><span class="line">var token = jwt.sign(&#123;</span><br><span class="line">    id: user.id,</span><br><span class="line">    name: user.name</span><br><span class="line">&#125;, process.env.SECRET, &#123;expiresIn: 60 * 60 * 24 * 7&#125;);</span><br><span class="line">// 返回token</span><br><span class="line">res.json(&#123;token:token&#125;)</span><br><span class="line"></span><br><span class="line">// 环境变量</span><br><span class="line">// 安装dotenv</span><br><span class="line">yarn add dotenv</span><br><span class="line">//安装完成后，在项目根目录建一个.env文件，里面代码</span><br><span class="line">SECRET=clwy.cn // 例如</span><br><span class="line">// 在根目录app.js中引用</span><br><span class="line">require(&#x27;dotenv&#x27;).config()</span><br></pre></td></tr></table></figure><hr><h1 id="中间件验证登录"><a href="#中间件验证登录" class="headerlink" title="中间件验证登录"></a>中间件验证登录</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 根目录下新建/middlewares/checkAuth.js文件</span><br><span class="line">// 里面代码（如下checkAuth）</span><br><span class="line"></span><br><span class="line">// 在app.js中，后台的路由中，添加上中间件</span><br><span class="line">// 引用</span><br><span class="line">var checkAuth = require(&#x27;./middlewares/checkAuth&#x27;)</span><br><span class="line">// 添加</span><br><span class="line">app.use(&#x27;/admin/categories&#x27;, checkAuth(), adminCategoriesRouter);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// 中间件代码</span><br><span class="line">var jwt = require(&#x27;jsonwebtoken&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = function (options) &#123;</span><br><span class="line">    return function (req, res, next) &#123;</span><br><span class="line">        // 验证是否有token</span><br><span class="line">        var token = req.headers.token;</span><br><span class="line">        if (!token) &#123;</span><br><span class="line">            return res.json(&#123;</span><br><span class="line">                code: 50008,</span><br><span class="line">                message: &#x27;Token未提供&#x27;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 验证token是否正确</span><br><span class="line">        jwt.verify(token, process.env.SECRET, function (err, decoded) &#123;</span><br><span class="line">            if (err) &#123;</span><br><span class="line">                if (err.name == &quot;TokenExpiredError&quot;) &#123;</span><br><span class="line">                    return res.json(&#123;</span><br><span class="line">                        code: 50014,</span><br><span class="line">                        message: &#x27;Token过期&#x27;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                if (err.name == &quot;JsonWebTokenError&quot;) &#123;</span><br><span class="line">                    return res.json(&#123;</span><br><span class="line">                        code: 50008,</span><br><span class="line">                        message: &#x27;Token错误&#x27;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // decoded里面装的是解密出来的是之前加密生成的token的东西</span><br><span class="line">            // 解析出来的东西存入req</span><br><span class="line"></span><br><span class="line">            req.decoded = decoded;</span><br><span class="line">            next();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="时间moment"><a href="#时间moment" class="headerlink" title="时间moment"></a>时间moment</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 安装moment</span><br><span class="line">yarn add moment </span><br><span class="line">var moment = require(&#x27;moment&#x27;);// 引用</span><br><span class="line">// config.json配置时区，设置成国内</span><br><span class="line">&quot;timezone&quot;: &quot;+08:00&quot;</span><br><span class="line">// 设置时间对象（当前月去i，返回一年的数据）</span><br><span class="line">let months = []</span><br><span class="line">let data = []</span><br><span class="line">moment.locale(&#x27;zh-cn&#x27;);// 中国时区</span><br><span class="line">for (let i = 0; i &lt; 12; i++) &#123;</span><br><span class="line">    let month = moment().subtract(i, &#x27;months&#x27;).format(&quot;YYYY-MM&quot;);</span><br><span class="line">    // 注意format使用；</span><br><span class="line">    months.push(month)</span><br><span class="line">    let start = moment().subtract(i, &#x27;months&#x27;).startOf(&#x27;month&#x27;).format(&quot;YYYY-MM-DD&quot;) </span><br><span class="line">    + &#x27; 00:00:00&#x27;</span><br><span class="line">    let end = moment().subtract(i, &#x27;months&#x27;).endOf(&#x27;month&#x27;).format(&quot;YYYY-MM-DD&quot;) </span><br><span class="line">    + &#x27; 23:59:59&#x27;</span><br><span class="line">    let res = await models.Product.count(&#123;</span><br><span class="line">    where: &#123;&#x27;createdAt&#x27;: &#123;[Op.between]: [start, end]&#125;&#125;</span><br><span class="line">    &#125;)// count是查询符合条件的个数</span><br><span class="line">    data.push(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="seed种子文件添加数据"><a href="#seed种子文件添加数据" class="headerlink" title="seed种子文件添加数据"></a>seed种子文件添加数据</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 创建seed文件</span><br><span class="line">sequelize seed:generate --name order</span><br><span class="line">// 在文件seeders/xxx-order.js（可以修改后再次提交）</span><br><span class="line">// up里面（添加的数必须要有时间）</span><br><span class="line">let data= &#123;</span><br><span class="line">    name: &#x27;admin&#x27;,</span><br><span class="line">    createdAt: new Date(),</span><br><span class="line">    updatedAt: new Date()</span><br><span class="line">&#125;</span><br><span class="line">await queryInterface.bulkInsert(&#x27;Orders&#x27;, data, &#123;&#125;);// 需要大写</span><br><span class="line">// down（注意这个不是使用回滚，会导致之前的表迁移返回，暂时不知道如何使用）</span><br><span class="line">await queryInterface.bulkDelete(&#x27;Orders&#x27;, null, &#123;&#125;);</span><br><span class="line">// 运行迁移（所有的seed）</span><br><span class="line">sequelize db:seed:all</span><br><span class="line">// 迁移单个文件</span><br><span class="line">sequelize db:seed --seed xxx-order</span><br><span class="line">// 撤消最近种子</span><br><span class="line">sequelize db:seed:undo</span><br><span class="line">sequelize db:seed:undo:all// 所有的种子</span><br></pre></td></tr></table></figure><hr><h1 id="七牛云图片后台"><a href="#七牛云图片后台" class="headerlink" title="七牛云图片后台"></a>七牛云图片后台</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 安装</span><br><span class="line">npm install qiniu</span><br><span class="line">// 引用</span><br><span class="line">const qiniu = require(&#x27;qiniu&#x27;);</span><br><span class="line">// router中</span><br><span class="line">var accessKey = process.env.ACCESS_KEY;// 七牛云的密钥</span><br><span class="line">var secretKey = process.env.SECRET_KEY;// 七牛云的私钥</span><br><span class="line">var mac = new qiniu.auth.digest.Mac(accessKey, secretKey);</span><br><span class="line">var options = &#123;scope: process.env.SCOPE,&#125;;// 后为空间名字</span><br><span class="line">var putPolicy = new qiniu.rs.PutPolicy(options);</span><br><span class="line">var uploadToken = putPolicy.uploadToken(mac);</span><br><span class="line">// 最后返回uploadToken</span><br></pre></td></tr></table></figure><hr><h1 id="封装res返回的success、error"><a href="#封装res返回的success、error" class="headerlink" title="封装res返回的success、error"></a>封装res返回的success、error</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 新建utils/message.js文件</span><br><span class="line">const success = (res, message = &#x27;&#x27;, data = &#123;&#125;) =&gt; &#123;</span><br><span class="line">    return res.json(&#123;</span><br><span class="line">        code: 20000,</span><br><span class="line">        message,</span><br><span class="line">        data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const error = (res, message = &#x27;&#x27;) =&gt; &#123;</span><br><span class="line">    return res.json(&#123;</span><br><span class="line">        code: 20000,</span><br><span class="line">        message,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    success,</span><br><span class="line">    error</span><br><span class="line">&#125;</span><br><span class="line">// 路由中引用</span><br><span class="line">const &#123;success, error&#125; = require(&#x27;../utils/message&#x27;)</span><br><span class="line">// 使用</span><br><span class="line">success(res, &#x27;查询成功&#x27;, data)</span><br></pre></td></tr></table></figure><h1 id="CORS跨域处理"><a href="#CORS跨域处理" class="headerlink" title="CORS跨域处理"></a>CORS跨域处理</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yarn add cors</span><br><span class="line">// app.js中</span><br><span class="line">var cors = require(&#x27;cors&#x27;);</span><br><span class="line">// ... 注意位置</span><br><span class="line">var app = express();</span><br><span class="line">app.use(cors()); </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序基础</title>
      <link href="/2021/12/05/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/12/05/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>包括小程序的基本方法、记录本人开发中的问题。</p><h1 id="微信文件介绍"><a href="#微信文件介绍" class="headerlink" title="微信文件介绍"></a>微信文件介绍</h1><ul><li><p>项目配置文件：project.config.json</p></li><li><p>全局配置：app.json</p></li><li><p>页面配置：xxx.json</p></li></ul><hr><h1 id="微信自定义"><a href="#微信自定义" class="headerlink" title="微信自定义"></a>微信自定义</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;carts&#125;&#125;&quot; wx:key=&quot;index&quot; wx:for-index=&quot;index1&quot;&gt;</span><br><span class="line">    &lt;button bindtap=&quot;clickMe&quot; data-index=&quot;&#123;&#123;index1&#125;&#125;&quot;&gt;&#123;&#123;index1&#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="接口读取"><a href="#接口读取" class="headerlink" title="接口读取"></a>接口读取</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 生命周期函数--监听页面加载</span><br><span class="line">onLoad: function (options) &#123;</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: &#x27;https://clwy.cn/api/v2/home.json&#x27;,</span><br><span class="line">      success: res =&gt; &#123;</span><br><span class="line">        this.setData(&#123;</span><br><span class="line">          recommended_courses: res.data.recommended_courses</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><hr><h1 id="小程序字体"><a href="#小程序字体" class="headerlink" title="小程序字体"></a>小程序字体</h1><p>icon适量字体，能够适应各种尺寸而不失真，在小程序中使用icon-font字体。</p><ol><li><p>下载需要的字体图标</p></li><li><p>转换ttf文件<a href="https://transfonter.org/"><strong>https://transfonter.org/</strong></a></p><p><img src="https://pic.imgdb.cn/item/61dc7a202ab3f51d911303f3.jpg"></p></li><li><p>在微信小程序中使用</p><ol><li><p>在xxx.wxss文件中添加样式内容。打开刚刚我们经过转换的解压出来的文件，找到stylesheet.css，将其中的内容全部复制到xxx.wxss文件中。注意是转换过的那个文件。</p><p><img src="https://pic.imgdb.cn/item/61dc7a202ab3f51d911303f8.jpg"></p></li><li><p>打开没有转换过的download.zip解压出来的文件，找到iconfont.css文件，将这个文件中的没有打岔的内容复制到xxx.wxss文件中。@font-face这部分不要，只要下边的这部分。</p><p><img src="https://pic.imgdb.cn/item/61dc7a202ab3f51d91130401.jpg"></p></li></ol></li></ol><hr><h1 id="前台微信登录"><a href="#前台微信登录" class="headerlink" title="前台微信登录"></a>前台微信登录</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 登录赋值</span><br><span class="line">wx.setStorageSync(&#x27;access_token&#x27;, res.data.access_token)</span><br><span class="line">wx.setStorageSync(&#x27;token_type&#x27;, res.data.token_type)</span><br><span class="line"></span><br><span class="line">// 跳转tabBar页面会不刷新，解决办法在onShow里再次读取init()初始化函数，或者使用reLaunch跳转；</span><br><span class="line">wx.switchTab(&#123;</span><br><span class="line">    url: &#x27;../user/user&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">wx.reLaunch(&#123;</span><br><span class="line">    url: &#x27;../user/user&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 如何获取缓存的值</span><br><span class="line">let token_type = wx.getStorageSync(&#x27;token_type&#x27;)</span><br><span class="line">let access_token = wx.getStorageSync(&#x27;access_token&#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 在WXapp.js里面</span><br><span class="line">wx.login(&#123;</span><br><span class="line">      success: res =&gt; &#123;</span><br><span class="line">        // 发送 res.code 到后台换取 openId, sessionKey, unionId</span><br><span class="line">        wx.request(&#123;</span><br><span class="line">          url: `http://localhost:3000/auth`,</span><br><span class="line">          method: &#x27;POST&#x27;,</span><br><span class="line">          data: &#123;</span><br><span class="line">            code: res.code</span><br><span class="line">          &#125;,</span><br><span class="line">          success: res =&gt; &#123;</span><br><span class="line">            // 将返回的token存储起来，调用其他需要认证接口的时候，可以直接使用</span><br><span class="line">            wx.setStorageSync(&#x27;token&#x27;, res.data.data.token)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><hr><h1 id="前台后台接口"><a href="#前台后台接口" class="headerlink" title="前台后台接口"></a>前台后台接口</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// 登录，获取openid</span><br><span class="line">router.post(&#x27;/&#x27;, async function (req, res, next) &#123;</span><br><span class="line">    const code = req.body.code</span><br><span class="line">    const params = &#123;</span><br><span class="line">        appid: &#x27;wx4a9965771e11b4bd&#x27;,// 这个要和开发者的软件app一致</span><br><span class="line">        secret: &#x27;e94f1c12cb09e31bff0f12826f945b60&#x27;,// 小程序密钥</span><br><span class="line">        js_code: code,// 一次性code</span><br><span class="line">        grant_type: &#x27;authorization_code&#x27;// 授权类型</span><br><span class="line">    &#125;</span><br><span class="line">    // 访问微信接口获取openid</span><br><span class="line">    const result = await axios(&#123;</span><br><span class="line">        url: &#x27;https://api.weixin.qq.com/sns/jscode2session&#x27;,</span><br><span class="line">        method: &#x27;get&#x27;,</span><br><span class="line">        params</span><br><span class="line">    &#125;)</span><br><span class="line">    // 判断是否错误</span><br><span class="line">    if (result.data.errcode) &#123;</span><br><span class="line">        return res.json(&#123;</span><br><span class="line">            code: 20000,</span><br><span class="line">            data: &#123;</span><br><span class="line">                success: false,</span><br><span class="line">                message: &quot;code已经失效，请重新获取&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    const openid = result.data.openid</span><br><span class="line">    // 判断用户是否存在，如果存在就直接查出来。不存在就新增一个</span><br><span class="line">    let user = await models.User.findOne(&#123;where: &#123;openid: openid&#125;&#125;);</span><br><span class="line">    if (!user) &#123;</span><br><span class="line">        user = await models.User.create(&#123;openid: openid&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 这里的decode是后端利用token反向得到id，中间件中配置</span><br><span class="line">id = req.decoded.user.id</span><br></pre></td></tr></table></figure><hr><h1 id="微信小程序支付后端"><a href="#微信小程序支付后端" class="headerlink" title="微信小程序支付后端"></a>微信小程序支付后端</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 加减number-precision包</span><br><span class="line">// 安装（可以解决小数计算的精度问题）</span><br><span class="line">yarn add number-precision</span><br><span class="line">const NP = require(&#x27;number-precision&#x27;)</span><br><span class="line">total.num = NP.plus(total.num, cart.num);</span><br><span class="line"></span><br><span class="line">// 支付</span><br><span class="line">// 安装tenpay支付包</span><br><span class="line">yarn add tenpay</span><br><span class="line">const tenpay = require(&#x27;tenpay&#x27;);</span><br><span class="line">// 请求</span><br><span class="line">const config = &#123;&#125;// 相关参数</span><br><span class="line">const api = new tenpay(config);</span><br><span class="line">let result = await api.getPayParams(&#123;&#125;);// 数据库的相关订单信息</span><br><span class="line">success(res, &#x27;成功&#x27;, result)// result就是包含的支付接口信息</span><br></pre></td></tr></table></figure><hr><h1 id="微信小程序扫码购前台"><a href="#微信小程序扫码购前台" class="headerlink" title="微信小程序扫码购前台"></a>微信小程序扫码购前台</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 解决真机调试ip</span><br><span class="line">// cmd中输入ipconfig，查看IPv4</span><br><span class="line">// 接口地址需要修改，如下</span><br><span class="line">&#x27;http://10.0.0.27:3000/auth&#x27;</span><br><span class="line">// 支付</span><br><span class="line">wx.requestPayment(&#123;</span><br><span class="line">    &#x27;timeStamp&#x27;: res.data.timeStamp,</span><br><span class="line">    &#x27;nonceStr&#x27;: res.data.nonceStr,</span><br><span class="line">    &#x27;package&#x27;: res.data.package,</span><br><span class="line">    &#x27;signType&#x27;: res.data.signType,</span><br><span class="line">    &#x27;paySign&#x27;: res.data.paySign,</span><br><span class="line">    // 支付成功</span><br><span class="line">    &#x27;success&#x27;: function(res)&#123;&#125; &#123;&#125;,</span><br><span class="line">    // 支付失败</span><br><span class="line"></span><br><span class="line">    &#x27;fail&#x27;: function(res)&#123;&#125; &#123;</span><br><span class="line">    //是否用户主动取消？</span><br><span class="line">           if (res.errMsg == &quot;requestPayment:fail cancel&quot;) &#123;                    </span><br><span class="line">           &#125; else &#123;// 支付程序故障&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 无论成功或失败</span><br><span class="line">    &#x27;complete&#x27;: function(res)&#123;&#125; &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 底部使用fixed布局，会导致有一部分内容遮住</span><br><span class="line">// page中写上margin，或者padding</span><br><span class="line">// 还有问题页面问题，就是page的高度100%去掉</span><br><span class="line"></span><br><span class="line">// 半圆</span><br><span class="line">width: 80px;</span><br><span class="line">height: 40px;</span><br><span class="line">border-radius: 80px 80px 0 0;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html基础</title>
      <link href="/2021/12/05/HTML%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/12/05/HTML%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>更新中……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础</title>
      <link href="/2021/12/05/CSS%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/12/05/CSS%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>更新中……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.0基础</title>
      <link href="/2021/12/05/Vue2-0%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/12/05/Vue2-0%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>主要介绍Vue2.0的基本语法。</p><hr><h1 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue create 你的项目名称</span><br><span class="line">vue ui</span><br></pre></td></tr></table></figure><h1 id="基础语法一"><a href="#基础语法一" class="headerlink" title="基础语法一"></a>基础语法一</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">// 文本插值</span><br><span class="line">&lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p v-text=&quot;message&quot;&gt;&lt;/p&gt; // 同上效果</span><br><span class="line">&lt;p v-html=&quot;message&quot;&gt;&lt;/p&gt; // 识别标签</span><br><span class="line">// 注意：template中只能放一个标签</span><br><span class="line"></span><br><span class="line">// 动态绑定v-bind</span><br><span class="line">&lt;div v-bind:id=&quot;myId&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div :id=&quot;myId&quot;&gt;&lt;/div&gt;</span><br><span class="line">// ---------</span><br><span class="line">// 表达式</span><br><span class="line">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class="line">&lt;div v-bind:id=&quot;&#x27;list-&#x27; + id&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// 条件渲染</span><br><span class="line">&lt;h1 v-if=&quot;isShow&quot;&gt;isShow是data的动态数据，不要写出&#x27;isShow&#x27;字符串会一直显示&lt;/h1&gt;</span><br><span class="line">&lt;div v-else-if=&quot;sex === &#x27;female&#x27;&quot;&gt;写上判断条件&lt;/div&gt;</span><br><span class="line">&lt;div v-else&gt;显示&lt;/div&gt;</span><br><span class="line">// ---------</span><br><span class="line">// v-show</span><br><span class="line">&lt;h1 v-show=&quot;active&quot;&gt;这里是v-show&lt;/h1&gt;</span><br><span class="line">// ---------</span><br><span class="line">// key 管理可复用的元素</span><br><span class="line">&lt;div v-if=&quot;loginType === &#x27;username&#x27;&quot;&gt;</span><br><span class="line">    &lt;label&gt;用户名&lt;/label&gt;</span><br><span class="line">    &lt;input placeholder=&quot;请输入用户名&quot; key=&quot;username-input&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div v-else&gt;</span><br><span class="line">    &lt;label&gt;邮箱&lt;/label&gt;</span><br><span class="line">    &lt;input placeholder=&quot;请输入邮箱&quot; key=&quot;email-input&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">// 未添加key，input会被复用，只改变placeholder中的内容</span><br><span class="line">// Vue尽可能高效地渲染元素，复用已有元素</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// v-for列表渲染</span><br><span class="line">// key不是必须的，添加key以便Vue能跟踪每个节点的身份</span><br><span class="line">&lt;li v-for=&quot;item in courses&quot; :key=&quot;item.id&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">// ---------</span><br><span class="line">// 索引值</span><br><span class="line">&lt;li v-for=&quot;(item, index) in courses&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">    &#123;&#123; index + 1 &#125;&#125;+&#x27;索引值&#x27;+&#123;&#123; item.name &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">// 自定义索引名，双重v-for注意命名区分</span><br><span class="line">&lt;div v-for=&quot;(item1,index1) in list1&quot;&gt;</span><br><span class="line">    &lt;span v-for=&quot;(item2,index2) in item1.list2&quot;&gt;&#123;&#123;item2.XXX&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">// ---------</span><br><span class="line">// 使用v-for渲染对象</span><br><span class="line">// 其中value是键值、name为键名、index是索引值</span><br><span class="line">// course: &#123;&#125;</span><br><span class="line">&lt;li v-for=&quot;(value, name, index) in course&quot; :key=&quot;value&quot;&gt;</span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">// v-for可以使用v-for=&quot;n in 10&quot;，也可使用到子组件上</span><br><span class="line">// v-if和v-for不能同时使用，可computed过滤再v-for</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 事件处理v-on</span><br><span class="line">// 点击事件v-on:click或者@click</span><br><span class="line">&lt;button v-on:click=&quot;inc(2)&quot;&gt;点这里&lt;/button&gt;</span><br><span class="line">// ---------</span><br><span class="line">// 事件修饰符</span><br><span class="line">&lt;!-- 阻止单击事件继续传播stop --&gt;</span><br><span class="line">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 提交事件不再重载页面prevent，阻止默认行为 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br><span class="line">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class="line">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 只有修饰符 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</span><br><span class="line">// capture，触发方式为捕获</span><br><span class="line">// self，阻止自身冒泡，stop则是停止冒泡，</span><br><span class="line">// 如果子元素触发事件，父元素self则不会触发，但是其父元素的父辈都会触发</span><br><span class="line">// once，触发一次</span><br><span class="line">// passive，执行默认方法，</span><br><span class="line">// 每次事件产生，浏览器都会去查询一下是否有preventDefault阻止该次事件的默认动作</span><br><span class="line">// 滚动监听，移动每个像素都会产生一次事件，每次都使用内核线程查询prevent会使滑动卡顿</span><br><span class="line">// passive和prevent冲突，不能同时绑定在一个监听器上</span><br><span class="line">// ---------</span><br><span class="line">// 按键修饰符</span><br><span class="line">// 如enter，只有按下enter才会触发</span><br><span class="line">&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;</span><br><span class="line">// 鼠标按钮修饰符left、right、middle</span><br><span class="line">// ---------</span><br><span class="line">// $event 事件对象</span><br><span class="line">&lt;button @click=&quot;handleClick($event)&quot;&gt;点我&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 表单输入v-model</span><br><span class="line">&lt;input v-model=&quot;message&quot; placeholder=&quot;请输入&quot;&gt;</span><br><span class="line">// checkbox中v-model显示的是value值</span><br><span class="line">&lt;input type=&quot;checkbox&quot; id=&quot;html&quot; value=&quot;HTML&quot; v-model=&quot;checked&quot;&gt;</span><br><span class="line">// ---------</span><br><span class="line">// 修饰符</span><br><span class="line">// lazy修饰符，点击回车或者失去焦点时才发生数据响应</span><br><span class="line">&lt;input v-model.lazy=&quot;msg&quot;&gt;</span><br><span class="line">&lt;!--msg不会实时更新，只有点击回车或者失去焦点--&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt; </span><br><span class="line">// number修饰符，将输入的内容直接作为number类型使用</span><br><span class="line">&lt;input v-model.number=&quot;age&quot; type=&quot;number&quot;&gt;</span><br><span class="line">// trim修饰符，去除左右两边的空格</span><br><span class="line">&lt;input v-model.trim=&quot;msg&quot;&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="基础语法二"><a href="#基础语法二" class="headerlink" title="基础语法二"></a>基础语法二</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">// 计算属性</span><br><span class="line">// 计算属性不能和data、props重名</span><br><span class="line">&lt;div&gt;&#123;&#123; inc &#125;&#125;&lt;/div&gt;</span><br><span class="line">data()&#123; return:&#123; inc : 0 &#125; &#125;</span><br><span class="line">computed: &#123;</span><br><span class="line">    inc: function() &#123;</span><br><span class="line">      return inc++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">//---------</span><br><span class="line">// 计算属性缓存</span><br><span class="line">// 计算属性是基于它们的响应式依赖进行缓存的，只在相关响应式依赖发生改变时它们才会重新求值；</span><br><span class="line">// inc若绑定了v-model，不管有几个元素渲染inc，只会运行一次，</span><br><span class="line">// 而methods则会运行多次；</span><br><span class="line">computed: &#123;</span><br><span class="line">    fullName: function() &#123;</span><br><span class="line">      console.log(&quot;我运行了&quot;)// 只会运行一次，即打印一次</span><br><span class="line">      return inc + &#x27;0&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">//---------</span><br><span class="line">// getter和setter的使用</span><br><span class="line">你的全名是：&#123;&#123; fullName &#125;&#125;&lt;br&gt;</span><br><span class="line">&lt;button @click=&quot;fullName=&#x27;关羽&#x27;&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">data() &#123;</span><br><span class="line">  return &#123;value: &#x27;刘备&#x27;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    get: function () &#123;</span><br><span class="line">      return this.value</span><br><span class="line">    &#125;,</span><br><span class="line">    // set不能直接返回改变，还是需要依赖get的值该则改变，</span><br><span class="line">    // 可直接设置this.value，不使用setter；</span><br><span class="line">    set: function (newValue) &#123;</span><br><span class="line">      this.value = newValue</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 侦听器</span><br><span class="line">watch: &#123;</span><br><span class="line">  &#x27;$route&#x27;: &#x27;init&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">// 第二种写法</span><br><span class="line">watch: &#123;</span><br><span class="line">  $route() &#123;</span><br><span class="line">    this.init()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">// 可以接受两个参数，第一个是新值、第二个是旧值；</span><br><span class="line">a: function (val, oldVal) &#123;console.log(val,oldVal)&#125;</span><br><span class="line"></span><br><span class="line">// computed、watch两者区别</span><br><span class="line">// computed支持缓存，只有依赖数据发生改变，才会重新进行计算，</span><br><span class="line">// computed不支持异步，当computed内有异步操作时无效，无法监听数据的变化</span><br><span class="line">// watch不支持缓存，数据变，直接会触发相应的操作</span><br><span class="line">// watch支持异步</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Class 与 Style 绑定</span><br><span class="line">&lt;div :class=&quot;isActive?&#x27;active&#x27;:&#x27;&#x27;&quot;&gt;Vue&lt;/div&gt;</span><br><span class="line">&lt;div :class=&quot;&#123;active:isActive&#125;&quot;&gt;Vue&lt;/div&gt;</span><br><span class="line">// 多个样式</span><br><span class="line">&lt;div v-bind:class=&quot;[isActive ? activeClass : &#x27;&#x27;, underlineClass]&quot;&gt;Vue教程&lt;/div&gt;</span><br><span class="line">data() &#123;return &#123;isActive: true&#125;&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="声命周期"><a href="#声命周期" class="headerlink" title="声命周期"></a>声命周期</h1><ul><li>什么是vue生命周期？</li></ul><p>​    生命周期：Vue实例从创建到销毁的过程，也就是从开始创建、初始化数据、编译模板、挂载DOM-渲染、更新-渲染、卸载等一系列的过程。</p><ul><li>vue生命周期的作用是什么？</li></ul><p>​    Vue所有的功能的实现都是围绕其生命周期进行的，在生命周期的不同阶段调用对应的钩子函数可以实现组件数据管理和DOM渲染两大重要功能。</p><ul><li>第一次页面加载会触发哪几个钩子？</li></ul><p>​    beforeCreate、created、beforeMount、mounted这四个钩子</p><ul><li><p>简述每个周期具体适合哪些场景？</p><ol><li>beforeCreate-实例初始化之后，this指向创建的实例，此时的数据观察事件机制都未形成，不能获得DOM节点。data、computed、watch、methods上的方法和数据均不能访问。可以添加loading事件、初始化非响应式变量；</li><li> created-实例创建完成，完成数据（data、props、computed）的初始化导入依赖项。可访问data、computed、watch、methods上的方法和数据。常用于异步请求（请求过多会导致白屏），结束loading事件；未挂载DOM，若在此阶段进行DOM操作一定要放在Vue.nextTick()的回调函数中。</li><li>beforeMount-挂载开始之前，vue挂载的根节点template已经创建，得不到具体的DOM元素；</li><li> mounted-实例挂载到DOM上，完成双向绑定、挂载DOM和渲染，可对DOM进行操作，接口请求；</li><li>beforeUpdate-数据更新前，是更新数据之后，还没有渲染的时候执行。可在更新前访问现有的DOM，手动移出添加的事件监听器。</li><li> updated-数据更新后，完成虚拟DOM的重新渲染和打补丁。组件DOM已完成更新，可执行依赖的DOM操作。注意：不要在此函数中操作数据（修改属性），会陷入死循环。</li><li> beforeDestroy-实例销毁之前，可做一些删除提示、销毁定时器、解绑全局事件、销毁插件对象等操作。</li><li> destroyed-实例销毁后，Vue实例指向的所有东西都会解绑定，无法操作里面的任何东西。</li></ol></li><li><p>父子组件的生命周期</p></li></ul><p>执行顺序：</p><p>父组件开始执行到beforeMount 然后开始子组件执行，最后是父组件mounted。</p><p>如果有兄弟组件，父组件开始执行到beforeMount，然后兄弟组件依次执行到beforeMount，然后按照顺序执行mounted，最后执行父组件的mounted。</p><p>当子组件挂载完成后，父组件才会挂载。销毁父组件时，先将子组件销毁后才会销毁父组件。</p><hr><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h3 id="组件的定义与使用"><a href="#组件的定义与使用" class="headerlink" title="组件的定义与使用"></a>组件的定义与使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 新建src/components/Child.vue 文件</span><br><span class="line">// Home.vue 中使用</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &#x27;../components/Child&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // 必须要注册后才能使用</span><br><span class="line">  components: &#123;Child&#125;,</span><br><span class="line">  // 自定义要使用的子组件的名称</span><br><span class="line">  // components: &#123;&#x27;my-child&#x27;: Child&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">// 全局注册</span><br><span class="line">// main.js中</span><br><span class="line">import Child from &#x27;./components/Child&#x27;; // 引入Child</span><br><span class="line">Vue.component(&#x27;Child&#x27;, Child);</span><br></pre></td></tr></table></figure><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">// 父元素的组件上</span><br><span class="line">&lt;One&gt;</span><br><span class="line">  &lt;template v-slot:header&gt;</span><br><span class="line">    &lt;div&gt;222222&lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/One&gt;</span><br><span class="line">// 组件里面</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">   &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">   &lt;div&gt;下面的内容&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">//--------</span><br><span class="line"></span><br><span class="line">// 作用域插槽</span><br><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot v-bind:user=&quot;user&quot;&gt;</span><br><span class="line">      &#123;&#123;user&#125;&#125;</span><br><span class="line">    &lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      user: &#x27;moxie&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Child&gt;</span><br><span class="line">      &lt;template v-slot:default=&quot;slotProps&quot;&gt;</span><br><span class="line">        &#123;&#123; slotProps.user &#125;&#125;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/Child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &#x27;../components/Child&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;Child&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><p>通过 <code>Vue</code> 的 元素加一个特殊的<code>is</code>来实现，在不同组件之间进行动态切换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;component v-bind:is=&quot;Child1&quot;&gt;&lt;/component&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">//在动态组件上使用keep-alive</span><br><span class="line">// keep-alive是Vue一个内置的元素，组件缓存。如组件切换会缓存保留数据</span><br><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;component v-bind:is=&quot;Child1&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><h3 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h3><p>组件只在需要的时候才从服务器加载一个模块， 组件需要被渲染的时候才会触发该工厂函数，且会把结果缓存起来供未来重渲染。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    // 改为箭头函数引用</span><br><span class="line">    &#x27;Child&#x27;: () =&gt; import(&#x27;../components/Child&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      currentTab: Child1</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// yarn add moment</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; date | format &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import moment from &#x27;moment&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      date: new Date()</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  filters: &#123;</span><br><span class="line">    format(value) &#123;</span><br><span class="line">      moment.locale(&#x27;zh-cn&#x27;);</span><br><span class="line">      return moment(value).format(&#x27;LLL&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line">// 全局过滤器</span><br><span class="line">// src/filters/index.js文件</span><br><span class="line">import moment from &#x27;moment&#x27;;</span><br><span class="line">export function dateFormat(value) &#123;</span><br><span class="line">  moment.locale(&#x27;zh-cn&#x27;);</span><br><span class="line">  return moment(value).format(&#x27;LLL&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">// main.js中</span><br><span class="line">// 全局过滤器</span><br><span class="line">import &#123; dateFormat &#125; from &#x27;./filters&#x27;;</span><br><span class="line">// 注册全局过滤器，一定要放在new Vue之前</span><br><span class="line">Vue.filter(&#x27;dateFormat&#x27;, dateFormat);</span><br><span class="line">//使用循环批量注册</span><br><span class="line">import * as filters from &#x27;./filters&#x27;;</span><br><span class="line">Object.keys(filters).forEach(key =&gt; &#123;</span><br><span class="line">  Vue.filter(key, filters[key]);</span><br><span class="line">// Object.keys将对象中所有的属性名，以数组形式返回</span><br></pre></td></tr></table></figure><hr><h1 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin 混入"></a>mixin 混入</h1><p><code>mixin</code>可以将重复的 <code>js</code> 代码拆分出去，在需要使用的文件中引用即可。</p><ul><li><p>相同的生命周期，会先调用<code>mixin</code>中的，然后再调用组件中的；</p></li><li><p>data中的数据会互相合并，如果同名则保留组件中的；</p></li><li><p>同名的方法，保留组件中的；</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// myMixin.js文件</span><br><span class="line">const myMixin = &#123;</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.hello();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    hello() &#123;</span><br><span class="line">      console.log(&#x27;hello from mixin!&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default myMixin;</span><br><span class="line"></span><br><span class="line">// 使用方法</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import myMixin from &#x27;../mixins/myMixin&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  mixins: [myMixin]</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">---------</span><br><span class="line"></span><br><span class="line">// 应当避免使用,使用全局混入会影响每一个之后创建的Vue实例。</span><br><span class="line">// 全局混入，修改main.js</span><br><span class="line">import myMixin from &#x27;./mixins/myMixin&#x27;;</span><br><span class="line">Vue.mixin(myMixin);</span><br></pre></td></tr></table></figure><hr><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><p>钩子函数：</p><table><thead><tr><th align="left">钩子函数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">bind</td><td align="left">只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</td></tr><tr><td align="left">inserted</td><td align="left">被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)</td></tr><tr><td align="left">update</td><td align="left">所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新。</td></tr><tr><td align="left">componentUpdated</td><td align="left">指令所在组件的 VNode 及其子 VNode 全部更新后调用</td></tr><tr><td align="left">unbind</td><td align="left">只调用一次，指令与元素解绑时调用</td></tr></tbody></table><p>钩子函数参数：</p><table><thead><tr><th align="left">参数</th><th>解释</th></tr></thead><tbody><tr><td align="left">el</td><td>指令所绑定的元素，可以用来直接操作 DOM。</td></tr><tr><td align="left">binding</td><td>一个对象，包含以下 property：name、value等</td></tr><tr><td align="left">vnode</td><td>Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。</td></tr><tr><td align="left">oldVnode</td><td>上一个虚拟节点，仅在update和componentUpdated钩子中可用。</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 使用</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    Hello, 长乐未央</span><br><span class="line">    &lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;input v-focus&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  directives: &#123;</span><br><span class="line">    focus: &#123;</span><br><span class="line">      // 指令的定义</span><br><span class="line">      inserted(el) &#123;</span><br><span class="line">        el.focus();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="Vue-Router-路由"><a href="#Vue-Router-路由" class="headerlink" title="Vue Router 路由"></a>Vue Router 路由</h1><h3 id="路由的基本结构"><a href="#路由的基本结构" class="headerlink" title="路由的基本结构"></a>路由的基本结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">// 路由文件index.js</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import VueRouter from &#x27;vue-router&#x27;</span><br><span class="line">import Home from &#x27;../views/Home.vue&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line">const routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/&#x27;,</span><br><span class="line">    name: &#x27;Home&#x27;,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/about&#x27;,</span><br><span class="line">    name: &#x27;About&#x27;,</span><br><span class="line">    component: () =&gt; import(&#x27;../views/About.vue&#x27;)</span><br><span class="line">    </span><br><span class="line">    // 嵌套路由</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        // List 会被渲染在About的&lt;router-view&gt;中</span><br><span class="line">        path: &#x27;list&#x27;, // &#x27;&#x27;就是About页面，path不需要加/</span><br><span class="line">        name: &#x27;List&#x27;,</span><br><span class="line">        component: () =&gt; import(&#x27;../views/List.vue&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  mode: &#x27;history&#x27;,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router</span><br><span class="line">// 路由出口</span><br><span class="line">&lt;router-view/&gt;</span><br></pre></td></tr></table></figure><h3 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h3><table><thead><tr><th align="left">方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>&lt;router-link to=&quot;/about&quot;&gt;</code></td><td align="left">HTML 中，链接到<code>/about</code></td></tr><tr><td align="left"><code>&lt;router-link :to=&quot;&#123; path: &#39;/about&#39;&#125;&quot;&gt;</code></td><td align="left">HTML 中，链接到<code>/about</code></td></tr><tr><td align="left"><code>&lt;router-link :to=&quot;&#123; name: &#39;About&#39;&#125;&quot;&gt;</code></td><td align="left">HTML 中，链接到命名为<code>About</code>的路由组件</td></tr><tr><td align="left"><code>&lt;router-link :to=&quot;&#123; name: &#39;About&#39;, params: &#123; id: 999 &#125;&#125;&quot;&gt;</code></td><td align="left">HTML 中，链接到命名为<code>About</code>的路由组件，并传递<code>路由参数</code></td></tr><tr><td align="left"><code>&lt;router-link :to=&quot;&#123; name: &#39;About&#39;, query: &#123; keyword: &#39;长乐未央&#39; &#125;&#125;&quot;&gt;</code></td><td align="left">HTML 中，链接到命名为<code>About</code>的路由组件，并传递<code>查询参数</code></td></tr><tr><td align="left"><code>this.$router.push(&#123; path: &#39;/about&#39; &#125;)</code></td><td align="left">通过代码，跳转到<code>/about</code></td></tr><tr><td align="left"><code>this.$router.push(&#123; name: &#39;About&#39; &#125;)</code></td><td align="left">通过代码，跳转到命名为<code>About</code>的路由组件</td></tr><tr><td align="left"><code>this.$router.push(&#123; path: &#39;/about/999&#39; &#125;)</code></td><td align="left">通过代码，跳转到路径为<code>/about</code>的路由组件，并传递<code>路由参数</code></td></tr><tr><td align="left"><code>this.$router.push(&#123; name: &#39;About&#39;, params: &#123; id: &#39;999&#39; &#125; &#125;)</code></td><td align="left">通过代码，跳转到命名为<code>About</code>的路由组件，并传递<code>路由参数</code></td></tr><tr><td align="left"><code>this.$router.push(&#123; name: &#39;About&#39;, query: &#123; keyword: &#39;长乐未央&#39; &#125; &#125;)</code></td><td align="left">通过代码，跳转到命名为<code>About</code>的路由组件，并传递<code>查询参数</code></td></tr><tr><td align="left"><code>this.$route.params.id</code></td><td align="left">获取传递过来的<code>路由参数</code>值</td></tr><tr><td align="left"><code>this.$route.query.keyword</code></td><td align="left">获取传递过来的<code>查询参数</code>值</td></tr></tbody></table><h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: &quot;/users&quot;,</span><br><span class="line">  name: &quot;UsersHome&quot;,</span><br><span class="line">  component: () =&gt; import(&quot;../views/users/Home.vue&quot;),</span><br><span class="line">  meta: &#123; requiresAuth: true &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// 路由守卫</span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  if (to.matched.some(record =&gt; record.meta.requiresAuth)) &#123;</span><br><span class="line">    const token = localStorage.token;</span><br><span class="line"></span><br><span class="line">    if (token) &#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      next(&#123;</span><br><span class="line">        path: &quot;/sign_in&quot;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    next(); // 确保一定要调用 next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h1 id="vue动态路由和权限控制"><a href="#vue动态路由和权限控制" class="headerlink" title="vue动态路由和权限控制"></a>vue动态路由和权限控制</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 添加路由</span><br><span class="line">xxx.forEach(item =&gt; &#123;</span><br><span class="line">    this.$router.addRoute(item)</span><br><span class="line">&#125;)</span><br><span class="line">this.$router.addRoutes(xxx) // xxx为数组，该方法可能被废弃。</span><br></pre></td></tr></table></figure><h3 id="权限动态路由使用"><a href="#权限动态路由使用" class="headerlink" title="权限动态路由使用"></a>权限动态路由使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line">// router/index.js中</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import Router from &#x27;vue-router&#x27;</span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">import &#123; staticRouter, &#125; from &#x27;../utils/data&#x27; //引入静态路由</span><br><span class="line">const routes = staticRouter  //静态路由保存</span><br><span class="line">const router = new Router(&#123;  //创建路由 </span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line">export default router</span><br><span class="line"></span><br><span class="line">// ---------</span><br><span class="line"></span><br><span class="line">// utils/data.js文件</span><br><span class="line">//静态路由</span><br><span class="line">export const staticRouter = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: &quot;/&quot;,</span><br><span class="line">        component: () =&gt; import(&quot;../views/dr/1.vue&quot;),</span><br><span class="line">        meta: &#123; title: &#x27;1&#x27;, isTitle: true &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;*&#x27;, redirect: &#x27;/&#x27;, meta: &#123; title: &#x27;错误&#x27;, hidden: true &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">//动态路由</span><br><span class="line">export const dynamicRouter = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: &quot;/2&quot;,</span><br><span class="line">        meta: &#123; title: &#x27;4&#x27; &#125;,</span><br><span class="line">        component: &#x27;dr/4.vue&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">// ---------</span><br><span class="line"></span><br><span class="line">// vuex的index.js中</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">const state = &#123;</span><br><span class="line">    is: false,//判断时候登录  登录true  没有false</span><br><span class="line">    routerArr: [] //静态路由+动态路由</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const mutations = &#123;</span><br><span class="line">    //点击了登录退出</span><br><span class="line">    CHANGESTORE(state, bool) &#123;</span><br><span class="line">        state.is = bool</span><br><span class="line">    &#125;,</span><br><span class="line">    //存放路由</span><br><span class="line">    HEARDER(state, data) &#123;</span><br><span class="line">        state.routerArr = data</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">const actions = &#123;</span><br><span class="line">    updateStoreChange(context, state) &#123;</span><br><span class="line">        context.commit(&#x27;CHANGESTORE&#x27;, state)</span><br><span class="line">    &#125;,</span><br><span class="line">    Nav(context, state) &#123;</span><br><span class="line">        context.commit(&#x27;HEARDER&#x27;, state)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">const getters = &#123;</span><br><span class="line">    updateStore() &#123;</span><br><span class="line">        return state.is</span><br><span class="line">    &#125;,</span><br><span class="line">    updateNav() &#123;</span><br><span class="line">        return state.routerArr</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">    state, mutations, actions, getters</span><br><span class="line">&#125;)</span><br><span class="line">export default store</span><br><span class="line"></span><br><span class="line">// ---------</span><br><span class="line"></span><br><span class="line">// utils/loadingRouter.js文件中</span><br><span class="line">import &#123; staticRouter, dynamicRouter &#125; from &#x27;./data.js&#x27; //引入静态路由</span><br><span class="line">import router from &#x27;../router/index&#x27;</span><br><span class="line">import store from &#x27;../store/index&#x27;</span><br><span class="line">const routes = staticRouter  //静态路由保存</span><br><span class="line">export default function useaddRoute() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        // 满足store 有数据   已登录   没有缓存</span><br><span class="line">        if (store.state.is &amp;&amp; store.state.routerArr.length === 4) &#123;</span><br><span class="line">            store.dispatch(&#x27;Nav&#x27;, staticRouter)</span><br><span class="line">            //模拟数据请求</span><br><span class="line">            setTimeout(() =&gt; &#123;</span><br><span class="line">                let data = routesData(dynamicRouter)</span><br><span class="line">                //将动态路由放放入总路由中</span><br><span class="line">                store.dispatch(&#x27;Nav&#x27;, data)</span><br><span class="line">                // 将路由放置缓存中</span><br><span class="line">                // router.addRoutes(data) //废弃 只是会警告但是还可以使用 数组形式</span><br><span class="line">                data.forEach(item =&gt; &#123;</span><br><span class="line">                    router.addRoute(item) </span><br><span class="line">                    // 也可自定义路由路径、子路由等</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;, 2000)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            store.dispatch(&#x27;Nav&#x27;, staticRouter)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        console.log(error)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">function routesData(result) &#123;</span><br><span class="line">    result.forEach(item =&gt; &#123;</span><br><span class="line">        routes.push(&#123;</span><br><span class="line">            path: item.path,</span><br><span class="line">            name: item.name,</span><br><span class="line">            meta: item.meta,</span><br><span class="line">            component: () =&gt; import(`../views/$&#123;item.component&#125;`),</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    return routes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ---------</span><br><span class="line"></span><br><span class="line">// APP.vue中使用</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;template v-for=&quot;(item, index) in arr&quot;&gt;</span><br><span class="line">      &lt;div :key=&quot;index&quot; v-if=&quot;!item.meta.hidden&quot;&gt;</span><br><span class="line">        &lt;router-link :to=&quot;item.path&quot;&gt; &#123;&#123; item.meta.title &#125;&#125;&lt;/router-link&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;button @click=&quot;login&quot;&gt;登录&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;esc&quot;&gt;退出&lt;/button&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import useaddRoute from &quot;./utils/loadingRouter&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      arr: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    useaddRoute();</span><br><span class="line">    this.arr = this.$store.getters.updateNav;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    async login() &#123;</span><br><span class="line">      await this.$store.dispatch(&quot;updateStoreChange&quot;, true);</span><br><span class="line">      let isLogin = await this.$store.getters.updateStore;</span><br><span class="line">      isLogin ? useaddRoute() : &quot;&quot;;</span><br><span class="line">    &#125;,</span><br><span class="line">    async esc() &#123;</span><br><span class="line">      await this.$store.dispatch(&quot;updateStoreChange&quot;, false);</span><br><span class="line">      let isLogin = await this.$store.getters.updateStore;</span><br><span class="line">      isLogin ? &quot;&quot; : location.reload();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React基础</title>
      <link href="/2021/12/05/React%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/12/05/React%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>React的基本部分，包括Class与Hook的语法。</p><hr><h1 id="class类与对象"><a href="#class类与对象" class="headerlink" title="class类与对象"></a>class类与对象</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">class Animal &#123;</span><br><span class="line">    //构造</span><br><span class="line">    constructor(name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    run() &#123;</span><br><span class="line">        return console.log(this.name + &#x27;跑&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //静态方法</span><br><span class="line">    static eat(name) &#123;</span><br><span class="line">        return console.log(name + &#x27;吃&#x27;) // 注意这里this.name是没有值，下面调用没有给</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 类(Animal)通过实例化(new)变为对象(pig)</span><br><span class="line">const pig = new Animal(&#x27;小猪&#x27;);</span><br><span class="line">pig.run()</span><br><span class="line"></span><br><span class="line">// 静态方法直接通过类方法名来调用</span><br><span class="line">Animal.eat(&#x27;猫&#x27;);</span><br><span class="line"></span><br><span class="line">class Bird extends Animal &#123;</span><br><span class="line">    constructor(name, color = &#x27;黄色&#x27;) &#123;</span><br><span class="line">        //super调用父类的代码</span><br><span class="line">        super(name);</span><br><span class="line">        this.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    run() &#123;</span><br><span class="line">        super.run() // 可以不覆盖原函数的方法 // 输出鹦鹉跑</span><br><span class="line">        return console.log(this.name + this.color) // 输出鹦鹉黄色</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const polly = new Bird(&#x27;鹦鹉&#x27;);</span><br><span class="line">polly.run();</span><br></pre></td></tr></table></figure><hr><h1 id="项目命令"><a href="#项目命令" class="headerlink" title="项目命令"></a>项目命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 安装项目</span><br><span class="line">npx create-react-app demo</span><br><span class="line">// 或者</span><br><span class="line">yarn create react-app demo</span><br><span class="line">// Ant Design安装</span><br><span class="line">yarn add antd</span><br><span class="line">// 启动命令</span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure><hr><h1 id="Class组件介绍"><a href="#Class组件介绍" class="headerlink" title="Class组件介绍"></a>Class组件介绍</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// class组件，先引用Component</span><br><span class="line">import React, &#123;Component&#125; from &#x27;react&#x27;</span><br><span class="line">class App extends Component &#123;</span><br><span class="line">  // 构造器</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props)</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // </span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">        // Fragments概念（或者&lt;React.Fragment&gt;&lt;/React.Fragment&gt;）</span><br><span class="line">      &lt;&gt;</span><br><span class="line">      &#123;/* 设置和读取state里面的值 */&#125;</span><br><span class="line">        &lt;p&gt;你点击了 &#123;this.state.count&#125; 次&lt;/p&gt;</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; this.setState(&#123; count: this.state.count + 1 &#125;)&#125;&gt;</span><br><span class="line">          点我</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 导出App</span><br><span class="line">export default App</span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="https://pic.imgdb.cn/item/61dc72d62ab3f51d910e682d.jpg"></p><hr><h2 id="Class的this指向"><a href="#Class的this指向" class="headerlink" title="Class的this指向"></a>Class的this指向</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class App extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    // 第一种：为了在回调中使用this，这个绑定是必不可少的</span><br><span class="line">    this.handleClick = this.handleClick.bind(this)</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick() &#123;alert(this)&#125;</span><br><span class="line">  // class fields写法</span><br><span class="line">  // handleClick=()=&gt; &#123;alert(this)&#125;</span><br><span class="line">  render() &#123;            </span><br><span class="line">    return (</span><br><span class="line">&#123;/*这里可以直接找到handleClick*/&#125;</span><br><span class="line">&#123;/*第二种：直接onClick=&#123;()=&gt;&#123;this.handleClick&#125;&#125;；上面不做变化，相当于事件放在这里*/&#125;</span><br><span class="line">      &lt;button onClick=&#123;this.handleClick&#125;&gt;点这里&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="父子传值props"><a href="#父子传值props" class="headerlink" title="父子传值props"></a>父子传值props</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">class Welcome extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;h1 onClick=&#123;() =&gt; this.props.handleClick(&#x27;参数&#x27;)&#125;&gt;&#123;this.props.name&#125;&lt;/h1&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 父组件</span><br><span class="line">class App extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;Welcome name=&quot;Aaron&quot;</span><br><span class="line">         handleClick=&#123;(value) =&gt; &#123;console.log(value,&#x27;Aaron&#x27;)&#125;&#125;/&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="条件渲染、列表循环、表单"><a href="#条件渲染、列表循环、表单" class="headerlink" title="条件渲染、列表循环、表单"></a>条件渲染、列表循环、表单</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;Component&#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props)</span><br><span class="line">    this.state = &#123;show: true,data: [],name:&#x27;&#x27;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    this.setState(state =&gt; &#123;return &#123;show: !state.show&#125;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">   handleChange(value) &#123;</span><br><span class="line">    this.setState(&#123;name: value.target.value&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  handleSubmit(value) &#123;</span><br><span class="line">    alert(&#x27;提交的名字: &#x27; + this.state.name)</span><br><span class="line">    value.preventDefault() // 防止刷新（原生方法）</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123;data, show, name&#125; = this.state // 取值</span><br><span class="line">      return (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">          &#123;/*条件渲染或者使用三目运算符*/&#125; &#123;/*&#123;show ? &lt;p&gt;显示出来了&lt;/p&gt; : &#x27;&#x27;&#125;*/&#125;</span><br><span class="line">          &#123;show &amp;&amp; &lt;p&gt;显示出来了&lt;/p&gt;&#125;</span><br><span class="line">          &lt;button onClick=&#123;() =&gt; this.handleClick()&#125;&gt;点这里&lt;/button&gt;</span><br><span class="line">          &#123;/*列表循环*/&#125;</span><br><span class="line">          data.map((item) =&gt;&lt;li key=&#123;item.id.toString()&#125;&gt;&#123;item.name&#125;&lt;/li&gt;)</span><br><span class="line">          &#123;/*表单，双向绑定*/&#125;</span><br><span class="line">          &lt;form onSubmit=&#123;(value) =&gt; this.handleSubmit(value)&#125;&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; </span><br><span class="line">            value=&#123;name&#125; </span><br><span class="line">            onChange=&#123;(value) =&gt; this.handleChange(value)&#125;/&gt;</span><br><span class="line">            &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">      &lt;/&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default App</span><br></pre></td></tr></table></figure><hr><h1 id="Hook组件介绍"><a href="#Hook组件介绍" class="headerlink" title="Hook组件介绍"></a>Hook组件介绍</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState, useEffect &#125; from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  // 声明一个叫 &quot;count&quot; 的 state 变量，并定义了设置count值的方法 &quot;setCount&quot;</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line">  </span><br><span class="line">  // 生命周期的作用</span><br><span class="line">  // 读取数据函数</span><br><span class="line">  const fetchData = ()=&gt;&#123;&#125;</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    // 里面调用</span><br><span class="line">    fetchData();</span><br><span class="line">    // 下面写上[]表示执行一次，写上具体的值就表示监听</span><br><span class="line">  &#125;,[]);</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;你点击了 &#123;count&#125; 次&lt;/p&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;点我&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">export default App</span><br></pre></td></tr></table></figure><hr><h2 id="Hook实现搜索、加载、错误处理"><a href="#Hook实现搜索、加载、错误处理" class="headerlink" title="Hook实现搜索、加载、错误处理"></a>Hook实现搜索、加载、错误处理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 双向绑定</span><br><span class="line">const [keyword, setKeyword] = useState(&#x27;&#x27;);</span><br><span class="line">// 请求的地址后接上keyword</span><br><span class="line">&lt;input</span><br><span class="line">    type=&quot;text&quot;</span><br><span class="line">    value=&#123;keyword&#125;</span><br><span class="line">    // 用户输入的内容，设置给state中的keyword</span><br><span class="line">    onChange=&#123;(value) =&gt; &#123;</span><br><span class="line">        setKeyword(value.target.value)</span><br><span class="line">        console.log(value.target.value)</span><br><span class="line">    &#125;&#125;/&gt;</span><br><span class="line">// 加载</span><br><span class="line">const [loading, setLoading] = useState(false);</span><br><span class="line">// 请求开始前，loading=true</span><br><span class="line">setLoading(true);</span><br><span class="line">// 请求完成后，loading=false</span><br><span class="line">setLoading(false);</span><br><span class="line">// return里面写上</span><br><span class="line">&#123;/*根据loading的值，判断是显示加载中，或是课程列表？*/&#125;</span><br><span class="line">&#123;loading ? (&lt;div&gt;加载中...&lt;/div&gt;) : (&lt;div&gt;加载成功&lt;/div&gt;)&#125;</span><br><span class="line">// 错误处理</span><br><span class="line">const [error, setError] = useState(false);</span><br><span class="line">// 请求开始前，error=false</span><br><span class="line">setError(false);</span><br><span class="line">axios(`xxx`).then(res =&gt; &#123;&#125;).catch(error =&gt; &#123;</span><br><span class="line">  //发生了错误，设置error=true</span><br><span class="line">  setError(true);</span><br><span class="line">&#125;).finally(() =&gt; &#123;setLoading(false)&#125;)&#125;</span><br><span class="line">// 判断接口读取错误</span><br><span class="line">if (error) &#123; return (&lt;button onClick=&#123;fetchData&#125;&gt;立即重试&lt;/button&gt;)&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Hook扩展"><a href="#Hook扩展" class="headerlink" title="Hook扩展"></a>Hook扩展</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// 使用useContext，组件之间直接传值</span><br><span class="line">import &#123;React,useContext&#125; from &#x27;react&#x27;;</span><br><span class="line">// 创建一个context对象，默认值为themes</span><br><span class="line">const ThemeContext = React.createContext(themes);</span><br><span class="line">function A() &#123;</span><br><span class="line">  return (</span><br><span class="line">    // 使用ThemeContext包裹子组件</span><br><span class="line">    &lt;ThemeContext.Provider value=&#123;themes.dark&#125;&gt;</span><br><span class="line">      &lt;B/&gt;</span><br><span class="line">    &lt;/ThemeContext.Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">function B() &#123;return (&lt;div&gt;&lt;C/&gt;&lt;/div&gt;)&#125;</span><br><span class="line">function C() &#123;</span><br><span class="line">  // 使用useContext，就能直接读取到A组件中传递过来的value了</span><br><span class="line">  const theme = useContext(ThemeContext);</span><br><span class="line">  return (</span><br><span class="line">    &lt;button style=&#123;&#123;background: theme.background&#125;&#125;&gt;A直接传C&lt;/button&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 重复渲染子组件的情况</span><br><span class="line">// memo-当组件的props或者state变化时，会重新渲染页面，触发页面重新渲染。防止子组件重新渲染</span><br><span class="line">// 使用 React.memo()</span><br><span class="line">import &#123;memo&#125; from &#x27;react&#x27;;</span><br><span class="line">const Child = memo(() =&gt; &#123;return (&lt;div&gt;子组件&lt;/div&gt;)&#125;)</span><br><span class="line">// 或者</span><br><span class="line">let Child = function () &#123;return (&lt;div&gt;子组件&lt;/div&gt;)&#125;</span><br><span class="line">Child = memo(Child)</span><br><span class="line"></span><br><span class="line">// useCallback-当子组件有父组件中的方法（props），也会重新渲染</span><br><span class="line">import &#123;useCallback&#125; from &#x27;react&#x27;;</span><br><span class="line">// 子组件中的方法写上useCallback（后页可以监听）</span><br><span class="line">const handleClick = useCallback(() =&gt; &#123;</span><br><span class="line">    console.log(&quot;子组件的按钮被点击了...&quot;)</span><br><span class="line">  &#125;, [])</span><br><span class="line">  </span><br><span class="line">// useMemo-当传递值为对象时，再次重复渲染</span><br><span class="line">// useMemo 包裹一下值</span><br><span class="line">const data = useMemo(() =&gt; (&#123;</span><br><span class="line">  title: &#x27;这里是子组件&#x27;</span><br><span class="line">&#125;), [])</span><br><span class="line">// 第二个参数作为依赖项可以当做成计算属性使用</span><br><span class="line">const fullName = useMemo(</span><br><span class="line">  () =&gt; lastName + firstName,</span><br><span class="line">  [firstName, lastName],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">// 安装</span><br><span class="line">yarn add history@5 react-router-dom@6</span><br><span class="line">// 使用路由src/index.js文件中</span><br><span class="line">import &#123;BrowserRouter&#125; from &quot;react-router-dom&quot;;</span><br><span class="line">// 删除严格模式（防止antdesign有报错）</span><br><span class="line">   &lt;React.StrictMode&gt;&lt;/React.StrictMode&gt; // 删除掉</span><br><span class="line">// 使用路由</span><br><span class="line">&lt;BrowserRouter&gt;&lt;App/&gt;&lt;/BrowserRouter&gt;</span><br><span class="line"></span><br><span class="line">// src/App.js中修改</span><br><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line">import &#123; Routes, Route, Link &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">// 注意引用的组件取名首字母大写</span><br><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Routes&gt;</span><br><span class="line">      &lt;Route path=&quot;/&quot; element=&#123;&lt;Home/&gt;&#125;&gt;</span><br><span class="line">        &lt;Route path=&quot;about/:id&quot; element=&#123;&lt;About/&gt;&#125;/&gt;</span><br><span class="line">        &#123;/* 使用 path=&quot;*&quot;，所有未匹配的路由，都会到这里来这里*/&#125;</span><br><span class="line">        &lt;Route path=&quot;*&quot; element=&#123;&lt;NoMatch/&gt;&#125;/&gt;</span><br><span class="line">        &#123;/* 使用index，index路由和他的父路由路径是一样*/&#125;</span><br><span class="line">        &lt;Route index element=&#123;&lt;Home/&gt;&#125;/&gt;</span><br><span class="line">      &lt;/Route&gt;</span><br><span class="line">    &lt;/Routes&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 路由出口</span><br><span class="line">import &#123; Link, Outlet &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">&lt;Outlet /&gt; // 首页组件中写上</span><br><span class="line">&lt;Link to=&#123;`/about/$&#123;id&#125;`&#125;&lt;/Link&gt;</span><br><span class="line"></span><br><span class="line">// 获取 URL 参数</span><br><span class="line">import &#123; useParams &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">let params = useParams();</span><br><span class="line">let id = params.id</span><br><span class="line"></span><br><span class="line">// 链接激活高亮显示</span><br><span class="line">import &#123; NavLink &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">// Link修改为NavLink，使用isActive判断当前链接是否被激活</span><br><span class="line">&lt;NavLink</span><br><span class="line">  style=&#123;(&#123; isActive &#125;) =&gt; &#123;</span><br><span class="line">      return &#123; color: isActive ? &quot;red&quot; : &quot;&quot;,display: &quot;block&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   to=&#123;`/about/$&#123;id&#125;`&#125;&gt;</span><br><span class="line">&lt;/NavLink&gt;</span><br><span class="line"></span><br><span class="line">// 使用代码跳转</span><br><span class="line">import &#123;useNavigate&#125; from &quot;react-router-dom&quot;;</span><br><span class="line">let navigate = useNavigate();</span><br><span class="line">// 使用跳转</span><br><span class="line">navigate(&quot;/&quot;)</span><br><span class="line"></span><br><span class="line">// 其他属性</span><br><span class="line">// useSearchParams搜索参数</span><br><span class="line">import &#123;useSearchParams&#125; from &quot;react-router-dom&quot;;</span><br><span class="line">let [searchParams, setSearchParams] = useSearchParams();</span><br><span class="line">// useLocation，可以返回path等信息，解决</span><br><span class="line">import &#123;useLocation&#125; from &quot;react-router-dom&quot;;</span><br><span class="line">let location = useLocation();</span><br><span class="line"></span><br><span class="line">// 懒加载（按需加载）</span><br><span class="line">const About = React.lazy(() =&gt; import(&quot;xxx&quot;));</span><br><span class="line">&lt;Route path=&quot;/about&quot; element=&#123;</span><br><span class="line">// 使用React.Suspense因为组件是懒加载，在渲染时被暂停了, </span><br><span class="line">// react无法得知渲染内容,为了避免报错使用Suspense来进行空档期的显示</span><br><span class="line">  &lt;React.Suspense fallback=&#123;&lt;&gt;空档期显示的组件&lt;/&gt;&#125;&gt;</span><br><span class="line">    &lt;About/&gt;</span><br><span class="line">  &lt;/React.Suspense&gt;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="useReducer-统一管理状态"><a href="#useReducer-统一管理状态" class="headerlink" title="useReducer 统一管理状态"></a>useReducer 统一管理状态</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">// 引用 useReducer</span><br><span class="line">import &#123;useEffect, useReducer&#125; from &#x27;react&#x27;;</span><br><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line"></span><br><span class="line">// 初始状态</span><br><span class="line">// Data是初始值，如果用户不传，默认就是 []</span><br><span class="line">let initialState = &#123;</span><br><span class="line">    loading: false,</span><br><span class="line">    error: false,</span><br><span class="line">    data: [],</span><br><span class="line">&#125;</span><br><span class="line">// 定义reducer，统一管理状态</span><br><span class="line">const reducer = (state, action) =&gt; &#123;</span><br><span class="line">    switch (action.type) &#123;</span><br><span class="line">        case &#x27;init&#x27;:</span><br><span class="line">            return &#123;</span><br><span class="line">                ...state,</span><br><span class="line">                loading: true,</span><br><span class="line">                error: false</span><br><span class="line">            &#125;;</span><br><span class="line">        case &#x27;success&#x27;:</span><br><span class="line">            return &#123;</span><br><span class="line">                ...state,</span><br><span class="line">                loading: false,</span><br><span class="line">                error: false,</span><br><span class="line">                data: action.payload</span><br><span class="line">            &#125;;</span><br><span class="line">        case &#x27;failure&#x27;:</span><br><span class="line">            return &#123;</span><br><span class="line">                ...state,</span><br><span class="line">                loading: false,</span><br><span class="line">                error: true</span><br><span class="line">            &#125;;</span><br><span class="line">        default:</span><br><span class="line">            throw new Error();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 自定义hook</span><br><span class="line">const useFetchData = (url, initData) =&gt; &#123;</span><br><span class="line">    // 如果有传过来的initData，设置到initialState里</span><br><span class="line">    initialState = &#123;</span><br><span class="line">        ...initialState,</span><br><span class="line">        data: initData || [],</span><br><span class="line">    &#125;</span><br><span class="line">    // 使用useReducer初始化数据</span><br><span class="line">    const [state, dispatch] = useReducer(reducer, initialState);</span><br><span class="line">    // 接口请求</span><br><span class="line">    const fetchData = url =&gt; &#123;</span><br><span class="line">        dispatch(&#123;type: &#x27;init&#x27;&#125;);</span><br><span class="line"></span><br><span class="line">        axios(url).then(res =&gt; &#123;</span><br><span class="line">            // 成功的状态</span><br><span class="line">            // 注意封装出去有四次请求，刷新开始为空；</span><br><span class="line">            // 在页面上有data.data出现undefined；后还需data.data.xxx时会报错；</span><br><span class="line">            // 解决：在这里写上res.data.data，或者在那边将initData设置为&#123;data:&#123;&#125;,xxx:[]&#125;等；</span><br><span class="line">            dispatch(&#123;type: &#x27;success&#x27;, payload: res.data.data&#125;);</span><br><span class="line">        &#125;).catch(error =&gt; &#123;</span><br><span class="line">            // 失败的状态</span><br><span class="line">            dispatch(&#123;type: &#x27;failure&#x27;&#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    // 监听 url 参数，也就说当接口地址变化后，会重新请求接口</span><br><span class="line">    useEffect(() =&gt; &#123;</span><br><span class="line">        fetchData(url);</span><br><span class="line">    &#125;, [url]);</span><br><span class="line"></span><br><span class="line">    // ...state解出来，就是loading、error和data</span><br><span class="line">    // 返回这些内容，在调用的页面中可以读取、调用，或再次进行设置</span><br><span class="line">    return &#123;...state, fetchData&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default useFetchData;</span><br></pre></td></tr></table></figure><hr><h1 id="项目中的一些问题"><a href="#项目中的一些问题" class="headerlink" title="项目中的一些问题"></a>项目中的一些问题</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// antd安装</span><br><span class="line">yarn create react-app antd-demo</span><br><span class="line"></span><br><span class="line">// class的生命周期不用解决this，其他需要</span><br><span class="line">componentDidMount() &#123; this.handleClick() &#125;</span><br><span class="line">handleClick() &#123;</span><br><span class="line">  console.log(this) // 可以打印</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// onClick事件调用方法是否跟()</span><br><span class="line">handleClick() &#123;console.log(1)&#125;</span><br><span class="line">// 进来就调用</span><br><span class="line">// 声明时就直接执行了（因而加载页面自动执行）</span><br><span class="line">// 执行后的返回值赋给了onClick属性（返回值必然不会是个函数，因而再点击没有作用）</span><br><span class="line">&lt;button onClick=&#123;this.handleClick()&#125;&gt;点这里&lt;/button&gt;</span><br><span class="line">// 点击后调用</span><br><span class="line">&lt;button onClick=&#123;() =&gt; this.handleClick()&#125;&gt;点这里&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">// 注意setState是异步操作的</span><br><span class="line"></span><br><span class="line">// 刷新页面</span><br><span class="line">window.location.reload()</span><br><span class="line"></span><br><span class="line">// 视频标签</span><br><span class="line">&lt;video src=11111 controls /&gt;video.js</span><br><span class="line"></span><br><span class="line">// 注意key（循环和表格）</span><br><span class="line">&lt;Table rowKey=&quot;id&quot;&gt;&lt;/Table&gt;</span><br><span class="line">// 样式要写成&#123;&#123;&#125;&#125;, 里面对象形式，或者取名id，在APP.css里面写</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的Webapi</title>
      <link href="/2021/12/05/JavaScript%E7%9A%84Webapi/"/>
      <url>/2021/12/05/JavaScript%E7%9A%84Webapi/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Api：应用程序接口，开发的工具；</p><p>本文介绍JavaScript在浏览器的Webapi，记录了自己的学习过程。</p><h1 id="DOM文档对象模型"><a href="#DOM文档对象模型" class="headerlink" title="DOM文档对象模型"></a>DOM文档对象模型</h1><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;id&#x27;</span>) <span class="comment">// id获取，返回的是元素对象，没有为null</span></span><br><span class="line"><span class="comment">// 可以返回的元素对象，更好的查看里面的属性和方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;id&#x27;</span>))</span><br><span class="line"><span class="comment">// 返回的是数组，一个为伪数组，空为空的数组</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;标签名&#x27;</span>)</span><br><span class="line"><span class="comment">// 获取某个父元素里面的标签元素</span></span><br><span class="line"><span class="keyword">var</span> ol = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;ol&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">var</span> lis = ol.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>)<span class="comment">// 不包含父元素</span></span><br><span class="line"><span class="comment">// HTML新增</span></span><br><span class="line"><span class="comment">// 返回结果和Tag一样</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br><span class="line"><span class="comment">// 根据指定选择器返回第一个元素对象（参数是css选择器），返回和id一样</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;选择器&#x27;</span>); </span><br><span class="line"><span class="comment">// 返回所有的，返回值和Tag一样</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;选择器&#x27;</span>);</span><br><span class="line"><span class="comment">// 获取body元素</span></span><br><span class="line"><span class="keyword">var</span> body = <span class="variable language_">document</span>.<span class="property">body</span></span><br><span class="line"><span class="comment">// 获取html元素</span></span><br><span class="line"><span class="keyword">var</span> html = <span class="variable language_">document</span>.<span class="property">documentElement</span></span><br></pre></td></tr></table></figure><h3 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h3><ul><li>一些常见的鼠标事件</li></ul><p><img src="https://pic.imgdb.cn/item/61dc67802ab3f51d91083045.png"></p><ul><li>其他事件</li></ul><table><thead><tr><th>ondblclick</th><th>鼠标双击</th></tr></thead><tbody><tr><td>onchange</td><td>文本内容或下拉菜单中的选项发生改变</td></tr><tr><td>onload</td><td>网页文档加载事件</td></tr><tr><td>onunload</td><td>关闭网页时</td></tr><tr><td>onsubmit</td><td>表单提交事件</td></tr><tr><td>onreset</td><td>重置表单时</td></tr></tbody></table><ul><li>属性操作</li></ul><p>可以不用事件直接更改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从起始位置到终止位置的内容, 但它去除 html 标签， 同时空格和换行也会去掉</span></span><br><span class="line">element.<span class="property">innerText</span></span><br><span class="line"><span class="comment">// 起始位置到终止位置的全部内容，包括 html 标签，同时保留空格和换行</span></span><br><span class="line"><span class="comment">// 注意HTML都是大写</span></span><br><span class="line">element.<span class="property">innerHTML</span></span><br><span class="line"><span class="comment">// 可以获取元素的这两个属性</span></span><br></pre></td></tr></table></figure><p>其他的标签属性：src、href 、id、alt、title</p><h3 id="表单元素的属性操作"><a href="#表单元素的属性操作" class="headerlink" title="表单元素的属性操作"></a>表单元素的属性操作</h3><p>type、value、checked、selected、disabled</p><h3 id="样式属性操作"><a href="#样式属性操作" class="headerlink" title="样式属性操作"></a>样式属性操作</h3><p>element.style 行内样式操作 、element.className 类名样式操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义属性</span></span><br><span class="line"><span class="comment">// 主要获得自定义的属性 （标准） 我们程序员自定义的属性</span></span><br><span class="line">element.<span class="title function_">getAttribute</span>(<span class="string">&#x27;属性名&#x27;</span>)</span><br><span class="line"><span class="comment">//  主要设置自定义的属性 （标准）</span></span><br><span class="line"><span class="comment">// 注意className直接是class</span></span><br><span class="line">element.<span class="title function_">setAttribute</span>(<span class="string">&#x27;属性名&#x27;</span>,<span class="string">&#x27;属性值&#x27;</span>)</span><br><span class="line"><span class="comment">// 移除属性</span></span><br><span class="line"> element.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;属性&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// H5规定自定义属性data-开头做为属性名并且赋值。</span></span><br><span class="line">比如 &lt;div data-index=<span class="string">&quot;1&quot;</span> data-list-name=<span class="string">&quot;div&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">element.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-index&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">element.<span class="property">dataset</span>.<span class="property">listName</span> <span class="comment">// 驼峰命名</span></span><br><span class="line">element.<span class="property">dataset</span>.<span class="property">index</span></span><br></pre></td></tr></table></figure><h3 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h3><table><thead><tr><th>方法</th><th>意义</th></tr></thead><tbody><tr><td>children</td><td>子元素节点，不包含换行等</td></tr><tr><td>childNodes</td><td>子节点，包含文本、换行等</td></tr><tr><td>parentNode</td><td>父节点，注意是单数</td></tr><tr><td>previousSibling</td><td>前一个同辈节点，包括文本节点、注释节点即回车、换行、空格、文本等</td></tr><tr><td>previousElementSibling</td><td>前一个同辈节点，不包括文本节点、注释节点</td></tr><tr><td>nextSibling</td><td>后一个同辈节点，包括文本节点、注释节点即回车、换行、空格、文本等</td></tr><tr><td>nextElementSibling</td><td>后一个同辈节点，不包括文本节点、注释节点等</td></tr><tr><td>firstChild</td><td>第一个子节点，包含文本</td></tr><tr><td>firstElementChild</td><td>第一个子节点，不包含文本</td></tr><tr><td>lastChild</td><td>最后一个子节点，包含文本</td></tr><tr><td>lastElementChild</td><td>最后一个子节点，不包含文本</td></tr></tbody></table><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><table><thead><tr><th>方法</th><th>意义</th></tr></thead><tbody><tr><td>appendChild()</td><td>在最后面追加</td></tr><tr><td>insertBefore()</td><td>参数 1: 要插入的节点 参数 2: 作为参照的节点，如果为 null，与 appendChild 效果相同</td></tr><tr><td>replaceChild()</td><td>替换节点 参数 1: 要插入的节点 参数 2: 要替换的节点</td></tr><tr><td>removeChild()</td><td>移除节点 参数: 要移除的节点</td></tr><tr><td>cloneNode()</td><td>复制节点 参数（可选）：true，克隆时包含子元素</td></tr></tbody></table><table><thead><tr><th>createElement</th><th>创建元素节点</th></tr></thead><tbody><tr><td>createTextNode</td><td>创建文本节点</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是直接将内容写入页面的内容流，但是文档流执行完毕，则它会导致页面全部重绘</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>()</span><br><span class="line"><span class="comment">// 创建多个元素效率更高（不要拼接字符串，采取数组形式拼接），结构稍微复杂</span></span><br><span class="line">element.<span class="property">innerHTML</span></span><br><span class="line"><span class="comment">// 创建多个元素效率稍低一点点，但是结构更清晰</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">createElement</span>()</span><br></pre></td></tr></table></figure><h3 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h3><p>注册事件有两种方式：传统方式和方法监听注册方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统方式，利用 on 开头的事件onclick</span></span><br><span class="line"><span class="comment">// 同一个元素同一个事件只能设置一个处理函数，最</span></span><br><span class="line">后注册的处理函数将会覆盖前面注册的处理函数</span><br><span class="line"><span class="comment">// 特点： 注册事件的唯一性</span></span><br><span class="line"></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法监听注册方式 （ie9以上支持）w3c标准</span></span><br><span class="line"><span class="comment">// 同一个元素同一个事件可以注册多个监听器</span></span><br><span class="line">（函数，事件处理程序）按注册顺序依次执行；</span><br><span class="line"><span class="comment">// 注意：事件类型需要加引号，且不能带on</span></span><br><span class="line">eventTarget.<span class="title function_">addEventListener</span>(type, listener[, useCapture])</span><br><span class="line"><span class="comment">// useCapture：可选参数，是一个布尔值，默认是 false。</span></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 了解attachEvent（ie9以下支持）</span></span><br><span class="line"><span class="comment">// 需要接上on</span></span><br><span class="line">eventTarget.<span class="title function_">attachEvent</span>(eventNameWithOn, callback) </span><br></pre></td></tr></table></figure><h3 id="删除事件"><a href="#删除事件" class="headerlink" title="删除事件"></a>删除事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统方式</span></span><br><span class="line">div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">999</span>)</span><br><span class="line">    div.<span class="property">onclick</span> = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// addEventListener</span></span><br><span class="line"><span class="comment">// 注意绑定事件不能使用匿名函数，参数中不能写()，不是调用；</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>) &#125;</span><br><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn)</span><br><span class="line">div.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;cilck&#x27;</span>, fn);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 了解attachEvent（与addEventListener同理）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>) &#125;</span><br><span class="line">div.<span class="title function_">attachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>, fn)</span><br><span class="line">div.<span class="title function_">detachEvent</span>(<span class="string">&#x27;oncilck&#x27;</span>, fn);</span><br></pre></td></tr></table></figure><h3 id="Dom事件流"><a href="#Dom事件流" class="headerlink" title="Dom事件流"></a>Dom事件流</h3><p>事件发生时会在元素节点之间按照特定的顺序传播，事件的传播过程就是DOM事件流；</p><p>三个阶段：捕获阶段（从上往下或者从父到子） 、当前目标阶段 （触发事件）、冒泡阶段（从子到父）</p><p>注意：</p><ol><li><p>JS 代码中只能执行捕获或者冒泡其中的一个阶段。</p></li><li><p>onclick 和 attachEvent 只能得到冒泡阶段。</p></li><li><p>addEventListener(type, listener[, useCapture])第三个参数如果是 true，表示在事件捕获阶段调用事件处理程序；如果是 false（不写默认就是false），表示在事件冒泡阶段调用事件处理程序。</p></li><li><p>有些事件是没有冒泡的，比如 onblur、onfocus、onmouseenter、onmouseleave</p></li></ol><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// event对象代表事件的状态，比如键盘按键的状态、鼠标的位置、鼠标按钮的状态。</span></span><br><span class="line"><span class="comment">// 简单理解：事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面</span></span><br><span class="line">eventTarget.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;&#125;</span><br><span class="line">eventTarget.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;&#125;）</span><br><span class="line"><span class="comment">// 兼容ie6 7 8只支持window.event</span></span><br><span class="line">e = e || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br></pre></td></tr></table></figure><h3 id="事件对象属性方法"><a href="#事件对象属性方法" class="headerlink" title="事件对象属性方法"></a>事件对象属性方法</h3><p><img src="https://pic.imgdb.cn/item/61dc68a62ab3f51d9108e4a2.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this和event.target的区别</span></span><br><span class="line"><span class="comment">// this是事件绑定的元素，这个函数的调用者（绑定这个事件的元素）</span></span><br><span class="line"><span class="comment">// e.target 是事件触发的元素</span></span><br><span class="line"><span class="comment">// ul里面多个li，给ul绑定事件；this是ul，e.target点击哪个li或者ul，就是点击的那个</span></span><br><span class="line"><span class="comment">// currentTarget和this相似，都是绑定事件的元素</span></span><br><span class="line"><span class="comment">// 了解ie 6 7 8 使用e.target -&gt; e.srcElement</span></span><br></pre></td></tr></table></figure><h3 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统方式</span></span><br><span class="line">div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>() <span class="comment">// 是一个方法（低版本ie不支持）</span></span><br><span class="line">    e.<span class="property">returnValue</span> <span class="comment">// ie6 7 9 ，是一个属性</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">// 没有兼容性问题，但是在方法监听注册中不起作用</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标准写法：利用事件对象里面的 stopPropagation()方法</span></span><br><span class="line">div.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>)&#123;</span><br><span class="line">    e.<span class="title function_">stopPropagation</span>() <span class="comment">// 标准</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 了解低版本ie6 7 8</span></span><br><span class="line">e.<span class="property">cancelBubble</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原理：事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点。</span></span><br><span class="line"><span class="comment">// 如ul中有多个li，给父绑定事件就可以找到每个li</span></span><br><span class="line">ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;conlose.<span class="title function_">log</span>(e.<span class="property">target</span>)&#125;)</span><br></pre></td></tr></table></figure><h3 id="常用的鼠标事件"><a href="#常用的鼠标事件" class="headerlink" title="常用的鼠标事件"></a>常用的鼠标事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 禁止鼠标右键菜单</span></span><br><span class="line"><span class="comment">// contextmenu主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 禁止鼠标选中（selectstart 开始选中）</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;selectstart&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="鼠标事件对象"><a href="#鼠标事件对象" class="headerlink" title="鼠标事件对象"></a>鼠标事件对象</h3><p><img src="https://pic.imgdb.cn/item/61dc690f2ab3f51d9109216a.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// e.clientX,e.clientY的值是可视区域，不管页面是否有滚动条</span></span><br><span class="line"><span class="comment">// e.pageX,e.pageY的值是document文档的坐标</span></span><br></pre></td></tr></table></figure><h3 id="常用的键盘事件"><a href="#常用的键盘事件" class="headerlink" title="常用的键盘事件"></a>常用的键盘事件</h3><p><img src="https://pic.imgdb.cn/item/61dc69442ab3f51d91093ca2.png"></p><p>三个事件的执行顺序是： keydown – keypress — keyup，一直按着会一直触发keydown和keypress</p><h3 id="键盘事件对象"><a href="#键盘事件对象" class="headerlink" title="键盘事件对象"></a>键盘事件对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">onkeyup</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">key</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">code</span>)</span><br><span class="line">    <span class="comment">// 被弃用，得到的是ASCⅡ值，注意onkeyup和onkeydown不区分大小写，返回大写</span></span><br><span class="line">    <span class="comment">// 可以使用onkeypress</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">keyCode</span>) </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">key</span>.<span class="title function_">charCodeAt</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="BOM浏览器对象模型"><a href="#BOM浏览器对象模型" class="headerlink" title="BOM浏览器对象模型"></a>BOM浏览器对象模型</h1><p>BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心 对象是 window。</p><p>注意：不要使用name作为变量，name是属于window的属性</p><p><img src="https://pic.imgdb.cn/item/61dc69b22ab3f51d91097b6a.png"></p><h3 id="window对象常见的事件"><a href="#window对象常见的事件" class="headerlink" title="window对象常见的事件"></a>window对象常见的事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载事件，script可以放在任何位置，页面加载完</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>,<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br><span class="line"><span class="comment">// 仅当DOM加载完成，不包括样式表，图片，flash等等，加载速度比load快</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>,<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调整窗口大小事件，当窗口大小发生改变就会触发</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>) <span class="comment">// 获取屏幕的宽度（innerHeight）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setTimeout（延迟执行），调用不要写f()，否者直接调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123; <span class="title function_">alert</span>(<span class="number">1</span>) &#125;</span><br><span class="line"><span class="keyword">var</span> time = <span class="built_in">setTimeout</span>(f,<span class="number">3000</span>)</span><br><span class="line"><span class="keyword">var</span> time = <span class="built_in">setTimeout</span>(<span class="string">&#x27;f()&#x27;</span>,<span class="number">3000</span>) <span class="comment">// 函数字符串不推荐</span></span><br><span class="line"><span class="comment">// 停止定时器</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(time)</span><br><span class="line"></span><br><span class="line"><span class="comment">// setInterval（定时执行重复执行）</span></span><br><span class="line"><span class="keyword">var</span> time = <span class="literal">null</span></span><br><span class="line">tiem = <span class="built_in">setInterval</span>(f,<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">clearInterval</span>(time)</span><br></pre></td></tr></table></figure><h1 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h1><ol><li><p>全局作用域或者普通函数中this指向全局对象window（注意定时器里面的this指向window）</p></li><li><p>方法调用中谁调用this指向谁</p></li><li><p>构造函数中this指向构造函数的实例</p></li></ol><h3 id="JS执行队列"><a href="#JS执行队列" class="headerlink" title="JS执行队列"></a>JS执行队列</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出结果是1 2 3，定时器里的回调函数属于异步</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行机制：先执行执行栈中的同步任务，异步任务放入任务队列中，</span></span><br><span class="line"><span class="comment">// 同步任务执行完毕，系统就会按次序读取任务队列中的异步任务</span></span><br><span class="line"><span class="comment">// 事件循环event loop：主线程不断的重复获得任务、执行任务、再获取任务、再执行</span></span><br></pre></td></tr></table></figure><h3 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a>location 对象</h3><p><img src="https://pic.imgdb.cn/item/61dc6a212ab3f51d9109bacd.png"></p><p><img src="https://pic.imgdb.cn/item/61dc6a402ab3f51d9109cc7b.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// location属性</span></span><br><span class="line">location.<span class="property">href</span> = <span class="string">&#x27;xxxx&#x27;</span> <span class="comment">// 跳转到某页面</span></span><br><span class="line">location.<span class="property">search</span> <span class="comment">// 获取url的参数</span></span><br><span class="line"><span class="comment">// location方法</span></span><br><span class="line"><span class="comment">// 注意：assign和replace的区别，前面有记录历史；后不记录历史</span></span><br><span class="line">location.<span class="title function_">reload</span>(<span class="literal">true</span>) <span class="comment">// 强制刷新，相当于Ctrl+f5；不加就是普通刷新</span></span><br></pre></td></tr></table></figure><h3 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h3><p>navigator 对象包含有关浏览器的信息，常用的是userAgent返回由客 户机发送服务器的user-agent头部的值；可以查看是pc还是移动端实现加载不同页面；</p><h3 id="history-对象"><a href="#history-对象" class="headerlink" title="history 对象"></a>history 对象</h3><p><img src="https://pic.imgdb.cn/item/61dc6a7e2ab3f51d9109f0a2.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">history.<span class="title function_">forward</span>() <span class="comment">// 前进</span></span><br><span class="line">history.<span class="title function_">back</span>() <span class="comment">// 后退</span></span><br><span class="line">history.<span class="title function_">go</span>() <span class="comment">// 具体的数字，1前进、-1后退、0刷新；</span></span><br></pre></td></tr></table></figure><hr><h1 id="网页特效与其他"><a href="#网页特效与其他" class="headerlink" title="网页特效与其他"></a>网页特效与其他</h1><h3 id="元素偏移量-offset"><a href="#元素偏移量-offset" class="headerlink" title="元素偏移量 offset"></a>元素偏移量 offset</h3><p><img src="https://pic.imgdb.cn/item/61dc6ac82ab3f51d910a190e.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得元素距离带有定位父元素的位置</span></span><br><span class="line"><span class="comment">// 注意：是相对于带有定位的父元素（无论什么定位），没有就是相对于body</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">offsetLeft</span>)</span><br><span class="line"><span class="comment">// 获取元素的宽高</span></span><br><span class="line"><span class="comment">// 注意：content-box包括padding border；border-box没有</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">offsetWidth</span>) </span><br><span class="line"><span class="comment">// 获得带有定位的父元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">offsetParent</span>)</span><br></pre></td></tr></table></figure><h3 id="offset与style的区别"><a href="#offset与style的区别" class="headerlink" title="offset与style的区别"></a>offset与style的区别</h3><p>style 只能得到行内样式表中的样式值，style标签里的获取不到；</p><p>style.width获得的是带有单位的字符串 ，不包含padding和border的值 ，可以赋值；</p><p>offsetWidth只能获取不能赋值；（其他的属性也不能如offsetLeft）</p><h3 id="元素可视区client"><a href="#元素可视区client" class="headerlink" title="元素可视区client"></a>元素可视区client</h3><p><img src="https://pic.imgdb.cn/item/61dc6b0e2ab3f51d910a3e94.png"></p><p>注意：和offsetWidth的区别，clientWidth不包含边框</p><h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 立即执行函数: 不需要调用，立马能够自己执行的函数</span></span><br><span class="line"><span class="comment">// 函数可以取名，但是不能调用</span></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span>; <span class="comment">// 里面定义的是局部变量</span></span><br><span class="line">&#125;)(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 第二个小括号可以看做是调用函数</span></span><br><span class="line"><span class="comment">// 注意有两个立即执行函数中间需要用;隔开否者会报错</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;()) <span class="comment">// 第二种写法</span></span><br><span class="line"><span class="comment">// 最大的好处就是局部变量，变量名不会冲突</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 物理像素比，pc是1，而手机则是2或者其他</span></span><br><span class="line"><span class="keyword">var</span> dpr = <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span> || <span class="number">1</span></span><br><span class="line"><span class="comment">// window的pageshow事件，页面一显示就会触发，load没有刷新就不会触发如有缓存等情况</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pageshow&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line"><span class="comment">// e.persisted是true，缓存加载过来的也会触发    </span></span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">persisted</span>) &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="元素滚动scroll"><a href="#元素滚动scroll" class="headerlink" title="元素滚动scroll"></a>元素滚动scroll</h3><p><img src="https://pic.imgdb.cn/item/61dc6b7b2ab3f51d910a7b4c.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scrollHeight和clientHeight差不多</span></span><br><span class="line"><span class="comment">// 但是当元素高固定，里面内容超出时，就会显示内容文字的高度，而client不会</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">scrollHeight</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">clientHeight</span>);</span><br><span class="line"><span class="comment">// scroll滚动事件当我们滚动条发生变化会触发的事件</span></span><br><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">scrollTop</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// scrollTop是内容元素有滚动条之后，内容上侧超出的高度，如果有边框局包含它</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面被卷去的头部：可以通过window.pageYOffset获得</span></span><br><span class="line"><span class="comment">// 如果是被卷去的左侧 window.pageXOffset</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意:元素被卷去的头部是 element.scrollTop</span></span><br><span class="line"><span class="comment">// 如果是页面被卷去的头部 则是 window.pageYOffset</span></span><br></pre></td></tr></table></figure><h3 id="鼠标事件一些区别"><a href="#鼠标事件一些区别" class="headerlink" title="鼠标事件一些区别"></a>鼠标事件一些区别</h3><p>onmouseover、nmouseout：鼠标移动到自身时候会触发事件，同时移动到其子元素身上也会触发事件 </p><p>onmouseenter、onmouseleave：鼠标移动到自身是会触发事件，但是移动到其子元素身上不会触发事件</p><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p>注意：定时器可以赋值某个对象的属性，可以节约内存资源，不需要使用字符串；</p><p>​            封装的动画函数中，回调函数是在动画结束后再触发；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params">obj, target, callback</span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(callback);  callback = function() &#123;&#125;  调用的时候 callback()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先清除以前的定时器，只保留当前的一个定时器执行</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span><br><span class="line">    obj.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 步长值写到定时器的里面</span></span><br><span class="line">        <span class="comment">// 把我们步长值改为整数 不要出现小数的问题</span></span><br><span class="line">        <span class="comment">// var step = Math.ceil((target - obj.offsetLeft) / 10);</span></span><br><span class="line">        <span class="keyword">var</span> step = (target - obj.<span class="property">offsetLeft</span>) / <span class="number">10</span>;</span><br><span class="line">        step = step &gt; <span class="number">0</span> ? <span class="title class_">Math</span>.<span class="title function_">ceil</span>(step) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(step);</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="property">offsetLeft</span> == target) &#123;</span><br><span class="line">            <span class="comment">// 停止动画 本质是停止定时器</span></span><br><span class="line">            <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span><br><span class="line">            <span class="comment">// 回调函数写到定时器结束里面</span></span><br><span class="line">            <span class="comment">// if (callback) &#123;</span></span><br><span class="line">            <span class="comment">//     // 调用函数</span></span><br><span class="line">            <span class="comment">//     callback();</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            callback &amp;&amp; <span class="title function_">callback</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把每次加1 这个步长值改为一个慢慢变小的值  步长公式：(目标值 - 现在的位置) / 10</span></span><br><span class="line">        obj.<span class="property">style</span>.<span class="property">left</span> = obj.<span class="property">offsetLeft</span> + step + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动调用点击</span></span><br><span class="line">div.<span class="title function_">click</span>()</span><br></pre></td></tr></table></figure><h3 id="移动端网页特效"><a href="#移动端网页特效" class="headerlink" title="移动端网页特效"></a>移动端网页特效</h3><p><img src="https://pic.imgdb.cn/item/61dc6bd72ab3f51d910aada6.png"></p><h3 id="触摸事件对象"><a href="#触摸事件对象" class="headerlink" title="触摸事件对象"></a>触摸事件对象</h3><p><img src="https://pic.imgdb.cn/item/61dc6bfc2ab3f51d910ac256.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, <span class="keyword">function</span>(<span class="params">touchEvent</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(touchEvent.<span class="property">targetTouches</span>[])</span><br><span class="line">     <span class="comment">// 阻止屏幕滚动的默认行为，屏幕有滚动条时，移动元素屏幕不会滚动。</span></span><br><span class="line">     e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="/2021/12/05/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2021/12/05/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<div id="skip"></div><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，Markdown 文件的后缀名便是“.md”。<br>Markdown 常被使用来撰写电子书、博客等，同时也是我们用来记笔记的好伙伴。</p><p>本文主要介绍 Markdown 基本语法，如标题、代码块、列表、引用等语法的使用规则。</p><hr><h1 id="一、标题语法"><a href="#一、标题语法" class="headerlink" title="一、标题语法"></a>一、标题语法</h1><p>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><p>效果展示：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>注：# 和文字之间的空格（以及其他语法中的空格）</p></blockquote><hr><h1 id="二、代码语法"><a href="#二、代码语法" class="headerlink" title="二、代码语法"></a>二、代码语法</h1><p><strong>要将单词或短语表示为代码，请将其包裹在反引号( ` )中。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是`Markdown`语法</span><br></pre></td></tr></table></figure><p>效果展示：</p><blockquote><p>这是<code>Markdown</code>语法</p></blockquote><p><strong>代码块：使用<code>( ``` )</code>包裹中代码即可</strong><br>效果展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是代码块</span><br></pre></td></tr></table></figure><hr><h1 id="三、字体语法"><a href="#三、字体语法" class="headerlink" title="三、字体语法"></a>三、字体语法</h1><p>Markdown 可以使用以下几种字体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">**粗体文本**</span><br><span class="line">***粗斜体文本***</span><br><span class="line">~~这是加删除线的文字~~</span><br><span class="line">&lt;u&gt;带下划线文本&lt;/u&gt;</span><br></pre></td></tr></table></figure><p>效果展示：</p><blockquote><p><em>斜体文本</em><br><strong>粗体文本</strong><br><em><strong>粗斜体文本</strong></em><br><del>这是加删除线的文字</del><br><u>带下划线文本</u></p></blockquote><hr><h1 id="四、表格语法"><a href="#四、表格语法" class="headerlink" title="四、表格语法"></a>四、表格语法</h1><p>使用三个或多个连字符<code>- - -</code>创建每列的标题，并使用管道<code>|</code>分隔每列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头  | 表头 |</span><br><span class="line">|  ---  | --- |</span><br><span class="line">| 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><p>效果展示：</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><p>对齐：在标题行中的连字符使用<code>:</code>，来控制表格的文本对齐方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Syntax      | Description | Test Text     |</span><br><span class="line">| :---        |    :----:   |          ---: |</span><br><span class="line">| Header      | Title       | Here&#x27;s this   |</span><br><span class="line">| Paragraph   | Text        | And more      |</span><br></pre></td></tr></table></figure><p>效果展示：</p><table><thead><tr><th align="left">Syntax</th><th align="center">Description</th><th align="right">Test Text</th></tr></thead><tbody><tr><td align="left">Header</td><td align="center">Title</td><td align="right">Here’s this</td></tr><tr><td align="left">Paragraph</td><td align="center">Text</td><td align="right">And more</td></tr></tbody></table><hr><h1 id="五、列表语法"><a href="#五、列表语法" class="headerlink" title="五、列表语法"></a>五、列表语法</h1><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>在每个列表项前添加数字并紧跟一个英文句点<code>.</code>，列表应当以数字 1 起始。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 第一行</span><br><span class="line">2. 第二行</span><br></pre></td></tr></table></figure><p>效果展示：</p><blockquote><ol><li>第一行</li><li>第二行</li></ol></blockquote><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>在每个列表项前面添加破折号<code>-</code>、星号<code>*</code>或加号<code>+</code>。缩进一个或多个列表项可创建嵌套列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- First item</span><br><span class="line">- Second item</span><br></pre></td></tr></table></figure><p>效果展示：</p><ul><li>First item</li><li>Second item</li></ul><h4 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h4><p>列表嵌套只需在子列表中的选项添加四个空格即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure><p>效果展示：</p><blockquote><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol></blockquote><hr><h1 id="六、文本语法"><a href="#六、文本语法" class="headerlink" title="六、文本语法"></a>六、文本语法</h1><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>Markdown 引用是在段落开头使用&gt;符号 ，然后后面紧跟一个空格符号，引用也可以嵌套，例如两个&gt;&gt;，三个&gt;&gt;&gt;，以此类推：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是引用的内容</span><br><span class="line">&gt;&gt; 这是引用的内容</span><br><span class="line">&gt;&gt;&gt; 这是引用的内容</span><br></pre></td></tr></table></figure><p>效果展示：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)，title则是鼠标放上去悬浮显示的文本。</span><br><span class="line">[百度](https:www.//baidu.com)</span><br><span class="line">[默谐的个人博客](https://githubmoxie.github.io/ &quot;欢迎来到我的博客！&quot;)</span><br></pre></td></tr></table></figure><p>效果展示：<br><a href="https://www.baidu.com/">百度</a><br><a href="https://githubmoxie.github.io/" title="欢迎来到我的博客！">默谐的个人博客</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>使用感叹号<code>![]()</code>, 其中<code>[]</code>增加替代文本，<code>()</code>放图片链接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片链接 &quot;图片title&quot;)</span><br><span class="line">注：图片alt为图片加载错误出现的文本,点击查看后图片下方也会出现文本</span><br><span class="line">![clannad](https://pic.imgdb.cn/item/61bb54112ab3f51d91ff7d77.jpg)</span><br><span class="line"></span><br><span class="line">使用img标签可以控制图片大小</span><br><span class="line">&lt;img src=&quot;图片地址&quot; alt=&quot;图片替换文本&quot; width=&quot;500&quot; height=&quot;300&quot; /&gt;</span><br></pre></td></tr></table></figure><p>效果展示：</p><p><img src="https://pic.imgdb.cn/item/61bb54112ab3f51d91ff7d77.jpg" alt="clannad"></p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>分割线可以三个或三个以上的-或者*都可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">***</span><br></pre></td></tr></table></figure><p>效果展示：</p><hr><h1 id="七、扩展用法"><a href="#七、扩展用法" class="headerlink" title="七、扩展用法"></a>七、扩展用法</h1><h3 id="Markdown-文档上下跳转"><a href="#Markdown-文档上下跳转" class="headerlink" title="Markdown 文档上下跳转"></a>Markdown 文档上下跳转</h3><p>使用<code>&lt;div id=&quot;skip&quot;&gt;&lt;/div&gt;</code>的id属性，再使用<code>[跳转文本](#id名称)</code>来跳转。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;skip&quot;&gt;&lt;/div&gt;</span><br><span class="line">将&lt;div id=&quot;skip&quot;&gt;&lt;/div&gt;放在前言的上方，即瞄点位置。</span><br><span class="line">[跳转到前言](#skip)</span><br></pre></td></tr></table></figure><p>效果展示：<br><a href="#skip">跳转到前言</a></p><blockquote><p>注：在Hexo中跳转，可参考：<br><a href="/2022/01/09/Hexo%E4%BC%98%E5%8C%96%E6%95%99%E7%A8%8B/#Hexo文档中的跳转">Hexo文档中的跳转</a></p></blockquote><h3 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h3><p>使用标签<code>&lt;br/&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是第一行文字&lt;br/&gt;这是换行后的文字</span><br></pre></td></tr></table></figure><p>效果展示：<br>这是第一行文字<br/>这是换行后的文字</p><hr><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h4 id="Markdown-语法编辑器推荐Typora"><a href="#Markdown-语法编辑器推荐Typora" class="headerlink" title="Markdown 语法编辑器推荐Typora"></a>Markdown 语法编辑器推荐<code>Typora</code></h4><p>该编辑器直接使用鼠标右键就可快速使用 Markdown 语法，方面文档的撰写！。</p><p>官方地址：<a href="https://typora.com.cn/">Typora</a></p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://markdown.com.cn/">Markdown 官方教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript基础</title>
      <link href="/2021/12/05/JavaScript%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/12/05/JavaScript%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文介绍JavaScript的基础语法，主要记录自己学习JavaScript的过程，内容可能有些许错乱、不够完善。</p><hr><h1 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h1><p><strong>这部分是博主初学JavaScript的随笔记录，放到此处。可以直接跳转到数据类型</strong>。</p><p><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型</a></p><h4 id="值"><a href="#值" class="headerlink" title="值"></a>值</h4><ul><li><p>值的类型：null（空）、undefined（未定义）、string（字符串）、number（数字）、Boolean（布尔值）、Symbol（符号）。</p></li><li><p>引用值：function（）、Array（数组）、Object（对象）。</p></li></ul><h4 id="需要了解的运算符、关键字和保留字"><a href="#需要了解的运算符、关键字和保留字" class="headerlink" title="需要了解的运算符、关键字和保留字"></a>需要了解的运算符、关键字和保留字</h4><p><img src="https://pic.imgdb.cn/item/61dc54332ab3f51d91fbacc7.png"></p><p><img src="https://pic.imgdb.cn/item/61dc54332ab3f51d91fbacd3.png"></p><h4 id="其他基础"><a href="#其他基础" class="headerlink" title="其他基础"></a>其他基础</h4><ul><li><p><code>&lt;a href=&quot;javascript:;&quot;&gt;&lt;/a&gt;</code>阻止刷新</p></li><li><p>只要是有” “会变成string，例如”undefined1”为字符串。</p></li><li><p>选择器嵌套：</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div=<span class="variable language_">document</span>.<span class="property">getElementsByClassName</span>[index].<span class="title function_">getElementByTagName</span>(<span class="string">&#x27;div&#x27;</span>）</span><br></pre></td></tr></table></figure><ul><li><p><code>%</code>代表为余数</p></li><li><p>if（变量名）判断是否有值，（下图中被认定为false）。</p></li><li><p>[] 里面可以放几个[{},0,”数组”]，{,}，()变量（键名，键值）。</p></li><li><p>设置多个style</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如：</span></span><br><span class="line">div.<span class="property">style</span>=<span class="string">&#x27;color:green;background:cyan;&#x27;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;hello&quot;</span>).<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Jquery设置样式</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>, <span class="string">&quot;font-size&quot;</span>:<span class="string">&quot;20px&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><h6 id="交换两个变量的值"><a href="#交换两个变量的值" class="headerlink" title="交换两个变量的值"></a>交换两个变量的值</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">234</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = b</span><br><span class="line">b = a</span><br><span class="line">a = c</span><br><span class="line"><span class="comment">//第一种交换变量值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a = a + b</span></span><br><span class="line"><span class="comment">// b = a - b</span></span><br><span class="line"><span class="comment">// a = a - b</span></span><br><span class="line"><span class="comment">//第二种交换变量值，为浮点数有一定问题。</span></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="comment">// b = a + (a = b) - b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// b = a + (a = b , 0)</span></span><br><span class="line"><span class="comment">// 第三种交换</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b)</span><br></pre></td></tr></table></figure><h6 id="封装一个选择器函数"><a href="#封装一个选择器函数" class="headerlink" title="封装一个选择器函数"></a>封装一个选择器函数</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">$</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h6><p>for in循环，下图中key为键名，输出键值[key]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">&quot;Aaron Ryuu&quot;</span>, <span class="attr">age</span>: <span class="number">30</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> person) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(person[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下，点击事件输出的i为demo.leagth，（即为最后的个数），var换成let可以解决，或者闭包。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    (<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">        demo[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当i = 0时，demo[0].onclick = function(){alert(i)}i++</p><p>当i = 1时，demo[1].onclick = function(){alert(i)}i++</p><p>当i = 2时，demo[2].onclick = function(){alert(i)}i++</p><p>当i = 3时，demo[3].onclick = function(){.alert(i)}i++</p><p>当i = 4时,不满足条件跳出循环。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    $(<span class="string">&quot;demo&quot;</span>)[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for里面的var是全局变量，文档全部可以使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)<span class="comment">//输出0，1，2，3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)<span class="comment">//输出4</span></span><br></pre></td></tr></table></figure><h6 id="判断整数"><a href="#判断整数" class="headerlink" title="判断整数"></a>判断整数</h6><p>判断整数：if(isNaN(填：val))</p><p>时间：var now = new Date()；</p><h6 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> day = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getDay</span>();</span><br><span class="line"><span class="keyword">var</span> today;</span><br><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">       today = <span class="string">&quot;某某&quot;</span>;</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   <span class="attr">default</span>:</span><br><span class="line">       today = <span class="string">&quot;某某&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h6><p>charCodeAt里转化大于255的为中文（2字节），否则是英文（1字节）。</p><p>字符串中间的空格也会算一个索引值。</p><ul><li><p>js逐行解析</p></li><li><p>1字节（B）=8bit（比特）；</p></li><li><p>ECMAScript（标准语法）、Dom（文档对象模型）、Bom（浏览器对象模型）；</p></li><li><p>prompt（）输入框。用户可以输入；</p></li></ul><h6 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h6><p>变量是一个容器，var x = 1 ，声明加赋值一起是变量的初始化；</p><p>不要var会是全局变量；不加，会导致下面的是全局变量；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同时声明多个变量</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>,</span><br><span class="line">    address = <span class="string">&#x27;火影&#x27;</span>,</span><br><span class="line">    gz = <span class="number">2000</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age, address, gz)</span><br></pre></td></tr></table></figure><p>变量名：变量严格区分大小写，不能数字开头；使用英语单词，不要使用name；</p><hr><h1 id="数据基础"><a href="#数据基础" class="headerlink" title="数据基础"></a>数据基础</h1><p>js 的变量数据类型是只有程序在运行过程中，根据等号右边的值来确定的，是动态变化的；</p><h3 id="数字性"><a href="#数字性" class="headerlink" title="数字性"></a>数字性</h3><p>以0开头的为8进制（如：<code>var num =010</code>）；十六进制<code>0~9</code>，<code>a~f</code>（<code>0x9</code>）；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最大值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>)</span><br><span class="line"><span class="comment">// 最小值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>)</span><br><span class="line"><span class="comment">//无穷大Infinity</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span> * <span class="number">2</span>)</span><br><span class="line"><span class="comment">//无穷小-Infinity</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(-<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span> * <span class="number">2</span>)</span><br><span class="line"><span class="comment">//非数字NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink&#x27;</span> - <span class="number">10</span>)</span><br><span class="line"><span class="comment">//isNaN(),返回true和false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><hr><h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><p>字符串的引号选择就近原则</p><p><strong>转义符</strong>：需要\开头</p><table><thead><tr><th>\n</th><th>换行</th></tr></thead><tbody><tr><td>\</td><td>斜杠\</td></tr><tr><td>&#39;</td><td>‘单引号</td></tr><tr><td>&quot;</td><td>”双引号</td></tr><tr><td>\t</td><td>tab，缩进</td></tr><tr><td>\b</td><td>空格，blank</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 外面单双引号都可以</span></span><br><span class="line"><span class="keyword">var</span> str =<span class="string">&#x27;我是&quot;默谐&quot;&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str1 =<span class="string">&quot;我是&#x27;默谐&#x27;&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1)</span><br></pre></td></tr></table></figure><ul><li><p>Boolern：true=1，false=0；可用与相加；</p></li><li><p>typeof可以用来判断变量的类型。</p></li><li><p>null的typeof输出为object；</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num)</span><br></pre></td></tr></table></figure><p><strong>数据类型转化：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="title function_">prompt</span>(<span class="string">&quot;请输入年龄&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num)</span><br><span class="line"><span class="comment">// 输出为字符串</span></span><br></pre></td></tr></table></figure><ul><li>转化为字符串（如下3种方法）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> z = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> z1 = z.<span class="title function_">toString</span>()</span><br><span class="line"><span class="keyword">var</span> z2 = <span class="title class_">String</span>(z)</span><br><span class="line"><span class="keyword">var</span> z3 = <span class="number">1</span> + <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> z,<span class="keyword">typeof</span> z1,<span class="keyword">typeof</span> z2,<span class="keyword">typeof</span> z3)</span><br></pre></td></tr></table></figure><ul><li>转化为数字</li></ul><p>input也是字符串，需要转化成整数或者浮点数；</p><p>parseInt()；parseFloat()；Number()；隐式转化- * /三个；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保留两位小数toFixed</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;165.65141&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(a).<span class="title function_">toFixed</span>(<span class="number">2</span>))</span><br><span class="line"><span class="comment">// parseInt第二个参数</span></span><br><span class="line"><span class="built_in">parseInt</span>(string, radix)</span><br><span class="line"><span class="comment">// 表示前面字符串按照几进制转化成10进制（范围2-3）</span></span><br></pre></td></tr></table></figure><ul><li><p>转化为布尔型</p></li><li><p>使用Boolean()，<code>0</code> <code>NaN</code> <code>null</code> <code>undefined</code> <code>&quot; &quot;</code> 这五个会转化为<code>false</code>，其他为<code>true</code>；</p></li><li><p>强转布尔值！！</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">6</span>)</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">&quot;10&quot;</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">&quot;5&quot;</span></span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">&quot;40&quot;</span></span><br><span class="line">arr[<span class="number">3</span>] = <span class="string">&quot;25&quot;</span></span><br><span class="line">arr[<span class="number">4</span>] = <span class="string">&quot;1000&quot;</span></span><br><span class="line">arr[<span class="number">5</span>] = <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure><p><strong>转化数组：</strong></p><ul><li><p>split其中（）、（’’）、（’ ‘）、（’ , ‘）的区别；第一种是转化为一个数组、加引号是每个字符串一个数组、空格和逗号是用什么分割开字符串后再排除这分割符号转化数组的意思。（如果字符串中间没有空格和逗号使用后面两个，会和第一种一样）；</p></li><li><p>join其中（）、（’’）、（’ ‘）、（’ , ‘）的区别；第一种是默认数组中几个用,隔开，第二种是直接相连、最后两个是几个用空格隔开和用逗号隔开，最后的与第一个相同。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  split（）</span></span><br><span class="line"><span class="keyword">var</span> color = <span class="string">&quot;red,blue,yellow&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(color.<span class="title function_">split</span>());</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><strong>sort排序：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> values = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">20</span>, <span class="number">3</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>    <span class="comment">//排在后面</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>   <span class="comment">//排在前面</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二种（推荐）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b<span class="comment">//倒序b-a</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(values.<span class="title function_">sort</span>(a))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(values.<span class="title function_">sort</span>(b));</span><br></pre></td></tr></table></figure><p><strong>数组循环：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">nums.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(nums[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用map可以直接用var，可以直接返回；</span></span><br><span class="line"><span class="keyword">var</span> result = nums.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item, index, array</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><p>时间加new是一个对象，不加是一个字符串，会导致它的时间对象的方法不能使用。</p></li><li><p>除了<code>getDate()</code>中的月的第几天，（从1开始）；其他是从零开始，如：月的索引值是0开始，判断月份注意；</p></li><li><p><code>value</code>得到的是字符串，需要转化为数字，才能运算。</p></li><li><p><code>return</code>返回值时不能加<code>var</code>。</p></li><li><p>如何解决：在<code>span</code>内加上style属性（样式）<code>word-break:break-all;</code>可以让英文自动换行；</p></li><li><p>再封装选择器函数时，使用return返回函数里面的变量，不能返回这个，需要返回具体的表示的那个。</p></li><li><p>使用<code>document.querySlectorALL</code>的方法，获取的也是数组；</p></li></ul><p><strong>三元表达式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> offsetLeft</span><br><span class="line">step = step &gt; <span class="number">0</span> ? <span class="title class_">Math</span>.<span class="title function_">ceil</span>(step) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(step)</span><br></pre></td></tr></table></figure><ul><li><p>使用截流的是下面的赋值需要放到if里面；</p></li><li><p>写轮播图是注意index++不要写到定时器的里面了；（图片的offsetLeft页面缩放会影响，放大不会）</p></li><li><p>indexOf字符串索引值的位置，lastIndexOf是从后往前搜索字符串，找到索引值位置；（数组同理）</p></li></ul><p><strong>元素外部插入节点:</strong></p><p>使用原生js在元素外部插入可以使用insertBefore先找到父级,再将第二个参数填要插入的节点;</p><p>或者使用insertAdjacentHTML来插入,但是不能使用document.createElement(“li”)来创建节点,直接创建;</p><p>如果是克隆,或者上面的某个,目前只知道能使用第一种;</p><hr><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a><strong>运算符</strong></h1><p>算数运算符：+ - * / %；浮点数运算有精度问题（避开浮点数运算），不要用来相比较；**次方；</p><p>表达式和返回值：var num = 1 + 1；</p><p>前置运算符，后置运算符，++num、num++；只能配合变量使用；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单独使用效果相同，前置是先自加，后返回值；</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++age + <span class="number">10</span>) <span class="comment">// 31</span></span><br><span class="line"><span class="comment">// 后置先返回原值，后自加</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age++ + <span class="number">10</span>) <span class="comment">// 30</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// 31</span></span><br><span class="line"><span class="comment">// 注意age赋值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age++ + age++) <span class="comment">// 41</span></span><br></pre></td></tr></table></figure><p><strong>比较运算符</strong>：== ！=；=== ！==</p><ul><li><p>逻辑运算符：&amp;&amp; || ！</p><ol><li>逻辑&amp;&amp;两侧都为true，结果是true，一侧为false就是false；</li><li>逻辑||两侧都为false，结果是false，一侧为true就是true；</li></ol></li><li><p>短路运算：值或者表达式参与逻辑运算；当有多个表达式值时，左边的表达式值可以确定结果时，就不再继续运算右边的表达式的值；（好像：boolearn不影响）</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逻辑与&amp;&amp;短路运算；（“找假”）；逻辑或||短路运算；（“找真”）</span></span><br><span class="line"><span class="comment">// 如果表达式1结果为真，则返回表达式2</span></span><br><span class="line"><span class="comment">// 如果表达式1结果为假，则返回表达式1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> &amp;&amp; <span class="number">456</span>) <span class="comment">// 456</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> &amp;&amp; <span class="number">456</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &amp;&amp; <span class="number">5</span> &amp;&amp; <span class="number">2</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &amp;&amp; <span class="number">0</span> &amp;&amp; <span class="number">2</span>) <span class="comment">//0</span></span><br><span class="line"><span class="comment">// 逻辑中断，影响程序运行结果；</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> || num++) <span class="comment">// 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>赋值运算符：+= -= *= /= %=；原理同+=</p><p>运算符优先级：</p><p><img src="https://pic.imgdb.cn/item/61dc5fdc2ab3f51d91039e22.png"></p><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h4 id="for循环-1"><a href="#for循环-1" class="headerlink" title="for循环"></a>for循环</h4><ol><li><p>首先执行里面的计数器变量var i = 1，但是这句话只执行一次；</p></li><li><p>去i &lt;=100来判断是否满足条件，满足执行循环体，不满足退出循环；</p></li><li><p>执行i ++，递增第一轮结束；</p></li><li><p>接着去执行i&lt;=100，满足执行循环体，不满足退出循环；</p></li></ol><p><strong>断点调试：</strong></p><p>浏览器选择Sources，选择要测试的文件，之后点击代码左边那行断点，刷新页面即可，右上角可以选择下一步、上一步等调试工具；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印10行递减三角形</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &lt;=<span class="number">10</span>; j++) &#123;</span><br><span class="line">        str = str + <span class="string">&#x27;⭐&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印9*9乘法表</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">        str += j + <span class="string">&#x27;*&#x27;</span> + i + <span class="string">&#x27;=&#x27;</span> + j * i + <span class="string">&#x27;\t&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br></pre></td></tr></table></figure><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><ul><li><p>while do循环至少执行一次，先执行再判断；（适合判断循环条件复杂使用）</p></li><li><p>continue是跳出本次循环直接跳到i++，继续执行剩余的循环；break退出整个循环；</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i===<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">// 结果为 1 2 4 5，没有3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h1><p><strong>数组创建方式：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用new创建</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="comment">// 利用数组字面量创建数组[]</span></span><br><span class="line"><span class="keyword">var</span> arr = []</span><br></pre></td></tr></table></figure><p><strong>数组转换成字符串</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> sep = <span class="string">&#x27;!&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    str += arr[i] + sep</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br></pre></td></tr></table></figure><p><strong>数组新增元素</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr.<span class="property">length</span> = <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">3</span>]) <span class="comment">// undefined</span></span><br><span class="line">arr[<span class="number">3</span>] = <span class="number">4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">3</span>]) <span class="comment">// 4，可以用来新增和替换；</span></span><br></pre></td></tr></table></figure><p><strong>冒泡排序</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123; <span class="comment">// 循环管趟数,每次循环后将取一个最大值放后面；</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - <span class="number">1</span> - i; j++) &#123; <span class="comment">// 循环管次数</span></span><br><span class="line">        <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = arr[j]</span><br><span class="line">            arr[j] = arr[j + <span class="number">1</span>]</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li><p>(()=&gt;{console.log(this)})() 输出为Window</p></li><li><p>封装函数实参和形参不匹配问题：</p><ol><li>如果实参个数多余形参，则会取形参的个数；</li><li>如果实参个数少余形参，（相相当于后面的形参只是声明没有赋值，为undefined，NaN，拼接其他）；</li></ol></li><li><p>函数返回return（for循环不可以写）return只能返回一个值，有多个值用逗号隔开会返回最后的一个；</p></li><li><p>函数没有return返回值则是undefined；</p></li></ul><p><strong>arguments：</strong></p><p>所有函数都内置arguments对象，其中存储了传递的 所有实参。</p><p>一个伪数组并不是真正的数组；特点：有数组的length属性，按照索引的方式进行存储的，没有真正数组的一些方法 pop()、push()等等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反转数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.<span class="property">length</span>-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        newArr[newArr.<span class="property">length</span>]=arr[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">reverse</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]))</span><br></pre></td></tr></table></figure><ul><li><p>判断闰年算法：能被四整除且不能被100整除，或者能被400整除；（如：2100年）</p></li><li><p>函数2种声明方式：①（命名函数）function name(){}；②（匿名函数）var name= function(){}，name是变量名，不是函数名；</p></li></ul><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p><strong>定义</strong>：某个代码名字（变量）起作用和效果；</p><p><strong>全局变量</strong>：只有再浏览器关闭的时候才会销毁，比较占内存资源；</p><p><strong>局部变量</strong>：当我们程序执行完毕就会销毁，比较节约内存资源；</p><p><strong>js没有块级作用域</strong>：ES6新增了；就是{}里面定义的变量如if中，外面可以读取到；</p><p><strong>作用域链</strong>：内部函数访问外部函数的变量，采取的是链式查找的方式来决定取哪个之值；内部函数不能直接调用，函数内部声明的函数，调用外部函数但是想要触发里面函数定义的变量等，必须先在外部函数里面调用这个内部函数；（多个函数嵌套，也是需要外部的调用里面的，一级一级调用才会生效）</p><h4 id="js预解析"><a href="#js预解析" class="headerlink" title="js预解析"></a>js预解析</h4><p>js解析器先预解析再代码执行；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var f1</span></span><br><span class="line"><span class="title function_">f1</span>() <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> f1 = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1111</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>js里面的所有var，function提升到当前作用域的最前面；</p></li><li><p>执行代码，从上往下；</p></li></ol><ul><li><p>变量提升就是把所有的变量声明提升到当前的作用域最前面，不提升赋值操作；</p></li><li><p>函数提升就是把所有的函数声明提升到当前的作用域最前面，不调用函数；</p></li></ul><hr><h1 id="对象导读"><a href="#对象导读" class="headerlink" title="对象导读"></a>对象导读</h1><p>创建对象的三种方式</p><ol><li><p>利用字面量创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">attribute</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">action</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除对象属性</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">age</span></span><br><span class="line"><span class="comment">// 调用属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">attribute</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&#x27;attribute&#x27;</span>])</span><br><span class="line">obj.<span class="title function_">action</span>()</span><br></pre></td></tr></table></figure></li><li><p>利用 new Object 创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br></pre></td></tr></table></figure></li><li><p>利用构造函数创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以一次创建多个对象，调用时返回的是一个对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = uname</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params">sing</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(sing);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> star = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;DWS&#x27;</span>,<span class="number">22</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(star.<span class="property">name</span>);</span><br><span class="line">star.<span class="title function_">sing</span>(<span class="string">&#x27;冰雨&#x27;</span>);</span><br><span class="line"><span class="comment">// 构造函数首字母大写（规范）</span></span><br><span class="line"><span class="comment">// 构造函数不需要返回值，就可以打印</span></span><br><span class="line"><span class="comment">// 调用构造函数必须使用new</span></span><br></pre></td></tr></table></figure></li></ol><p>①构造函数泛指某一大类；②对象特指具体的事物（实例）；③我们利用构造函创建对象的过程称为对象的实例化；</p><ol start="4"><li><p>new关键字</p><ol><li>在内存中创建一个新的空对象；</li><li>让this指向这个新的对象；</li><li>执行构造函数里面的代码，给这个新对象添加属性和方法；</li><li>返回这个新对象（所以构造函数里面不需要return）。</li></ol></li><li><p>遍历对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">&quot;DWS&quot;</span>, <span class="attr">age</span>: <span class="number">22</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><p>JS 语言自带的一些对象，提供了一些常用的或是最基本而必要的功能（属性和方法）</p><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p>使用时不需要new，对象不是构造函数，它具有数学常数和函数的属性和方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="property">PI</span> <span class="comment">// 圆周率</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>() <span class="comment">// 向下取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>() <span class="comment">// 向上取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>() <span class="comment">// 四舍五入</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>() <span class="comment">// 绝对值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>()/<span class="title class_">Math</span>.<span class="title function_">min</span>() <span class="comment">// 求最大和最小值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>() <span class="comment">// 一个浮点数的随机数在范围[0,1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>() <span class="comment">// 就近取整 注意 -3.5 结果是 -3，.5往大的取值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="string">&#x27; -1 &#x27;</span>) <span class="comment">// 结果为1，隐式转换；</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>()/<span class="title class_">Math</span>.<span class="title function_">min</span>() <span class="comment">// 直接console.log输出Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandomArbitrary</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min) + min;<span class="comment">// 两数之间的随机数,min &lt;= x &lt; max;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandom</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">  min = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(min);</span><br><span class="line">  max = <span class="title class_">Math</span>.<span class="title function_">floor</span>(max);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min)) + min; <span class="comment">//不含最大值，含最小值;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min; <span class="comment">//含最大值，含最小值 ;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h3><p>Date是一个构造函数，所以我们需要实例化后才能使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Date()方法的使用</span></span><br><span class="line"><span class="comment">// 里面可以跟参数得到的为参数时间，字符串为(&#x27;2021-11-18 14:21:00&#x27;)，数字(2021，11，18)</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;星期日&#x27;</span>, <span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;星期二&#x27;</span>, <span class="string">&#x27;星期三&#x27;</span>, <span class="string">&#x27;星期四&#x27;</span>, <span class="string">&#x27;星期五&#x27;</span>, <span class="string">&#x27;星期六&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> day = date.<span class="title function_">getDay</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[day])</span><br><span class="line"><span class="comment">// 注意，月份是从0开始，周日是0，周一是1；</span></span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/61dc62d82ab3f51d91056386.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取时间戳</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">valueOf</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getTime</span>())</span><br><span class="line"><span class="keyword">var</span> data1 = +<span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>())</span><br><span class="line"><span class="comment">// 设置时间</span></span><br><span class="line"><span class="keyword">var</span> myDate=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">myDate.<span class="title function_">setDate</span>(myDate.<span class="title function_">getDate</span>()+<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myDate.<span class="title function_">toLocaleString</span>());</span><br></pre></td></tr></table></figure><h3 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组创建</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">2</span>) <span class="comment">// 长度为2，2个空元素；</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 等价于[1, 2]；</span></span><br><span class="line"><span class="comment">// 检测是否为数组</span></span><br><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>) <span class="comment">// true，也可以检测是否为对象</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>数组添加删除数组元素的方法</li></ul><p><img src="https://pic.imgdb.cn/item/61dc64012ab3f51d91060f39.png"></p><ul><li>数组排序</li></ul><p><img src="https://pic.imgdb.cn/item/61dc649f2ab3f51d91066924.png"></p><p>注意sort排序，如果有多个数，则是按照第一位排序，需要回调函数；</p><ul><li>数组索引值</li></ul><p><img src="https://pic.imgdb.cn/item/61dc64de2ab3f51d91068aee.png"></p><ul><li>数组转换成字符串</li></ul><p><img src="https://pic.imgdb.cn/item/61dc65032ab3f51d9106a196.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> colors2 = colors.<span class="title function_">concat</span>(<span class="string">&#x27;black&#x27;</span>, [<span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;red&#x27;</span>]);</span><br><span class="line"><span class="comment">// slice(从开始位置，到结束位置不含结束位置)</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;red&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> colors2 = colors.<span class="title function_">slice</span>(<span class="number">1</span>) <span class="comment">// 索引值1到最后</span></span><br><span class="line"><span class="keyword">var</span> colors3 = colors.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>) <span class="comment">// 索引值1到3</span></span><br><span class="line"><span class="keyword">var</span> colors4 = colors.<span class="title function_">slice</span>(-<span class="number">2</span>, -<span class="number">1</span>) <span class="comment">// 倒数第2到第1</span></span><br><span class="line"><span class="comment">// splice(起始位置, 要删除的项数, 要插入的项)</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line">colors.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">1</span>);                        <span class="comment">//删除第一项</span></span><br><span class="line">colors.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);         <span class="comment">//从位置1开始插入两项</span></span><br><span class="line">colors.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span> , <span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>)     <span class="comment">//插入两项，删除一项</span></span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/61dc65312ab3f51d9106be38.png"></p><h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本包装类型（Number、String、Boolean）</span></span><br><span class="line"><span class="comment">// 把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。</span></span><br><span class="line"><span class="comment">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span></span><br><span class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;andy&#x27;</span>);</span><br><span class="line"><span class="comment">// 2. 赋值给我们声明的字符变量</span></span><br><span class="line">str = temp;</span><br><span class="line"><span class="comment">// 3. 销毁临时变量</span></span><br><span class="line">temp = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p><strong>字符串的不可变：</strong></p><p>​    当重新给 str 赋值的时候，常量’ abc ‘不会被修改，依然在内存中； 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变； 由于字符串的不可变，在大量拼接字符串的时候会有效率问题。</p><p><strong>方法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;1231&#x27;</span></span><br><span class="line"><span class="comment">// 根据字符串的位置返回索引值；indexOf第二个参数可选，从第几个索引开始查找；</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;1&#x27;</span>,[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><ul><li>根据字符串返回索引值</li></ul><p><img src="https://pic.imgdb.cn/item/61dc65672ab3f51d9106de2a.png"></p><ul><li>根据位置返回字符串</li></ul><p><img src="https://pic.imgdb.cn/item/61dc65982ab3f51d9106fb31.png"></p><ul><li>字符串方法</li></ul><p><img src="https://pic.imgdb.cn/item/61dc662c2ab3f51d91075f4e.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string.<span class="title function_">slice</span>(<span class="number">3</span>))<span class="comment">// lo world      没有第二个参数，都是找到字符串结尾</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string.<span class="title function_">substring</span>(<span class="number">3</span>))<span class="comment">// lo world</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string.<span class="title function_">substr</span>(<span class="number">3</span>))<span class="comment">// lo world</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string.<span class="title function_">slice</span>(<span class="number">3</span>, <span class="number">7</span>))<span class="comment">// lo w          从索引位置3，找到索引位置7之前</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string.<span class="title function_">substring</span>(<span class="number">3</span>, <span class="number">7</span>))<span class="comment">// lo w</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string.<span class="title function_">substr</span>(<span class="number">3</span>, <span class="number">7</span>))<span class="comment">// lo worl       从索引位置3开始，往后找7个</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string.<span class="title function_">slice</span>(-<span class="number">3</span>))<span class="comment">// rld            将负数与字符串长度相加 11 + (-3) = 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string.<span class="title function_">substring</span>(-<span class="number">3</span>)) <span class="comment">//hello world    将负数转成0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string.<span class="title function_">substr</span>(-<span class="number">3</span>))<span class="comment">// rld            将负数与字符串长度相加 11 + (-3) = 8</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string.<span class="title function_">slice</span>(<span class="number">3</span>, -<span class="number">4</span>))<span class="comment">// lo w           从3，到倒数第4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string.<span class="title function_">substring</span>(<span class="number">3</span>, -<span class="number">4</span>))<span class="comment">// hel   </span></span><br><span class="line"><span class="comment">//第二个参数是负数，直接转成0，相当于(3, 0)。但这个方法，会默认以小数开始，所以相当于(0, 3)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string.<span class="title function_">substr</span>(<span class="number">3</span>, -<span class="number">4</span>)) </span><br><span class="line"><span class="comment">//   第二个参数是负数，直接转成0， 相当于(3, 0)。返回0个字符串，即空字符串</span></span><br></pre></td></tr></table></figure><ul><li>字符串replace替换</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andyandy&#x27;</span><span class="comment">// 只会替换第一个字符，有多个后面的就不会；</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>))<span class="comment">// bndyandy</span></span><br><span class="line"><span class="comment">// 多个使用循环</span></span><br><span class="line"><span class="keyword">while</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>)!== -<span class="number">1</span>)&#123;</span><br><span class="line">    str = str.<span class="title function_">replace</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)<span class="comment">// bndybndy</span></span><br></pre></td></tr></table></figure><ul><li>转换成大小写</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string.<span class="title function_">toUpperCase</span>())<span class="comment">// HELLO WORLD</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string.<span class="title function_">toLowerCase</span>())<span class="comment">// hello world</span></span><br></pre></td></tr></table></figure><ul><li>判断数据类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> timer)<span class="comment">// object</span></span><br></pre></td></tr></table></figure><p>复杂类型：变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中；</p><hr>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客</title>
      <link href="/2021/12/05/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/12/05/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown 解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>本文介绍通过Hexo框架快速搭建个人博客，并部署到Gitee Pages服务部署博客。</p><hr><h1 id="环境的安装"><a href="#环境的安装" class="headerlink" title="环境的安装"></a>环境的安装</h1><p><strong>安装地址</strong></p><ul><li><a href="https://git-scm.com/">安装Git</a></li><li><a href="https://nodejs.org/zh-cn/">安装Node.js</a></li></ul><p><strong>GIT安装</strong></p><p>安装步骤：双击下载好的<code>exe</code>文件，一路点击next就好了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git bash // 运行</span><br><span class="line">git version // 查看版本</span><br></pre></td></tr></table></figure><blockquote><p>能看到版本号就说明你安装成功了，之后的命令都是在这里运行的。</p></blockquote><p><strong>Node.js安装</strong></p><p>安装步骤：双击下载好的<code>msi</code>文件，也是一路下一步就好了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v // 查看node.js版本</span><br><span class="line">npm -v // 查看npm版本</span><br></pre></td></tr></table></figure><hr><h1 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h1><h4 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装<code>cnpm</code></h4><p><strong>淘宝镜像</strong>：利用<code>npm</code>工具来安装一个<a href="https://npm.taobao.org/">cnpm</a>工具(国内的淘宝<code>npm</code>镜像源)，提升下载各种包的速度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>后面所有的命令<code>npm</code>换成<code>cnpm</code></p><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 全局安装Hexo包</span><br><span class="line">cnpm install -g hexo-cli</span><br><span class="line">// 查看版本号</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><blockquote><p>这里所需的环境和包已近安装完成，接下来就是搭建博客</p></blockquote><hr><h1 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h1><ol><li><p>在Git Bash中进入新建的文件件中</p></li><li><p>输入Hexo初始化命令<code>hexo init</code></p></li><li><p>初始化完成之后文件夹中出现以下文件：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件</li></ul></li><li><p>打开Hexo服务</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 运行项目</span><br><span class="line">hexo s</span><br><span class="line">// 运行后出现（浏览器访问http://localhost:4000）</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>使用Ctrl+C可以关闭服务</p><p>如果你的项目运行不起来或者一些包没下载完，可以选择将node_modules文件夹删除，再次<code>cnmp i</code>下载集成的包。</p></blockquote><ol start="5"><li><p>Hexo写一篇博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 命令&quot;&quot;中是文档名称</span><br><span class="line">hexo n &quot;我的第一篇博客&quot;</span><br></pre></td></tr></table></figure></li><li><p><code>/source/_posts/我的第一篇博客.md</code>编辑文档，重启Hexo服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean     // 清除所有记录----简写：hexo cl</span><br><span class="line">hexo generate  // 生成静态网页----简写：hexo g</span><br><span class="line">hexo server    // 启动服务----简写：hexo s</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="博客部署到Gitee上"><a href="#博客部署到Gitee上" class="headerlink" title="博客部署到Gitee上"></a>博客部署到Gitee上</h1><ul><li><a href="https://gitee.com/">Gitee</a>官网上新建仓库</li></ul><blockquote><p><strong>踩坑</strong>：仓库名字必须为你Gitee<code>设置/个人资料/个人空间地址</code>的名称一样，（注意不是你的Gitee姓名）否者部署上去会出现样式丢失的Bug</p></blockquote><p><img src="https://pic.imgdb.cn/item/61dc1dbc2ab3f51d91d2904a.png"></p><p><img src="https://pic.imgdb.cn/item/61dc1dbc2ab3f51d91d29052.png"></p><ul><li><p>打开Hexo的配置文件<code>_config.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// repo为你的仓库的url，我这里使用的是ssh地址</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@gitee.com:giteemoxie/giteemoxie.git</span><br><span class="line">  branch: master </span><br></pre></td></tr></table></figure></li></ul><blockquote><p>踩坑：注意你的配置文件中的url地址：</p><p>如果不是你的博客地址会出现问题，推送失败的bug或者部署出错的bug。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 例如：</span><br><span class="line">url: https://githubmoxie.github.io</span><br></pre></td></tr></table></figure><ul><li><p>安装一个Hexo插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// cpnm安装git推送插件</span><br><span class="line">cnpm install hexo-deployer-git --save</span><br><span class="line">// 上传到gitee的远端仓库</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>Git教程请看另外文章<a href="/2022/01/10/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" title="Git使用教程">Git使用教程</a></p></blockquote><ul><li>上传成功后，仓库里卖点击上面的服务，找到Gitee Pages进行部署</li></ul><p><img src="https://pic.imgdb.cn/item/61dc1dbc2ab3f51d91d29058.png"></p><blockquote><p><strong>注意：每次更改网页重新上传到仓库都要到这里来更新服务</strong></p></blockquote><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://hexo.io/zh-cn/">Hexo</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
